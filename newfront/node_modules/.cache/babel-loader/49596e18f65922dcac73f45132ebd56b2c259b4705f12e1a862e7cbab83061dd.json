{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaime\\\\TFGProto\\\\newfront\\\\src\\\\components\\\\Exercises\\\\TriangleExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TriangleExercise = _ref => {\n  _s();\n  let {\n    enunciado\n  } = _ref;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const resizeCanvas = () => {\n      // Obtén el tamaño de la ventana\n      const {\n        width,\n        height\n      } = canvas.getBoundingClientRect();\n\n      // Establece el tamaño del canvas\n      canvas.width = width;\n      canvas.height = height;\n\n      // Dibuja el eje de coordenadas\n      context.beginPath();\n      context.moveTo(0, height / 2);\n      context.lineTo(width, height / 2);\n      context.moveTo(width / 2, 0);\n      context.lineTo(width / 2, height);\n      context.stroke();\n\n      //cuadricula\n      context.strokeStyle = \"#dcdcdc\"; // Establece el color de la cuadrícula\n      const scale = width / 20; // factor de escala basado en el ancho\n      for (let i = -10; i <= 10; i++) {\n        // Dibuja las líneas horizontales\n        context.beginPath();\n        context.moveTo(i * scale + width / 2, 0);\n        context.lineTo(i * scale + width / 2, height);\n        context.stroke();\n\n        // Dibuja las líneas verticales\n        context.beginPath();\n        context.moveTo(0, -i * scale + height / 2);\n        context.lineTo(width, -i * scale + height / 2);\n        context.stroke();\n      }\n\n      // Escala los puntos de los triángulos\n      const scaledEnunciado = enunciado.map(triangle => triangle.map(point => [point[0] * scale, point[1] * scale]));\n\n      // Colores para cada triángulo\n      const colors = [\"red\", \"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"brown\"];\n\n      // Dibuja cada triángulo y sus etiquetas\n      for (let i = 0; i < scaledEnunciado.length; i++) {\n        const triangle = scaledEnunciado[i];\n\n        // Establece el color del triángulo\n        context.fillStyle = colors[i];\n        context.beginPath();\n        context.moveTo(triangle[0][0] + width / 2, height / 2 - triangle[0][1]);\n        context.lineTo(triangle[1][0] + width / 2, height / 2 - triangle[1][1]);\n        context.lineTo(triangle[2][0] + width / 2, height / 2 - triangle[2][1]);\n        context.closePath();\n\n        // Aplica la transparencia solo a los triángulos\n        context.globalAlpha = 0.5;\n        context.fill();\n        // Restaura el valor predeterminado de globalAlpha\n        context.globalAlpha = 1;\n        context.stroke();\n\n        // Añade etiquetas a los vértices\n        for (let j = 0; j < 3; j++) {\n          const point = triangle[j];\n          context.fillText(`(${point[0] / scale}, ${point[1] / scale})`, point[0] + width / 2 + 5, height / 2 - point[1] - 5);\n        }\n      }\n      for (let i = -10; i <= 10; i++) {\n        context.fillStyle = \"#000000\"; // Establece el color en negro\n        context.fillText(i.toString(), i * scale + width / 2, height / 2 + 10);\n        context.fillText(i.toString(), width / 2 - 10, -i * scale + height / 2);\n      }\n    };\n\n    // Llama a resizeCanvas cuando la ventana cambie de tamaño\n    window.addEventListener(\"resize\", resizeCanvas);\n\n    // Llama a resizeCanvas inicialmente\n    resizeCanvas();\n\n    // Limpia el listener del evento resize cuando el componente se desmonte\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n    };\n  }, [enunciado]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(TriangleExercise, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = TriangleExercise;\nexport default TriangleExercise;\nvar _c;\n$RefreshReg$(_c, \"TriangleExercise\");","map":{"version":3,"names":["React","useEffect","useRef","TriangleExercise","enunciado","canvasRef","canvas","current","context","getContext","resizeCanvas","width","height","getBoundingClientRect","beginPath","moveTo","lineTo","stroke","strokeStyle","scale","i","scaledEnunciado","map","triangle","point","colors","length","fillStyle","closePath","globalAlpha","fill","j","fillText","toString","window","addEventListener","removeEventListener"],"sources":["C:/Users/jaime/TFGProto/newfront/src/components/Exercises/TriangleExercise.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nconst TriangleExercise = ({ enunciado }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    const resizeCanvas = () => {\r\n      // Obtén el tamaño de la ventana\r\n      const { width, height } = canvas.getBoundingClientRect();\r\n\r\n      // Establece el tamaño del canvas\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n\r\n      // Dibuja el eje de coordenadas\r\n      context.beginPath();\r\n      context.moveTo(0, height / 2);\r\n      context.lineTo(width, height / 2);\r\n      context.moveTo(width / 2, 0);\r\n      context.lineTo(width / 2, height);\r\n      context.stroke();\r\n\r\n      //cuadricula\r\n      context.strokeStyle = \"#dcdcdc\"; // Establece el color de la cuadrícula\r\n      const scale = width / 20; // factor de escala basado en el ancho\r\n      for (let i = -10; i <= 10; i++) {\r\n        // Dibuja las líneas horizontales\r\n        context.beginPath();\r\n        context.moveTo(i * scale + width / 2, 0);\r\n        context.lineTo(i * scale + width / 2, height);\r\n        context.stroke();\r\n\r\n        // Dibuja las líneas verticales\r\n        context.beginPath();\r\n        context.moveTo(0, -i * scale + height / 2);\r\n        context.lineTo(width, -i * scale + height / 2);\r\n        context.stroke();\r\n      }\r\n\r\n      // Escala los puntos de los triángulos\r\n      const scaledEnunciado = enunciado.map((triangle) =>\r\n        triangle.map((point) => [point[0] * scale, point[1] * scale])\r\n      );\r\n\r\n      // Colores para cada triángulo\r\n      const colors = [\"red\", \"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"brown\"];\r\n\r\n      // Dibuja cada triángulo y sus etiquetas\r\n      for (let i = 0; i < scaledEnunciado.length; i++) {\r\n        const triangle = scaledEnunciado[i];\r\n\r\n        // Establece el color del triángulo\r\n        context.fillStyle = colors[i];\r\n\r\n        context.beginPath();\r\n        context.moveTo(\r\n          triangle[0][0] + width / 2,\r\n          height / 2 - triangle[0][1]\r\n        );\r\n        context.lineTo(\r\n          triangle[1][0] + width / 2,\r\n          height / 2 - triangle[1][1]\r\n        );\r\n        context.lineTo(\r\n          triangle[2][0] + width / 2,\r\n          height / 2 - triangle[2][1]\r\n        );\r\n        context.closePath();\r\n\r\n        // Aplica la transparencia solo a los triángulos\r\n        context.globalAlpha = 0.5;\r\n        context.fill();\r\n        // Restaura el valor predeterminado de globalAlpha\r\n        context.globalAlpha = 1;\r\n\r\n        context.stroke();\r\n\r\n        // Añade etiquetas a los vértices\r\n        for (let j = 0; j < 3; j++) {\r\n          const point = triangle[j];\r\n          context.fillText(\r\n            `(${point[0] / scale}, ${point[1] / scale})`,\r\n            point[0] + width / 2 + 5,\r\n            height / 2 - point[1] - 5\r\n          );\r\n        }\r\n      }\r\n\r\n      for (let i = -10; i <= 10; i++) {\r\n        context.fillStyle = \"#000000\"; // Establece el color en negro\r\n        context.fillText(i.toString(), i * scale + width / 2, height / 2 + 10);\r\n        context.fillText(i.toString(), width / 2 - 10, -i * scale + height / 2);\r\n      }\r\n    };\r\n\r\n    // Llama a resizeCanvas cuando la ventana cambie de tamaño\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n\r\n    // Llama a resizeCanvas inicialmente\r\n    resizeCanvas();\r\n\r\n    // Limpia el listener del evento resize cuando el componente se desmonte\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n    };\r\n  }, [enunciado]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TriangleExercise;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAEjD,MAAMC,gBAAgB,GAAG,QAAmB;EAAA;EAAA,IAAlB;IAAEC;EAAU,CAAC;EACrC,MAAMC,SAAS,GAAGH,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMK,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEvC,MAAMC,YAAY,GAAG,MAAM;MACzB;MACA,MAAM;QAAEC,KAAK;QAAEC;MAAO,CAAC,GAAGN,MAAM,CAACO,qBAAqB,EAAE;;MAExD;MACAP,MAAM,CAACK,KAAK,GAAGA,KAAK;MACpBL,MAAM,CAACM,MAAM,GAAGA,MAAM;;MAEtB;MACAJ,OAAO,CAACM,SAAS,EAAE;MACnBN,OAAO,CAACO,MAAM,CAAC,CAAC,EAAEH,MAAM,GAAG,CAAC,CAAC;MAC7BJ,OAAO,CAACQ,MAAM,CAACL,KAAK,EAAEC,MAAM,GAAG,CAAC,CAAC;MACjCJ,OAAO,CAACO,MAAM,CAACJ,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;MAC5BH,OAAO,CAACQ,MAAM,CAACL,KAAK,GAAG,CAAC,EAAEC,MAAM,CAAC;MACjCJ,OAAO,CAACS,MAAM,EAAE;;MAEhB;MACAT,OAAO,CAACU,WAAW,GAAG,SAAS,CAAC,CAAC;MACjC,MAAMC,KAAK,GAAGR,KAAK,GAAG,EAAE,CAAC,CAAC;MAC1B,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC9B;QACAZ,OAAO,CAACM,SAAS,EAAE;QACnBN,OAAO,CAACO,MAAM,CAACK,CAAC,GAAGD,KAAK,GAAGR,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;QACxCH,OAAO,CAACQ,MAAM,CAACI,CAAC,GAAGD,KAAK,GAAGR,KAAK,GAAG,CAAC,EAAEC,MAAM,CAAC;QAC7CJ,OAAO,CAACS,MAAM,EAAE;;QAEhB;QACAT,OAAO,CAACM,SAAS,EAAE;QACnBN,OAAO,CAACO,MAAM,CAAC,CAAC,EAAE,CAACK,CAAC,GAAGD,KAAK,GAAGP,MAAM,GAAG,CAAC,CAAC;QAC1CJ,OAAO,CAACQ,MAAM,CAACL,KAAK,EAAE,CAACS,CAAC,GAAGD,KAAK,GAAGP,MAAM,GAAG,CAAC,CAAC;QAC9CJ,OAAO,CAACS,MAAM,EAAE;MAClB;;MAEA;MACA,MAAMI,eAAe,GAAGjB,SAAS,CAACkB,GAAG,CAAEC,QAAQ,IAC7CA,QAAQ,CAACD,GAAG,CAAEE,KAAK,IAAK,CAACA,KAAK,CAAC,CAAC,CAAC,GAAGL,KAAK,EAAEK,KAAK,CAAC,CAAC,CAAC,GAAGL,KAAK,CAAC,CAAC,CAC9D;;MAED;MACA,MAAMM,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;;MAE5E;MACA,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,eAAe,CAACK,MAAM,EAAEN,CAAC,EAAE,EAAE;QAC/C,MAAMG,QAAQ,GAAGF,eAAe,CAACD,CAAC,CAAC;;QAEnC;QACAZ,OAAO,CAACmB,SAAS,GAAGF,MAAM,CAACL,CAAC,CAAC;QAE7BZ,OAAO,CAACM,SAAS,EAAE;QACnBN,OAAO,CAACO,MAAM,CACZQ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGZ,KAAK,GAAG,CAAC,EAC1BC,MAAM,GAAG,CAAC,GAAGW,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5B;QACDf,OAAO,CAACQ,MAAM,CACZO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGZ,KAAK,GAAG,CAAC,EAC1BC,MAAM,GAAG,CAAC,GAAGW,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5B;QACDf,OAAO,CAACQ,MAAM,CACZO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGZ,KAAK,GAAG,CAAC,EAC1BC,MAAM,GAAG,CAAC,GAAGW,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5B;QACDf,OAAO,CAACoB,SAAS,EAAE;;QAEnB;QACApB,OAAO,CAACqB,WAAW,GAAG,GAAG;QACzBrB,OAAO,CAACsB,IAAI,EAAE;QACd;QACAtB,OAAO,CAACqB,WAAW,GAAG,CAAC;QAEvBrB,OAAO,CAACS,MAAM,EAAE;;QAEhB;QACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,MAAMP,KAAK,GAAGD,QAAQ,CAACQ,CAAC,CAAC;UACzBvB,OAAO,CAACwB,QAAQ,CACb,IAAGR,KAAK,CAAC,CAAC,CAAC,GAAGL,KAAM,KAAIK,KAAK,CAAC,CAAC,CAAC,GAAGL,KAAM,GAAE,EAC5CK,KAAK,CAAC,CAAC,CAAC,GAAGb,KAAK,GAAG,CAAC,GAAG,CAAC,EACxBC,MAAM,GAAG,CAAC,GAAGY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAC1B;QACH;MACF;MAEA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC9BZ,OAAO,CAACmB,SAAS,GAAG,SAAS,CAAC,CAAC;QAC/BnB,OAAO,CAACwB,QAAQ,CAACZ,CAAC,CAACa,QAAQ,EAAE,EAAEb,CAAC,GAAGD,KAAK,GAAGR,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;QACtEJ,OAAO,CAACwB,QAAQ,CAACZ,CAAC,CAACa,QAAQ,EAAE,EAAEtB,KAAK,GAAG,CAAC,GAAG,EAAE,EAAE,CAACS,CAAC,GAAGD,KAAK,GAAGP,MAAM,GAAG,CAAC,CAAC;MACzE;IACF,CAAC;;IAED;IACAsB,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEzB,YAAY,CAAC;;IAE/C;IACAA,YAAY,EAAE;;IAEd;IACA,OAAO,MAAM;MACXwB,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAE1B,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC;EAEf,oBACE;IAAA,uBACE;MAAQ,GAAG,EAAEC;IAAU;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACtB;AAEV,CAAC;AAAC,GAjHIF,gBAAgB;AAAA,KAAhBA,gBAAgB;AAmHtB,eAAeA,gBAAgB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}