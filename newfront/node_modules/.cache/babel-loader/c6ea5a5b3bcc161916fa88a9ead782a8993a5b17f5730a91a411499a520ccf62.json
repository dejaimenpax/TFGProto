{"ast":null,"code":"var encrypt=function encrypt(str,key){var result=\"\";try{for(var i=0;i<str.length;i++){var encryptedChar=String.fromCharCode(str.charCodeAt(i)^key.charCodeAt(i%key.length));result+=encryptedChar;}return window.btoa(result);// Codificar en Base64 después de la operación XOR\n}catch(error){return\"\";// Devuelve un string vacío si la desencriptación falla debido a un error\n}};var decrypt=function decrypt(str,key){var result=\"\";try{var base64Decoded=window.atob(str);// Decodificar desde Base64\nfor(var i=0;i<base64Decoded.length;i++){result+=String.fromCharCode(base64Decoded.charCodeAt(i)^key.charCodeAt(i%key.length));}return result;}catch(error){return\"\";// Devuelve un string vacío si la desencriptación falla debido a un error\n}};module.exports={encrypt:encrypt,decrypt:decrypt};","map":{"version":3,"names":["encrypt","str","key","result","i","length","encryptedChar","String","fromCharCode","charCodeAt","window","btoa","error","decrypt","base64Decoded","atob","module","exports"],"sources":["C:/Users/jaime/TFGProto/newfront/src/common/Encryption.js"],"sourcesContent":["const encrypt = (str, key) => {\r\n    let result = \"\";\r\n    try {\r\n        for (let i = 0; i < str.length; i++) {\r\n            const encryptedChar = String.fromCharCode(str.charCodeAt(i) ^ key.charCodeAt(i % key.length));\r\n            result += encryptedChar;\r\n        }\r\n        return window.btoa(result); // Codificar en Base64 después de la operación XOR\r\n    } catch (error) {\r\n        return \"\"; // Devuelve un string vacío si la desencriptación falla debido a un error\r\n    }\r\n};\r\n  \r\nconst decrypt = (str, key) => {\r\n    let result = \"\";\r\n    try {\r\n        const base64Decoded = window.atob(str); // Decodificar desde Base64\r\n        for (let i = 0; i < base64Decoded.length; i++) {\r\n            result += String.fromCharCode(base64Decoded.charCodeAt(i) ^ key.charCodeAt(i % key.length));\r\n        }\r\n        return result;\r\n    } catch (error) {\r\n        return \"\"; // Devuelve un string vacío si la desencriptación falla debido a un error\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    encrypt,\r\n    decrypt,\r\n};"],"mappings":"AAAA,GAAMA,QAAO,CAAG,QAAVA,QAAO,CAAIC,GAAG,CAAEC,GAAG,CAAK,CAC1B,GAAIC,OAAM,CAAG,EAAE,CACf,GAAI,CACA,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,GAAG,CAACI,MAAM,CAAED,CAAC,EAAE,CAAE,CACjC,GAAME,cAAa,CAAGC,MAAM,CAACC,YAAY,CAACP,GAAG,CAACQ,UAAU,CAACL,CAAC,CAAC,CAAGF,GAAG,CAACO,UAAU,CAACL,CAAC,CAAGF,GAAG,CAACG,MAAM,CAAC,CAAC,CAC7FF,MAAM,EAAIG,aAAa,CAC3B,CACA,MAAOI,OAAM,CAACC,IAAI,CAACR,MAAM,CAAC,CAAE;AAChC,CAAE,MAAOS,KAAK,CAAE,CACZ,MAAO,EAAE,CAAE;AACf,CACJ,CAAC,CAED,GAAMC,QAAO,CAAG,QAAVA,QAAO,CAAIZ,GAAG,CAAEC,GAAG,CAAK,CAC1B,GAAIC,OAAM,CAAG,EAAE,CACf,GAAI,CACA,GAAMW,cAAa,CAAGJ,MAAM,CAACK,IAAI,CAACd,GAAG,CAAC,CAAE;AACxC,IAAK,GAAIG,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGU,aAAa,CAACT,MAAM,CAAED,CAAC,EAAE,CAAE,CAC3CD,MAAM,EAAII,MAAM,CAACC,YAAY,CAACM,aAAa,CAACL,UAAU,CAACL,CAAC,CAAC,CAAGF,GAAG,CAACO,UAAU,CAACL,CAAC,CAAGF,GAAG,CAACG,MAAM,CAAC,CAAC,CAC/F,CACA,MAAOF,OAAM,CACjB,CAAE,MAAOS,KAAK,CAAE,CACZ,MAAO,EAAE,CAAE;AACf,CACJ,CAAC,CAEDI,MAAM,CAACC,OAAO,CAAG,CACbjB,OAAO,CAAPA,OAAO,CACPa,OAAO,CAAPA,OACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}