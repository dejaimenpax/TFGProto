{"ast":null,"code":"import _objectSpread from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _assertThisInitialized from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jaime/TFGProto/newfront/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\r\n * Chart.js v4.3.0\r\n * https://www.chartjs.org\r\n * (c) 2023 Chart.js Contributors\r\n * Released under the MIT License\r\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as _color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as _getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nvar Animator = /*#__PURE__*/function () {\n  function Animator() {\n    _classCallCheck(this, Animator);\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _createClass(Animator, [{\n    key: \"_notify\",\n    value: function _notify(chart, anims, date, type) {\n      var callbacks = anims.listeners[type];\n      var numSteps = anims.duration;\n      callbacks.forEach(function (fn) {\n        return fn({\n          chart: chart,\n          initial: anims.initial,\n          numSteps: numSteps,\n          currentStep: Math.min(date - anims.start, numSteps)\n        });\n      });\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      var _this = this;\n      if (this._request) {\n        return;\n      }\n      this._running = true;\n      this._request = requestAnimFrame.call(window, function () {\n        _this._update();\n        _this._request = null;\n        if (_this._running) {\n          _this._refresh();\n        }\n      });\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var _this2 = this;\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      var remaining = 0;\n      this._charts.forEach(function (anims, chart) {\n        if (!anims.running || !anims.items.length) {\n          return;\n        }\n        var items = anims.items;\n        var i = items.length - 1;\n        var draw = false;\n        var item;\n        for (; i >= 0; --i) {\n          item = items[i];\n          if (item._active) {\n            if (item._total > anims.duration) {\n              anims.duration = item._total;\n            }\n            item.tick(date);\n            draw = true;\n          } else {\n            items[i] = items[items.length - 1];\n            items.pop();\n          }\n        }\n        if (draw) {\n          chart.draw();\n          _this2._notify(chart, anims, date, 'progress');\n        }\n        if (!items.length) {\n          anims.running = false;\n          _this2._notify(chart, anims, date, 'complete');\n          anims.initial = false;\n        }\n        remaining += items.length;\n      });\n      this._lastDate = date;\n      if (remaining === 0) {\n        this._running = false;\n      }\n    }\n  }, {\n    key: \"_getAnims\",\n    value: function _getAnims(chart) {\n      var charts = this._charts;\n      var anims = charts.get(chart);\n      if (!anims) {\n        anims = {\n          running: false,\n          initial: true,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        };\n        charts.set(chart, anims);\n      }\n      return anims;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(chart, event, cb) {\n      this._getAnims(chart).listeners[event].push(cb);\n    }\n  }, {\n    key: \"add\",\n    value: function add(chart, items) {\n      var _this$_getAnims$items;\n      if (!items || !items.length) {\n        return;\n      }\n      (_this$_getAnims$items = this._getAnims(chart).items).push.apply(_this$_getAnims$items, _toConsumableArray(items));\n    }\n  }, {\n    key: \"has\",\n    value: function has(chart) {\n      return this._getAnims(chart).items.length > 0;\n    }\n  }, {\n    key: \"start\",\n    value: function start(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims) {\n        return;\n      }\n      anims.running = true;\n      anims.start = Date.now();\n      anims.duration = anims.items.reduce(function (acc, cur) {\n        return Math.max(acc, cur._duration);\n      }, 0);\n      this._refresh();\n    }\n  }, {\n    key: \"running\",\n    value: function running(chart) {\n      if (!this._running) {\n        return false;\n      }\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.running || !anims.items.length) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.items.length) {\n        return;\n      }\n      var items = anims.items;\n      var i = items.length - 1;\n      for (; i >= 0; --i) {\n        items[i].cancel();\n      }\n      anims.items = [];\n      this._notify(chart, anims, Date.now(), 'complete');\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(chart) {\n      return this._charts.delete(chart);\n    }\n  }]);\n  return Animator;\n}();\nvar animator = /* #__PURE__ */new Animator();\nvar transparent = 'transparent';\nvar interpolators = {\n  boolean: function boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color: function color(from, to, factor) {\n    var c0 = _color(from || transparent);\n    var c1 = c0.valid && _color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number: function number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nvar Animation = /*#__PURE__*/function () {\n  function Animation(cfg, target, prop, to) {\n    _classCallCheck(this, Animation);\n    var currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    var from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  _createClass(Animation, [{\n    key: \"active\",\n    value: function active() {\n      return this._active;\n    }\n  }, {\n    key: \"update\",\n    value: function update(cfg, to, date) {\n      if (this._active) {\n        this._notify(false);\n        var currentValue = this._target[this._prop];\n        var elapsed = date - this._start;\n        var remain = this._duration - elapsed;\n        this._start = date;\n        this._duration = Math.floor(Math.max(remain, cfg.duration));\n        this._total += elapsed;\n        this._loop = !!cfg.loop;\n        this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n        this._from = resolve([cfg.from, currentValue, to]);\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this._active) {\n        this.tick(Date.now());\n        this._active = false;\n        this._notify(false);\n      }\n    }\n  }, {\n    key: \"tick\",\n    value: function tick(date) {\n      var elapsed = date - this._start;\n      var duration = this._duration;\n      var prop = this._prop;\n      var from = this._from;\n      var loop = this._loop;\n      var to = this._to;\n      var factor;\n      this._active = from !== to && (loop || elapsed < duration);\n      if (!this._active) {\n        this._target[prop] = to;\n        this._notify(true);\n        return;\n      }\n      if (elapsed < 0) {\n        this._target[prop] = from;\n        return;\n      }\n      factor = elapsed / duration % 2;\n      factor = loop && factor > 1 ? 2 - factor : factor;\n      factor = this._easing(Math.min(1, Math.max(0, factor)));\n      this._target[prop] = this._fn(from, to, factor);\n    }\n  }, {\n    key: \"wait\",\n    value: function wait() {\n      var promises = this._promises || (this._promises = []);\n      return new Promise(function (res, rej) {\n        promises.push({\n          res: res,\n          rej: rej\n        });\n      });\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(resolved) {\n      var method = resolved ? 'res' : 'rej';\n      var promises = this._promises || [];\n      for (var i = 0; i < promises.length; i++) {\n        promises[i][method]();\n      }\n    }\n  }]);\n  return Animation;\n}();\nvar Animations = /*#__PURE__*/function () {\n  function Animations(chart, config) {\n    _classCallCheck(this, Animations);\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  _createClass(Animations, [{\n    key: \"configure\",\n    value: function configure(config) {\n      if (!isObject(config)) {\n        return;\n      }\n      var animationOptions = Object.keys(defaults.animation);\n      var animatedProps = this._properties;\n      Object.getOwnPropertyNames(config).forEach(function (key) {\n        var cfg = config[key];\n        if (!isObject(cfg)) {\n          return;\n        }\n        var resolved = {};\n        for (var _i = 0, _animationOptions = animationOptions; _i < _animationOptions.length; _i++) {\n          var option = _animationOptions[_i];\n          resolved[option] = cfg[option];\n        }\n        (isArray(cfg.properties) && cfg.properties || [key]).forEach(function (prop) {\n          if (prop === key || !animatedProps.has(prop)) {\n            animatedProps.set(prop, resolved);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_animateOptions\",\n    value: function _animateOptions(target, values) {\n      var newOptions = values.options;\n      var options = resolveTargetOptions(target, newOptions);\n      if (!options) {\n        return [];\n      }\n      var animations = this._createAnimations(options, newOptions);\n      if (newOptions.$shared) {\n        awaitAll(target.options.$animations, newOptions).then(function () {\n          target.options = newOptions;\n        }, function () {});\n      }\n      return animations;\n    }\n  }, {\n    key: \"_createAnimations\",\n    value: function _createAnimations(target, values) {\n      var animatedProps = this._properties;\n      var animations = [];\n      var running = target.$animations || (target.$animations = {});\n      var props = Object.keys(values);\n      var date = Date.now();\n      var i;\n      for (i = props.length - 1; i >= 0; --i) {\n        var prop = props[i];\n        if (prop.charAt(0) === '$') {\n          continue;\n        }\n        if (prop === 'options') {\n          animations.push.apply(animations, _toConsumableArray(this._animateOptions(target, values)));\n          continue;\n        }\n        var value = values[prop];\n        var animation = running[prop];\n        var cfg = animatedProps.get(prop);\n        if (animation) {\n          if (cfg && animation.active()) {\n            animation.update(cfg, value, date);\n            continue;\n          } else {\n            animation.cancel();\n          }\n        }\n        if (!cfg || !cfg.duration) {\n          target[prop] = value;\n          continue;\n        }\n        running[prop] = animation = new Animation(cfg, target, prop, value);\n        animations.push(animation);\n      }\n      return animations;\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, values) {\n      if (this._properties.size === 0) {\n        Object.assign(target, values);\n        return;\n      }\n      var animations = this._createAnimations(target, values);\n      if (animations.length) {\n        animator.add(this._chart, animations);\n        return true;\n      }\n    }\n  }]);\n  return Animations;\n}();\nfunction awaitAll(animations, properties) {\n  var running = [];\n  var keys = Object.keys(properties);\n  for (var i = 0; i < keys.length; i++) {\n    var anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  var options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  var opts = scale && scale.options || {};\n  var reverse = opts.reverse;\n  var min = opts.min === undefined ? allowedOverflow : 0;\n  var max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  var x = scaleClip(xScale, allowedOverflow);\n  var y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  var t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  var keys = [];\n  var metasets = chart._getSortedDatasetMetas(filterVisible);\n  var i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction _applyStack(stack, value, dsIndex) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var keys = stack.keys;\n  var singleMode = options.mode === 'single';\n  var i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  var keys = Object.keys(data);\n  var adata = new Array(keys.length);\n  var i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  var stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return \"\".concat(indexScale.id, \".\").concat(valueScale.id, \".\").concat(meta.stack || meta.type);\n}\nfunction getUserBounds(scale) {\n  var _scale$getUserBounds = scale.getUserBounds(),\n    min = _scale$getUserBounds.min,\n    max = _scale$getUserBounds.max,\n    minDefined = _scale$getUserBounds.minDefined,\n    maxDefined = _scale$getUserBounds.maxDefined;\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  var subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  var _iterator = _createForOfIteratorHelper(vScale.getMatchingVisibleMetas(type).reverse()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var meta = _step.value;\n      var value = stack[meta.index];\n      if (positive && value > 0 || !positive && value < 0) {\n        return meta.index;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  var chart = controller.chart,\n    meta = controller._cachedMeta;\n  var stacks = chart._stacks || (chart._stacks = {});\n  var iScale = meta.iScale,\n    vScale = meta.vScale,\n    datasetIndex = meta.index;\n  var iAxis = iScale.axis;\n  var vAxis = vScale.axis;\n  var key = getStackKey(iScale, vScale, meta);\n  var ilen = parsed.length;\n  var stack;\n  for (var i = 0; i < ilen; ++i) {\n    var item = parsed[i];\n    var _index = item[iAxis],\n      value = item[vAxis];\n    var itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, _index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    var visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  var scales = chart.scales;\n  return Object.keys(scales).filter(function (key) {\n    return scales[key].axis === axis;\n  }).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index: index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element: element,\n    index: index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  var datasetIndex = meta.controller.index;\n  var axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  var _iterator2 = _createForOfIteratorHelper(items),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var parsed = _step2.value;\n      var stacks = parsed._stacks;\n      if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n        return;\n      }\n      delete stacks[axis][datasetIndex];\n      if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n        delete stacks[axis]._visualValues[datasetIndex];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nvar isDirectUpdateMode = function isDirectUpdateMode(mode) {\n  return mode === 'reset' || mode === 'none';\n};\nvar cloneIfNotShared = function cloneIfNotShared(cached, shared) {\n  return shared ? cached : Object.assign({}, cached);\n};\nvar createStack = function createStack(canStack, meta, chart) {\n  return canStack && !meta.hidden && meta._stacked && {\n    keys: getSortedDatasetIndices(chart, true),\n    values: null\n  };\n};\nvar DatasetController = /*#__PURE__*/function () {\n  function DatasetController(chart, datasetIndex) {\n    _classCallCheck(this, DatasetController);\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = (this instanceof DatasetController ? this.constructor : void 0).datasetElementType;\n    this.dataElementType = (this instanceof DatasetController ? this.constructor : void 0).dataElementType;\n    this.initialize();\n  }\n  _createClass(DatasetController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var meta = this._cachedMeta;\n      this.configure();\n      this.linkScales();\n      meta._stacked = isStacked(meta.vScale, meta);\n      this.addElements();\n      if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n        console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n      }\n    }\n  }, {\n    key: \"updateIndex\",\n    value: function updateIndex(datasetIndex) {\n      if (this.index !== datasetIndex) {\n        clearStacks(this._cachedMeta);\n      }\n      this.index = datasetIndex;\n    }\n  }, {\n    key: \"linkScales\",\n    value: function linkScales() {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var chooseId = function chooseId(axis, x, y, r) {\n        return axis === 'x' ? x : axis === 'r' ? r : y;\n      };\n      var xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n      var yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n      var rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n      var indexAxis = meta.indexAxis;\n      var iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n      var vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n      meta.xScale = this.getScaleForId(xid);\n      meta.yScale = this.getScaleForId(yid);\n      meta.rScale = this.getScaleForId(rid);\n      meta.iScale = this.getScaleForId(iid);\n      meta.vScale = this.getScaleForId(vid);\n    }\n  }, {\n    key: \"getDataset\",\n    value: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    }\n  }, {\n    key: \"getScaleForId\",\n    value: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    }\n  }, {\n    key: \"_getOtherScale\",\n    value: function _getOtherScale(scale) {\n      var meta = this._cachedMeta;\n      return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update('reset');\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var meta = this._cachedMeta;\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n      if (meta._stacked) {\n        clearStacks(meta);\n      }\n    }\n  }, {\n    key: \"_dataCheck\",\n    value: function _dataCheck() {\n      var dataset = this.getDataset();\n      var data = dataset.data || (dataset.data = []);\n      var _data = this._data;\n      if (isObject(data)) {\n        this._data = convertObjectDataToArray(data);\n      } else if (_data !== data) {\n        if (_data) {\n          unlistenArrayEvents(_data, this);\n          var meta = this._cachedMeta;\n          clearStacks(meta);\n          meta._parsed = [];\n        }\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, this);\n        }\n        this._syncList = [];\n        this._data = data;\n      }\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var meta = this._cachedMeta;\n      this._dataCheck();\n      if (this.datasetElementType) {\n        meta.dataset = new this.datasetElementType();\n      }\n    }\n  }, {\n    key: \"buildOrUpdateElements\",\n    value: function buildOrUpdateElements(resetNewElements) {\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var stackChanged = false;\n      this._dataCheck();\n      var oldStacked = meta._stacked;\n      meta._stacked = isStacked(meta.vScale, meta);\n      if (meta.stack !== dataset.stack) {\n        stackChanged = true;\n        clearStacks(meta);\n        meta.stack = dataset.stack;\n      }\n      this._resyncElements(resetNewElements);\n      if (stackChanged || oldStacked !== meta._stacked) {\n        updateStacks(this, meta._parsed);\n      }\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var config = this.chart.config;\n      var scopeKeys = config.datasetScopeKeys(this._type);\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n      this.options = config.createResolver(scopes, this.getContext());\n      this._parsing = this.options.parsing;\n      this._cachedDataOpts = {};\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var meta = this._cachedMeta,\n        data = this._data;\n      var iScale = meta.iScale,\n        _stacked = meta._stacked;\n      var iAxis = iScale.axis;\n      var sorted = start === 0 && count === data.length ? true : meta._sorted;\n      var prev = start > 0 && meta._parsed[start - 1];\n      var i, cur, parsed;\n      if (this._parsing === false) {\n        meta._parsed = data;\n        meta._sorted = true;\n        parsed = data;\n      } else {\n        if (isArray(data[start])) {\n          parsed = this.parseArrayData(meta, data, start, count);\n        } else if (isObject(data[start])) {\n          parsed = this.parseObjectData(meta, data, start, count);\n        } else {\n          parsed = this.parsePrimitiveData(meta, data, start, count);\n        }\n        var isNotInOrderComparedToPrev = function isNotInOrderComparedToPrev() {\n          return cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n        };\n        for (i = 0; i < count; ++i) {\n          meta._parsed[i + start] = cur = parsed[i];\n          if (sorted) {\n            if (isNotInOrderComparedToPrev()) {\n              sorted = false;\n            }\n            prev = cur;\n          }\n        }\n        meta._sorted = sorted;\n      }\n      if (_stacked) {\n        updateStacks(this, parsed);\n      }\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var labels = iScale.getLabels();\n      var singleScale = iScale === vScale;\n      var parsed = new Array(count);\n      var i, ilen, index;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        var _parsed$i;\n        index = i + start;\n        parsed[i] = (_parsed$i = {}, _defineProperty(_parsed$i, iAxis, singleScale || iScale.parse(labels[index], index)), _defineProperty(_parsed$i, vAxis, vScale.parse(data[index], index)), _parsed$i);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(item[0], index),\n          y: yScale.parse(item[1], index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var _this$_parsing = this._parsing,\n        _this$_parsing$xAxisK = _this$_parsing.xAxisKey,\n        xAxisKey = _this$_parsing$xAxisK === void 0 ? 'x' : _this$_parsing$xAxisK,\n        _this$_parsing$yAxisK = _this$_parsing.yAxisKey,\n        yAxisKey = _this$_parsing$yAxisK === void 0 ? 'y' : _this$_parsing$yAxisK;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n          y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getParsed\",\n    value: function getParsed(index) {\n      return this._cachedMeta._parsed[index];\n    }\n  }, {\n    key: \"getDataElement\",\n    value: function getDataElement(index) {\n      return this._cachedMeta.data[index];\n    }\n  }, {\n    key: \"applyStack\",\n    value: function applyStack(scale, parsed, mode) {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var value = parsed[scale.axis];\n      var stack = {\n        keys: getSortedDatasetIndices(chart, true),\n        values: parsed._stacks[scale.axis]._visualValues\n      };\n      return _applyStack(stack, value, meta.index, {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      var parsedValue = parsed[scale.axis];\n      var value = parsedValue === null ? NaN : parsedValue;\n      var values = stack && parsed._stacks[scale.axis];\n      if (stack && values) {\n        stack.values = values;\n        value = _applyStack(stack, parsedValue, this._cachedMeta.index);\n      }\n      range.min = Math.min(range.min, value);\n      range.max = Math.max(range.max, value);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(scale, canStack) {\n      var meta = this._cachedMeta;\n      var _parsed = meta._parsed;\n      var sorted = meta._sorted && scale === meta.iScale;\n      var ilen = _parsed.length;\n      var otherScale = this._getOtherScale(scale);\n      var stack = createStack(canStack, meta, this.chart);\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      var _getUserBounds = getUserBounds(otherScale),\n        otherMin = _getUserBounds.min,\n        otherMax = _getUserBounds.max;\n      var i, parsed;\n      function _skip() {\n        parsed = _parsed[i];\n        var otherValue = parsed[otherScale.axis];\n        return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n      }\n      for (i = 0; i < ilen; ++i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        if (sorted) {\n          break;\n        }\n      }\n      if (sorted) {\n        for (i = ilen - 1; i >= 0; --i) {\n          if (_skip()) {\n            continue;\n          }\n          this.updateRangeFromParsed(range, scale, parsed, stack);\n          break;\n        }\n      }\n      return range;\n    }\n  }, {\n    key: \"getAllParsedValues\",\n    value: function getAllParsedValues(scale) {\n      var parsed = this._cachedMeta._parsed;\n      var values = [];\n      var i, ilen, value;\n      for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n        value = parsed[i][scale.axis];\n        if (isNumberFinite(value)) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return false;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n        value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n      };\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(mode) {\n      var meta = this._cachedMeta;\n      this.update(mode || 'default');\n      meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {}\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this._ctx;\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var elements = meta.data || [];\n      var area = chart.chartArea;\n      var active = [];\n      var start = this._drawStart || 0;\n      var count = this._drawCount || elements.length - start;\n      var drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n      var i;\n      if (meta.dataset) {\n        meta.dataset.draw(ctx, area, start, count);\n      }\n      for (i = start; i < start + count; ++i) {\n        var element = elements[i];\n        if (element.hidden) {\n          continue;\n        }\n        if (element.active && drawActiveElementsOnTop) {\n          active.push(element);\n        } else {\n          element.draw(ctx, area);\n        }\n      }\n      for (i = 0; i < active.length; ++i) {\n        active[i].draw(ctx, area);\n      }\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle(index, active) {\n      var mode = active ? 'active' : 'default';\n      return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index, active, mode) {\n      var dataset = this.getDataset();\n      var context;\n      if (index >= 0 && index < this._cachedMeta.data.length) {\n        var element = this._cachedMeta.data[index];\n        context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n        context.parsed = this.getParsed(index);\n        context.raw = dataset.data[index];\n        context.index = context.dataIndex = index;\n      } else {\n        context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n        context.dataset = dataset;\n        context.index = context.datasetIndex = this.index;\n      }\n      context.active = !!active;\n      context.mode = mode;\n      return context;\n    }\n  }, {\n    key: \"resolveDatasetElementOptions\",\n    value: function resolveDatasetElementOptions(mode) {\n      return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n  }, {\n    key: \"_resolveElementOptions\",\n    value: function _resolveElementOptions(elementType) {\n      var _this3 = this;\n      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n      var index = arguments.length > 2 ? arguments[2] : undefined;\n      var active = mode === 'active';\n      var cache = this._cachedDataOpts;\n      var cacheKey = elementType + '-' + mode;\n      var cached = cache[cacheKey];\n      var sharing = this.enableOptionSharing && defined(index);\n      if (cached) {\n        return cloneIfNotShared(cached, sharing);\n      }\n      var config = this.chart.config;\n      var scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n      var prefixes = active ? [\"\".concat(elementType, \"Hover\"), 'hover', elementType, ''] : [elementType, ''];\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      var names = Object.keys(defaults.elements[elementType]);\n      var context = function context() {\n        return _this3.getContext(index, active, mode);\n      };\n      var values = config.resolveNamedOptions(scopes, names, context, prefixes);\n      if (values.$shared) {\n        values.$shared = sharing;\n        cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n      }\n      return values;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations(index, transition, active) {\n      var chart = this.chart;\n      var cache = this._cachedDataOpts;\n      var cacheKey = \"animation-\".concat(transition);\n      var cached = cache[cacheKey];\n      if (cached) {\n        return cached;\n      }\n      var options;\n      if (chart.options.animation !== false) {\n        var config = this.chart.config;\n        var scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n        var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        options = config.createResolver(scopes, this.getContext(index, active, transition));\n      }\n      var animations = new Animations(chart, options && options.animations);\n      if (options && options._cacheable) {\n        cache[cacheKey] = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getSharedOptions\",\n    value: function getSharedOptions(options) {\n      if (!options.$shared) {\n        return;\n      }\n      return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n  }, {\n    key: \"includeOptions\",\n    value: function includeOptions(mode, sharedOptions) {\n      return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n  }, {\n    key: \"_getSharedOptions\",\n    value: function _getSharedOptions(start, mode) {\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var previouslySharedOptions = this._sharedOptions;\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n      return {\n        sharedOptions: sharedOptions,\n        includeOptions: includeOptions\n      };\n    }\n  }, {\n    key: \"updateElement\",\n    value: function updateElement(element, index, properties, mode) {\n      if (isDirectUpdateMode(mode)) {\n        Object.assign(element, properties);\n      } else {\n        this._resolveAnimations(index, mode).update(element, properties);\n      }\n    }\n  }, {\n    key: \"updateSharedOptions\",\n    value: function updateSharedOptions(sharedOptions, mode, newOptions) {\n      if (sharedOptions && !isDirectUpdateMode(mode)) {\n        this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n      }\n    }\n  }, {\n    key: \"_setStyle\",\n    value: function _setStyle(element, index, mode, active) {\n      element.active = active;\n      var options = this.getStyle(index, active);\n      this._resolveAnimations(index, mode, active).update(element, {\n        options: !active && this.getSharedOptions(options) || options\n      });\n    }\n  }, {\n    key: \"removeHoverStyle\",\n    value: function removeHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', false);\n    }\n  }, {\n    key: \"setHoverStyle\",\n    value: function setHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', true);\n    }\n  }, {\n    key: \"_removeDatasetHoverStyle\",\n    value: function _removeDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', false);\n      }\n    }\n  }, {\n    key: \"_setDatasetHoverStyle\",\n    value: function _setDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', true);\n      }\n    }\n  }, {\n    key: \"_resyncElements\",\n    value: function _resyncElements(resetNewElements) {\n      var data = this._data;\n      var elements = this._cachedMeta.data;\n      var _iterator3 = _createForOfIteratorHelper(this._syncList),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 3),\n            method = _step3$value[0],\n            arg1 = _step3$value[1],\n            arg2 = _step3$value[2];\n          this[method](arg1, arg2);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._syncList = [];\n      var numMeta = elements.length;\n      var numData = data.length;\n      var count = Math.min(numData, numMeta);\n      if (count) {\n        this.parse(0, count);\n      }\n      if (numData > numMeta) {\n        this._insertElements(numMeta, numData - numMeta, resetNewElements);\n      } else if (numData < numMeta) {\n        this._removeElements(numData, numMeta - numData);\n      }\n    }\n  }, {\n    key: \"_insertElements\",\n    value: function _insertElements(start, count) {\n      var resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var meta = this._cachedMeta;\n      var data = meta.data;\n      var end = start + count;\n      var i;\n      var move = function move(arr) {\n        arr.length += count;\n        for (i = arr.length - 1; i >= end; i--) {\n          arr[i] = arr[i - count];\n        }\n      };\n      move(data);\n      for (i = start; i < end; ++i) {\n        data[i] = new this.dataElementType();\n      }\n      if (this._parsing) {\n        move(meta._parsed);\n      }\n      this.parse(start, count);\n      if (resetNewElements) {\n        this.updateElements(data, start, count, 'reset');\n      }\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(element, start, count, mode) {}\n  }, {\n    key: \"_removeElements\",\n    value: function _removeElements(start, count) {\n      var meta = this._cachedMeta;\n      if (this._parsing) {\n        var removed = meta._parsed.splice(start, count);\n        if (meta._stacked) {\n          clearStacks(meta, removed);\n        }\n      }\n      meta.data.splice(start, count);\n    }\n  }, {\n    key: \"_sync\",\n    value: function _sync(args) {\n      if (this._parsing) {\n        this._syncList.push(args);\n      } else {\n        var _args2 = _slicedToArray(args, 3),\n          method = _args2[0],\n          arg1 = _args2[1],\n          arg2 = _args2[2];\n        this[method](arg1, arg2);\n      }\n      this.chart._dataChanges.push([this.index].concat(_toConsumableArray(args)));\n    }\n  }, {\n    key: \"_onDataPush\",\n    value: function _onDataPush() {\n      var count = arguments.length;\n      this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n    }\n  }, {\n    key: \"_onDataPop\",\n    value: function _onDataPop() {\n      this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n    }\n  }, {\n    key: \"_onDataShift\",\n    value: function _onDataShift() {\n      this._sync(['_removeElements', 0, 1]);\n    }\n  }, {\n    key: \"_onDataSplice\",\n    value: function _onDataSplice(start, count) {\n      if (count) {\n        this._sync(['_removeElements', start, count]);\n      }\n      var newCount = arguments.length - 2;\n      if (newCount) {\n        this._sync(['_insertElements', start, newCount]);\n      }\n    }\n  }, {\n    key: \"_onDataUnshift\",\n    value: function _onDataUnshift() {\n      this._sync(['_insertElements', 0, arguments.length]);\n    }\n  }]);\n  return DatasetController;\n}();\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    var visibleMetas = scale.getMatchingVisibleMetas(type);\n    var values = [];\n    for (var i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort(function (a, b) {\n      return a - b;\n    }));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  var scale = meta.iScale;\n  var values = getAllScaleValues(scale, meta.type);\n  var min = scale._length;\n  var i, ilen, curr, prev;\n  var updateMinAndPrev = function updateMinAndPrev() {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  var thickness = options.barThickness;\n  var size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio: ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  var pixels = ruler.pixels;\n  var curr = pixels[index];\n  var prev = index > 0 ? pixels[index - 1] : null;\n  var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  var percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  var start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  var size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start: start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  var startValue = vScale.parse(entry[0], i);\n  var endValue = vScale.parse(entry[1], i);\n  var min = Math.min(startValue, endValue);\n  var max = Math.max(startValue, endValue);\n  var barStart = min;\n  var barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart: barStart,\n    barEnd: barEnd,\n    start: startValue,\n    end: endValue,\n    min: min,\n    max: max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  var iScale = meta.iScale;\n  var vScale = meta.vScale;\n  var labels = iScale.getLabels();\n  var singleScale = iScale === vScale;\n  var parsed = [];\n  var i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  var reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start: start,\n    end: end,\n    reverse: reverse,\n    top: top,\n    bottom: bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  var edge = options.borderSkipped;\n  var res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  var _borderProps = borderProps(properties),\n    start = _borderProps.start,\n    end = _borderProps.end,\n    reverse = _borderProps.reverse,\n    top = _borderProps.top,\n    bottom = _borderProps.bottom;\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  var inflateAmount = _ref.inflateAmount;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nvar BarController = /*#__PURE__*/function (_DatasetController) {\n  _inherits(BarController, _DatasetController);\n  var _super = _createSuper(BarController);\n  function BarController() {\n    _classCallCheck(this, BarController);\n    return _super.apply(this, arguments);\n  }\n  _createClass(BarController, [{\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var _this$_parsing2 = this._parsing,\n        _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,\n        xAxisKey = _this$_parsing2$xAxis === void 0 ? 'x' : _this$_parsing2$xAxis,\n        _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,\n        yAxisKey = _this$_parsing2$yAxis === void 0 ? 'y' : _this$_parsing2$yAxis;\n      var iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var parsed = [];\n      var i, ilen, item, obj;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        obj = data[i];\n        item = {};\n        item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n        parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n      }\n      return parsed;\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      _get(_getPrototypeOf(BarController.prototype), \"updateRangeFromParsed\", this).call(this, range, scale, parsed, stack);\n      var custom = parsed._custom;\n      if (custom && scale === this._cachedMeta.vScale) {\n        range.min = Math.min(range.min, custom.min);\n        range.max = Math.max(range.max, custom.max);\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n      return {\n        label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n        value: value\n      };\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BarController.prototype), \"initialize\", this).call(this);\n      var meta = this._cachedMeta;\n      meta.stack = this.getDataset().stack;\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(bars, start, count, mode) {\n      var reset = mode === 'reset';\n      var index = this.index,\n        vScale = this._cachedMeta.vScale;\n      var base = vScale.getBasePixel();\n      var horizontal = vScale.isHorizontal();\n      var ruler = this._getRuler();\n      var _this$_getSharedOptio = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio.sharedOptions,\n        includeOptions = _this$_getSharedOptio.includeOptions;\n      for (var i = start; i < start + count; i++) {\n        var parsed = this.getParsed(i);\n        var vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n          base: base,\n          head: base\n        } : this._calculateBarValuePixels(i);\n        var ipixels = this._calculateBarIndexPixels(i, ruler);\n        var stack = (parsed._stacks || {})[vScale.axis];\n        var properties = {\n          horizontal: horizontal,\n          base: vpixels.base,\n          enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n          x: horizontal ? vpixels.head : ipixels.center,\n          y: horizontal ? ipixels.center : vpixels.head,\n          height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n          width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n        }\n        var options = properties.options || bars[i].options;\n        setBorderSkipped(properties, options, stack, index);\n        setInflateAmount(properties, options, ruler.ratio);\n        this.updateElement(bars[i], i, properties, mode);\n      }\n    }\n  }, {\n    key: \"_getStacks\",\n    value: function _getStacks(last, dataIndex) {\n      var iScale = this._cachedMeta.iScale;\n      var metasets = iScale.getMatchingVisibleMetas(this._type).filter(function (meta) {\n        return meta.controller.options.grouped;\n      });\n      var stacked = iScale.options.stacked;\n      var stacks = [];\n      var skipNull = function skipNull(meta) {\n        var parsed = meta.controller.getParsed(dataIndex);\n        var val = parsed && parsed[meta.vScale.axis];\n        if (isNullOrUndef(val) || isNaN(val)) {\n          return true;\n        }\n      };\n      var _iterator4 = _createForOfIteratorHelper(metasets),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var meta = _step4.value;\n          if (dataIndex !== undefined && skipNull(meta)) {\n            continue;\n          }\n          if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n            stacks.push(meta.stack);\n          }\n          if (meta.index === last) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      if (!stacks.length) {\n        stacks.push(undefined);\n      }\n      return stacks;\n    }\n  }, {\n    key: \"_getStackCount\",\n    value: function _getStackCount(index) {\n      return this._getStacks(undefined, index).length;\n    }\n  }, {\n    key: \"_getStackIndex\",\n    value: function _getStackIndex(datasetIndex, name, dataIndex) {\n      var stacks = this._getStacks(datasetIndex, dataIndex);\n      var index = name !== undefined ? stacks.indexOf(name) : -1;\n      return index === -1 ? stacks.length - 1 : index;\n    }\n  }, {\n    key: \"_getRuler\",\n    value: function _getRuler() {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var pixels = [];\n      var i, ilen;\n      for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n        pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n      }\n      var barThickness = opts.barThickness;\n      var min = barThickness || computeMinSampleSize(meta);\n      return {\n        min: min,\n        pixels: pixels,\n        start: iScale._startPixel,\n        end: iScale._endPixel,\n        stackCount: this._getStackCount(),\n        scale: iScale,\n        grouped: opts.grouped,\n        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n      };\n    }\n  }, {\n    key: \"_calculateBarValuePixels\",\n    value: function _calculateBarValuePixels(index) {\n      var _this$_cachedMeta = this._cachedMeta,\n        vScale = _this$_cachedMeta.vScale,\n        _stacked = _this$_cachedMeta._stacked,\n        datasetIndex = _this$_cachedMeta.index,\n        _this$options = this.options,\n        baseValue = _this$options.base,\n        minBarLength = _this$options.minBarLength;\n      var actualBase = baseValue || 0;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var floating = isFloatBar(custom);\n      var value = parsed[vScale.axis];\n      var start = 0;\n      var length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n      var head, size;\n      if (length !== value) {\n        start = length - value;\n        length = value;\n      }\n      if (floating) {\n        value = custom.barStart;\n        length = custom.barEnd - custom.barStart;\n        if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n          start = 0;\n        }\n        start += value;\n      }\n      var startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n      var base = vScale.getPixelForValue(startValue);\n      if (this.chart.getDataVisibility(index)) {\n        head = vScale.getPixelForValue(start + length);\n      } else {\n        head = base;\n      }\n      size = head - base;\n      if (Math.abs(size) < minBarLength) {\n        size = barSign(size, vScale, actualBase) * minBarLength;\n        if (value === actualBase) {\n          base -= size / 2;\n        }\n        var startPixel = vScale.getPixelForDecimal(0);\n        var endPixel = vScale.getPixelForDecimal(1);\n        var min = Math.min(startPixel, endPixel);\n        var max = Math.max(startPixel, endPixel);\n        base = Math.max(Math.min(base, max), min);\n        head = base + size;\n        if (_stacked && !floating) {\n          parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n        }\n      }\n      if (base === vScale.getPixelForValue(actualBase)) {\n        var halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n        base += halfGrid;\n        size -= halfGrid;\n      }\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    }\n  }, {\n    key: \"_calculateBarIndexPixels\",\n    value: function _calculateBarIndexPixels(index, ruler) {\n      var scale = ruler.scale;\n      var options = this.options;\n      var skipNull = options.skipNull;\n      var maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n      var center, size;\n      if (ruler.grouped) {\n        var stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n        var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n        var stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n        center = range.start + range.chunk * stackIndex + range.chunk / 2;\n        size = Math.min(maxBarThickness, range.chunk * range.ratio);\n      } else {\n        center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n      }\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      var vScale = meta.vScale;\n      var rects = meta.data;\n      var ilen = rects.length;\n      var i = 0;\n      for (; i < ilen; ++i) {\n        if (this.getParsed(i)[vScale.axis] !== null) {\n          rects[i].draw(this._ctx);\n        }\n      }\n    }\n  }]);\n  return BarController;\n}(DatasetController);\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nvar BubbleController = /*#__PURE__*/function (_DatasetController2) {\n  _inherits(BubbleController, _DatasetController2);\n  var _super2 = _createSuper(BubbleController);\n  function BubbleController() {\n    _classCallCheck(this, BubbleController);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(BubbleController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BubbleController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parsePrimitiveData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseArrayData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseObjectData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var data = this._cachedMeta.data;\n      var max = 0;\n      for (var i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      var r = parsed._custom;\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var points = this._cachedMeta.data;\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta2 = this._cachedMeta,\n        iScale = _this$_cachedMeta2.iScale,\n        vScale = _this$_cachedMeta2.vScale;\n      var _this$_getSharedOptio2 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio2.sharedOptions,\n        includeOptions = _this$_getSharedOptio2.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var parsed = !reset && this.getParsed(i);\n        var properties = {};\n        var iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n        var vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel);\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n          if (reset) {\n            properties.options.radius = 0;\n          }\n        }\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      var parsed = this.getParsed(index);\n      var values = _get(_getPrototypeOf(BubbleController.prototype), \"resolveDataElementOptions\", this).call(this, index, mode);\n      if (values.$shared) {\n        values = Object.assign({}, values, {\n          $shared: false\n        });\n      }\n      var radius = values.radius;\n      if (mode !== 'active') {\n        values.radius = 0;\n      }\n      values.radius += valueOrDefault(parsed && parsed._custom, radius);\n      return values;\n    }\n  }]);\n  return BubbleController;\n}(DatasetController);\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  var ratioX = 1;\n  var ratioY = 1;\n  var offsetX = 0;\n  var offsetY = 0;\n  if (circumference < TAU) {\n    var startAngle = rotation;\n    var endAngle = startAngle + circumference;\n    var startX = Math.cos(startAngle);\n    var startY = Math.sin(startAngle);\n    var endX = Math.cos(endAngle);\n    var endY = Math.sin(endAngle);\n    var calcMax = function calcMax(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    };\n    var calcMin = function calcMin(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    };\n    var maxX = calcMax(0, startX, endX);\n    var maxY = calcMax(HALF_PI, startY, endY);\n    var minX = calcMin(PI, startX, endX);\n    var minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX: ratioX,\n    ratioY: ratioY,\n    offsetX: offsetX,\n    offsetY: offsetY\n  };\n}\nvar DoughnutController = /*#__PURE__*/function (_DatasetController3) {\n  _inherits(DoughnutController, _DatasetController3);\n  var _super3 = _createSuper(DoughnutController);\n  function DoughnutController(chart, datasetIndex) {\n    var _this4;\n    _classCallCheck(this, DoughnutController);\n    _this4 = _super3.call(this, chart, datasetIndex);\n    _this4.enableOptionSharing = true;\n    _this4.innerRadius = undefined;\n    _this4.outerRadius = undefined;\n    _this4.offsetX = undefined;\n    _this4.offsetY = undefined;\n    return _this4;\n  }\n  _createClass(DoughnutController, [{\n    key: \"linkScales\",\n    value: function linkScales() {}\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var data = this.getDataset().data;\n      var meta = this._cachedMeta;\n      if (this._parsing === false) {\n        meta._parsed = data;\n      } else {\n        var getter = function getter(i) {\n          return +data[i];\n        };\n        if (isObject(data[start])) {\n          var _this$_parsing$key = this._parsing.key,\n            key = _this$_parsing$key === void 0 ? 'value' : _this$_parsing$key;\n          getter = function getter(i) {\n            return +resolveObjectKey(data[i], key);\n          };\n        }\n        var i, ilen;\n        for (i = start, ilen = start + count; i < ilen; ++i) {\n          meta._parsed[i] = getter(i);\n        }\n      }\n    }\n  }, {\n    key: \"_getRotation\",\n    value: function _getRotation() {\n      return toRadians(this.options.rotation - 90);\n    }\n  }, {\n    key: \"_getCircumference\",\n    value: function _getCircumference() {\n      return toRadians(this.options.circumference);\n    }\n  }, {\n    key: \"_getRotationExtents\",\n    value: function _getRotationExtents() {\n      var min = TAU;\n      var max = -TAU;\n      for (var i = 0; i < this.chart.data.datasets.length; ++i) {\n        if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n          var controller = this.chart.getDatasetMeta(i).controller;\n          var rotation = controller._getRotation();\n          var circumference = controller._getCircumference();\n          min = Math.min(min, rotation);\n          max = Math.max(max, rotation + circumference);\n        }\n      }\n      return {\n        rotation: min,\n        circumference: max - min\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var meta = this._cachedMeta;\n      var arcs = meta.data;\n      var spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n      var maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n      var cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n      var chartWeight = this._getRingWeight(this.index);\n      var _this$_getRotationExt = this._getRotationExtents(),\n        circumference = _this$_getRotationExt.circumference,\n        rotation = _this$_getRotationExt.rotation;\n      var _getRatioAndOffset = getRatioAndOffset(rotation, circumference, cutout),\n        ratioX = _getRatioAndOffset.ratioX,\n        ratioY = _getRatioAndOffset.ratioY,\n        offsetX = _getRatioAndOffset.offsetX,\n        offsetY = _getRatioAndOffset.offsetY;\n      var maxWidth = (chartArea.width - spacing) / ratioX;\n      var maxHeight = (chartArea.height - spacing) / ratioY;\n      var maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n      var outerRadius = toDimension(this.options.radius, maxRadius);\n      var innerRadius = Math.max(outerRadius * cutout, 0);\n      var radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n      this.offsetX = offsetX * outerRadius;\n      this.offsetY = offsetY * outerRadius;\n      meta.total = this.calculateTotal();\n      this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n      this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"_circumference\",\n    value: function _circumference(i, reset) {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var circumference = this._getCircumference();\n      if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n        return 0;\n      }\n      return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var animateScale = reset && animationOpts.animateScale;\n      var innerRadius = animateScale ? 0 : this.innerRadius;\n      var outerRadius = animateScale ? 0 : this.outerRadius;\n      var _this$_getSharedOptio3 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio3.sharedOptions,\n        includeOptions = _this$_getSharedOptio3.includeOptions;\n      var startAngle = this._getRotation();\n      var i;\n      for (i = 0; i < start; ++i) {\n        startAngle += this._circumference(i, reset);\n      }\n      for (i = start; i < start + count; ++i) {\n        var circumference = this._circumference(i, reset);\n        var arc = arcs[i];\n        var properties = {\n          x: centerX + this.offsetX,\n          y: centerY + this.offsetY,\n          startAngle: startAngle,\n          endAngle: startAngle + circumference,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n        }\n        startAngle += circumference;\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"calculateTotal\",\n    value: function calculateTotal() {\n      var meta = this._cachedMeta;\n      var metaData = meta.data;\n      var total = 0;\n      var i;\n      for (i = 0; i < metaData.length; i++) {\n        var value = meta._parsed[i];\n        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n          total += Math.abs(value);\n        }\n      }\n      return total;\n    }\n  }, {\n    key: \"calculateCircumference\",\n    value: function calculateCircumference(value) {\n      var total = this._cachedMeta.total;\n      if (total > 0 && !isNaN(value)) {\n        return TAU * (Math.abs(value) / total);\n      }\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index], chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"getMaxBorderWidth\",\n    value: function getMaxBorderWidth(arcs) {\n      var max = 0;\n      var chart = this.chart;\n      var i, ilen, meta, controller, options;\n      if (!arcs) {\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n            controller = meta.controller;\n            break;\n          }\n        }\n      }\n      if (!arcs) {\n        return 0;\n      }\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        options = controller.resolveDataElementOptions(i);\n        if (options.borderAlign !== 'inner') {\n          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n        }\n      }\n      return max;\n    }\n  }, {\n    key: \"getMaxOffset\",\n    value: function getMaxOffset(arcs) {\n      var max = 0;\n      for (var i = 0, ilen = arcs.length; i < ilen; ++i) {\n        var options = this.resolveDataElementOptions(i);\n        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n      }\n      return max;\n    }\n  }, {\n    key: \"_getRingWeightOffset\",\n    value: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n      return ringWeightOffset;\n    }\n  }, {\n    key: \"_getRingWeight\",\n    value: function _getRingWeight(datasetIndex) {\n      return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n  }, {\n    key: \"_getVisibleDatasetWeightTotal\",\n    value: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n  }]);\n  return DoughnutController;\n}(DatasetController);\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: function _scriptable(name) {\n    return name !== 'spacing';\n  },\n  _indexable: function _indexable(name) {\n    return name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash');\n  }\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options2 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options2.pointStyle,\n              color = _chart$legend$options2.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nvar LineController = /*#__PURE__*/function (_DatasetController4) {\n  _inherits(LineController, _DatasetController4);\n  var _super4 = _createSuper(LineController);\n  function LineController() {\n    _classCallCheck(this, LineController);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(LineController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      this.supportsDecimation = true;\n      _get(_getPrototypeOf(LineController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset,\n        _meta$data = meta.data,\n        points = _meta$data === void 0 ? [] : _meta$data,\n        _dataset = meta._dataset;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi.start,\n        count = _getStartAndCountOfVi.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      var options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options: options\n      }, mode);\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta3 = this._cachedMeta,\n        iScale = _this$_cachedMeta3.iScale,\n        vScale = _this$_cachedMeta3.vScale,\n        _stacked = _this$_cachedMeta3._stacked,\n        _dataset = _this$_cachedMeta3._dataset;\n      var _this$_getSharedOptio4 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio4.sharedOptions,\n        includeOptions = _this$_getSharedOptio4.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options2 = this.options,\n        spanGaps = _this$options2.spanGaps,\n        segment = _this$options2.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var end = start + count;\n      var pointsCount = points.length;\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = 0; i < pointsCount; ++i) {\n        var point = points[i];\n        var properties = directUpdate ? point : {};\n        if (i < start || i >= end) {\n          properties.skip = true;\n          continue;\n        }\n        var parsed = this.getParsed(i);\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      var data = meta.data || [];\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n      _get(_getPrototypeOf(LineController.prototype), \"draw\", this).call(this);\n    }\n  }]);\n  return LineController;\n}(DatasetController);\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nvar PolarAreaController = /*#__PURE__*/function (_DatasetController5) {\n  _inherits(PolarAreaController, _DatasetController5);\n  var _super5 = _createSuper(PolarAreaController);\n  function PolarAreaController(chart, datasetIndex) {\n    var _this5;\n    _classCallCheck(this, PolarAreaController);\n    _this5 = _super5.call(this, chart, datasetIndex);\n    _this5.innerRadius = undefined;\n    _this5.outerRadius = undefined;\n    return _this5;\n  }\n  _createClass(PolarAreaController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index].r, chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var arcs = this._cachedMeta.data;\n      this._updateRadius();\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax() {\n      var _this6 = this;\n      var meta = this._cachedMeta;\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      meta.data.forEach(function (element, index) {\n        var parsed = _this6.getParsed(index).r;\n        if (!isNaN(parsed) && _this6.chart.getDataVisibility(index)) {\n          if (parsed < range.min) {\n            range.min = parsed;\n          }\n          if (parsed > range.max) {\n            range.max = parsed;\n          }\n        }\n      });\n      return range;\n    }\n  }, {\n    key: \"_updateRadius\",\n    value: function _updateRadius() {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      var outerRadius = Math.max(minSize / 2, 0);\n      var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n      this.outerRadius = outerRadius - radiusLength * this.index;\n      this.innerRadius = this.outerRadius - radiusLength;\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = this._cachedMeta.rScale;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter;\n      var datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n      var angle = datasetStartAngle;\n      var i;\n      var defaultAngle = 360 / this.countVisibleElements();\n      for (i = 0; i < start; ++i) {\n        angle += this._computeAngle(i, mode, defaultAngle);\n      }\n      for (i = start; i < start + count; i++) {\n        var arc = arcs[i];\n        var startAngle = angle;\n        var endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n        var outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n        angle = endAngle;\n        if (reset) {\n          if (animationOpts.animateScale) {\n            outerRadius = 0;\n          }\n          if (animationOpts.animateRotate) {\n            startAngle = endAngle = datasetStartAngle;\n          }\n        }\n        var properties = {\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: outerRadius,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n        };\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"countVisibleElements\",\n    value: function countVisibleElements() {\n      var _this7 = this;\n      var meta = this._cachedMeta;\n      var count = 0;\n      meta.data.forEach(function (element, index) {\n        if (!isNaN(_this7.getParsed(index).r) && _this7.chart.getDataVisibility(index)) {\n          count++;\n        }\n      });\n      return count;\n    }\n  }, {\n    key: \"_computeAngle\",\n    value: function _computeAngle(index, mode, defaultAngle) {\n      return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n  }]);\n  return PolarAreaController;\n}(DatasetController);\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options3 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options3.pointStyle,\n              color = _chart$legend$options3.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nvar PieController = /*#__PURE__*/function (_DoughnutController) {\n  _inherits(PieController, _DoughnutController);\n  var _super6 = _createSuper(PieController);\n  function PieController() {\n    _classCallCheck(this, PieController);\n    return _super6.apply(this, arguments);\n  }\n  return _createClass(PieController);\n}(DoughnutController);\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nvar RadarController = /*#__PURE__*/function (_DatasetController6) {\n  _inherits(RadarController, _DatasetController6);\n  var _super7 = _createSuper(RadarController);\n  function RadarController() {\n    _classCallCheck(this, RadarController);\n    return _super7.apply(this, arguments);\n  }\n  _createClass(RadarController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var vScale = this._cachedMeta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: vScale.getLabels()[index],\n        value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var labels = meta.iScale.getLabels();\n      line.points = points;\n      if (mode !== 'resize') {\n        var options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n          options.borderWidth = 0;\n        }\n        var properties = {\n          _loop: true,\n          _fullLoop: labels.length === points.length,\n          options: options\n        };\n        this.updateElement(line, undefined, properties, mode);\n      }\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var scale = this._cachedMeta.rScale;\n      var reset = mode === 'reset';\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        var pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n        var x = reset ? scale.xCenter : pointPosition.x;\n        var y = reset ? scale.yCenter : pointPosition.y;\n        var properties = {\n          x: x,\n          y: y,\n          angle: pointPosition.angle,\n          skip: isNaN(x) || isNaN(y),\n          options: options\n        };\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }]);\n  return RadarController;\n}(DatasetController);\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nvar ScatterController = /*#__PURE__*/function (_DatasetController7) {\n  _inherits(ScatterController, _DatasetController7);\n  var _super8 = _createSuper(ScatterController);\n  function ScatterController() {\n    _classCallCheck(this, ScatterController);\n    return _super8.apply(this, arguments);\n  }\n  _createClass(ScatterController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var _meta$data2 = meta.data,\n        points = _meta$data2 === void 0 ? [] : _meta$data2;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi2 = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi2.start,\n        count = _getStartAndCountOfVi2.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      if (this.options.showLine) {\n        var line = meta.dataset,\n          _dataset = meta._dataset;\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        var options = this.resolveDatasetElementOptions(mode);\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n          animated: !animationsDisabled,\n          options: options\n        }, mode);\n      }\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var showLine = this.options.showLine;\n      if (!this.datasetElementType && showLine) {\n        this.datasetElementType = this.chart.registry.getElement('line');\n      }\n      _get(_getPrototypeOf(ScatterController.prototype), \"addElements\", this).call(this);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta4 = this._cachedMeta,\n        iScale = _this$_cachedMeta4.iScale,\n        vScale = _this$_cachedMeta4.vScale,\n        _stacked = _this$_cachedMeta4._stacked,\n        _dataset = _this$_cachedMeta4._dataset;\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions);\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options3 = this.options,\n        spanGaps = _this$options3.spanGaps,\n        segment = _this$options3.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = start; i < start + count; ++i) {\n        var point = points[i];\n        var parsed = this.getParsed(i);\n        var properties = directUpdate ? point : {};\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var data = meta.data || [];\n      if (!this.options.showLine) {\n        var max = 0;\n        for (var i = data.length - 1; i >= 0; --i) {\n          max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n      }\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }]);\n  return ScatterController;\n}(DatasetController);\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */\nvar DateAdapterBase = /*#__PURE__*/function () {\n  function DateAdapterBase(options) {\n    _classCallCheck(this, DateAdapterBase);\n    _defineProperty(this, \"options\", void 0);\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  _createClass(DateAdapterBase, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return abstract();\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      return abstract();\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return abstract();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      return abstract();\n    }\n  }, {\n    key: \"diff\",\n    value: function diff() {\n      return abstract();\n    }\n  }, {\n    key: \"startOf\",\n    value: function startOf() {\n      return abstract();\n    }\n  }, {\n    key: \"endOf\",\n    value: function endOf() {\n      return abstract();\n    }\n  }], [{\n    key: \"override\",\n    value:\n    /**\r\n    * Override default date adapter methods.\r\n    * Accepts type parameter to define options type.\r\n    * @example\r\n    * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n    *   init() {\r\n    *     console.log(this.options.myAdapterOption);\r\n    *   }\r\n    * })\r\n    */\n    function override(members) {\n      Object.assign(DateAdapterBase.prototype, members);\n    }\n  }]);\n  return DateAdapterBase;\n}();\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  var controller = metaset.controller,\n    data = metaset.data,\n    _sorted = metaset._sorted;\n  var iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    var lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      var el = data[0];\n      var range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        var start = lookupMethod(data, axis, value - range);\n        var end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  var metasets = chart.getSortedVisibleDatasetMetas();\n  var value = position[axis];\n  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {\n    var _metasets$i = metasets[i],\n      _index2 = _metasets$i.index,\n      data = _metasets$i.data;\n    var _binarySearch = binarySearch(metasets[i], axis, value, intersect),\n      lo = _binarySearch.lo,\n      hi = _binarySearch.hi;\n    for (var j = lo; j <= hi; ++j) {\n      var element = data[j];\n      if (!element.skip) {\n        handler(element, _index2, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  var useX = axis.indexOf('x') !== -1;\n  var useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  var items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  var items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    var _element$getProps = element.getProps(['startAngle', 'endAngle'], useFinalPosition),\n      startAngle = _element$getProps.startAngle,\n      endAngle = _element$getProps.endAngle;\n    var _getAngleFromPoint = getAngleFromPoint(element, {\n        x: position.x,\n        y: position.y\n      }),\n      angle = _getAngleFromPoint.angle;\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  var items = [];\n  var distanceMetric = getDistanceMetricForAxis(axis);\n  var minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    var inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    var center = element.getCenterPoint(useFinalPosition);\n    var pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    var distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  var items = [];\n  var rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  var intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, function (element, datasetIndex, index) {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems: evaluateInteractionItems,\n  modes: {\n    index: function index(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'x';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      var elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(function (meta) {\n        var index = items[0].index;\n        var element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element: element,\n            datasetIndex: meta.index,\n            index: index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset: function dataset(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        var datasetIndex = items[0].datasetIndex;\n        var data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (var i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex: datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point: function point(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest: function nearest(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x: function x(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y: function y(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nvar STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(function (v) {\n    return v.pos === position;\n  });\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(function (v) {\n    return STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;\n  });\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort(function (a, b) {\n    var v0 = reverse ? b : a;\n    var v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  var layoutBoxes = [];\n  var i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    var _box = box;\n    pos = _box.position;\n    var _box$options = _box.options;\n    stack = _box$options.stack;\n    var _box$options$stackWei = _box$options.stackWeight;\n    stackWeight = _box$options$stackWei === void 0 ? 1 : _box$options$stackWei;\n    layoutBoxes.push({\n      index: i,\n      box: box,\n      pos: pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight: stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  var stacks = {};\n  var _iterator5 = _createForOfIteratorHelper(layouts),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var wrap = _step5.value;\n      var stack = wrap.stack,\n        pos = wrap.pos,\n        stackWeight = wrap.stackWeight;\n      if (!stack || !STATIC_POSITIONS.includes(pos)) {\n        continue;\n      }\n      var _stack = stacks[stack] || (stacks[stack] = {\n        count: 0,\n        placed: 0,\n        weight: 0,\n        size: 0\n      });\n      _stack.count++;\n      _stack.weight += stackWeight;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  var stacks = buildStacks(layouts);\n  var vBoxMaxWidth = params.vBoxMaxWidth,\n    hBoxMaxHeight = params.hBoxMaxHeight;\n  var i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    var fullSize = layout.box.fullSize;\n    var stack = stacks[layout.stack];\n    var factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  var layoutBoxes = wrapBoxes(boxes);\n  var fullSize = sortByWeight(layoutBoxes.filter(function (wrap) {\n    return wrap.box.fullSize;\n  }), true);\n  var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  var centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  var centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize: fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  var pos = layout.pos,\n    box = layout.box;\n  var maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    var stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  var newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  var newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  var widthChanged = newWidth !== chartArea.w;\n  var heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    var change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    var margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(function (pos) {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  var refitBoxes = [];\n  var i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    var _updateDims = updateDims(chartArea, params, layout, stacks),\n      same = _updateDims.same,\n      other = _updateDims.other;\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  var userPadding = params.padding;\n  var x = chartArea.x,\n    y = chartArea.y;\n  var _iterator6 = _createForOfIteratorHelper(boxes),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var layout = _step6.value;\n      var box = layout.box;\n      var stack = stacks[layout.stack] || {\n        count: 1,\n        placed: 0,\n        weight: 1\n      };\n      var weight = layout.stackWeight / stack.weight || 1;\n      if (layout.horizontal) {\n        var width = chartArea.w * weight;\n        var height = stack.size || box.height;\n        if (defined(stack.start)) {\n          y = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n        } else {\n          setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n        }\n        stack.start = y;\n        stack.placed += width;\n        y = box.bottom;\n      } else {\n        var _height = chartArea.h * weight;\n        var _width = stack.size || box.width;\n        if (defined(stack.start)) {\n          x = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, x, userPadding.top, _width, params.outerHeight - userPadding.bottom - userPadding.top);\n        } else {\n          setBoxDims(box, x, chartArea.top + stack.placed, _width, _height);\n        }\n        stack.start = x;\n        stack.placed += _height;\n        x = box.right;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox: function addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw: function draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox: function removeBox(chart, layoutItem) {\n    var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure: function configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update: function update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    var padding = toPadding(chart.options.layout.padding);\n    var availableWidth = Math.max(width - padding.width, 0);\n    var availableHeight = Math.max(height - padding.height, 0);\n    var boxes = buildLayoutBoxes(chart.boxes);\n    var verticalBoxes = boxes.vertical;\n    var horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, function (box) {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    var visibleVerticalBoxCount = verticalBoxes.reduce(function (total, wrap) {\n      return wrap.box.options && wrap.box.options.display === false ? total : total + 1;\n    }, 0) || 1;\n    var params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding: padding,\n      availableWidth: availableWidth,\n      availableHeight: availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    var maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    var chartArea = Object.assign({\n      maxPadding: maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    var stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, function (layout) {\n      var box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nvar BasePlatform = /*#__PURE__*/function () {\n  function BasePlatform() {\n    _classCallCheck(this, BasePlatform);\n  }\n  _createClass(BasePlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {}\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      return false;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {}\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type, listener) {}\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return 1;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(element, width, height, aspectRatio) {\n      width = Math.max(0, width || element.width);\n      height = height || element.height;\n      return {\n        width: width,\n        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n      };\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      return true;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {}\n  }]);\n  return BasePlatform;\n}();\nvar BasicPlatform = /*#__PURE__*/function (_BasePlatform) {\n  _inherits(BasicPlatform, _BasePlatform);\n  var _super9 = _createSuper(BasicPlatform);\n  function BasicPlatform() {\n    _classCallCheck(this, BasicPlatform);\n    return _super9.apply(this, arguments);\n  }\n  _createClass(BasicPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(item) {\n      return item && item.getContext && item.getContext('2d') || null;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {\n      config.options.animation = false;\n    }\n  }]);\n  return BasicPlatform;\n}(BasePlatform);\nvar EXPANDO_KEY = '$chartjs';\nvar EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nvar isNullOrEmpty = function isNullOrEmpty(value) {\n  return value === null || value === '';\n};\nfunction initCanvas(canvas, aspectRatio) {\n  var style = canvas.style;\n  var renderHeight = canvas.getAttribute('height');\n  var renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    var displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      var displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nvar eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  var type = EVENT_TYPES[event.type] || event.type;\n  var _getRelativePosition = getRelativePosition(event, chart),\n    x = _getRelativePosition.x,\n    y = _getRelativePosition.y;\n  return {\n    type: type,\n    chart: chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  var _iterator7 = _createForOfIteratorHelper(nodeList),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var node = _step7.value;\n      if (node === canvas || node.contains(canvas)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator8 = _createForOfIteratorHelper(entries),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var entry = _step8.value;\n        trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator9 = _createForOfIteratorHelper(entries),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var entry = _step9.value;\n        trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nvar drpListeningCharts = new Map();\nvar oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  var dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach(function (resize, chart) {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  var resize = throttled(function (width, height) {\n    var w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  var observer = new ResizeObserver(function (entries) {\n    var entry = entries[0];\n    var width = entry.contentRect.width;\n    var height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  var canvas = chart.canvas;\n  var proxy = throttled(function (event) {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nvar DomPlatform = /*#__PURE__*/function (_BasePlatform2) {\n  _inherits(DomPlatform, _BasePlatform2);\n  var _super10 = _createSuper(DomPlatform);\n  function DomPlatform() {\n    _classCallCheck(this, DomPlatform);\n    return _super10.apply(this, arguments);\n  }\n  _createClass(DomPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {\n      var context = canvas && canvas.getContext && canvas.getContext('2d');\n      if (context && context.canvas === canvas) {\n        initCanvas(canvas, aspectRatio);\n        return context;\n      }\n      return null;\n    }\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      var canvas = context.canvas;\n      if (!canvas[EXPANDO_KEY]) {\n        return false;\n      }\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n        if (isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      var style = initial.style || {};\n      Object.keys(style).forEach(function (key) {\n        canvas.style[key] = style[key];\n      });\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n      return true;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {\n      this.removeEventListener(chart, type);\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var handlers = {\n        attach: createAttachObserver,\n        detach: createDetachObserver,\n        resize: createResizeObserver\n      };\n      var handler = handlers[type] || createProxyAndListen;\n      proxies[type] = handler(chart, type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type) {\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var proxy = proxies[type];\n      if (!proxy) {\n        return;\n      }\n      var handlers = {\n        attach: releaseObserver,\n        detach: releaseObserver,\n        resize: releaseObserver\n      };\n      var handler = handlers[type] || removeListener;\n      handler(chart, type, proxy);\n      proxies[type] = undefined;\n    }\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return window.devicePixelRatio;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(canvas, width, height, aspectRatio) {\n      return _getMaximumSize(canvas, width, height, aspectRatio);\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      var container = _getParentNode(canvas);\n      return !!(container && container.isConnected);\n    }\n  }]);\n  return DomPlatform;\n}(BasePlatform);\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nvar Element = /*#__PURE__*/function () {\n  function Element() {\n    _classCallCheck(this, Element);\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"$animations\", void 0);\n  }\n  _createClass(Element, [{\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps.x,\n        y = _this$getProps.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return isNumber(this.x) && isNumber(this.y);\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps(props, final) {\n      var _this8 = this;\n      var anims = this.$animations;\n      if (!final || !anims) {\n        // let's not create an object, if not needed\n        return this;\n      }\n      var ret = {};\n      props.forEach(function (prop) {\n        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : _this8[prop];\n      });\n      return ret;\n    }\n  }]);\n  return Element;\n}();\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  var tickOpts = scale.options.ticks;\n  var determinedMaxTicks = determineMaxTicks(scale);\n  var ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  var numMajorIndices = majorIndices.length;\n  var first = majorIndices[0];\n  var last = majorIndices[numMajorIndices - 1];\n  var newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  var spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    var i, ilen;\n    var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  var offset = scale.options.offset;\n  var tickLength = scale._tickSize();\n  var maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  var maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  var evenMajorSpacing = getEvenSpacing(majorIndices);\n  var spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  var factors = _factorize(evenMajorSpacing);\n  for (var i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    var factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  var result = [];\n  var i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  var count = 0;\n  var next = majorIndices[0];\n  var i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  var start = valueOrDefault(majorStart, 0);\n  var end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  var count = 0;\n  var length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  var len = arr.length;\n  var i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nvar reverseAlign = function reverseAlign(align) {\n  return align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n};\nvar offsetFromEdge = function offsetFromEdge(scale, edge, offset) {\n  return edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n};\nvar getTicksLimit = function getTicksLimit(ticksLength, maxTicksLimit) {\n  return Math.min(maxTicksLimit || ticksLength, ticksLength);\n};\nfunction sample(arr, numItems) {\n  var result = [];\n  var increment = arr.length / numItems;\n  var len = arr.length;\n  var i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  var length = scale.ticks.length;\n  var validIndex = Math.min(index, length - 1);\n  var start = scale._startPixel;\n  var end = scale._endPixel;\n  var epsilon = 1e-6;\n  var lineValue = scale.getPixelForTick(validIndex);\n  var offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, function (cache) {\n    var gc = cache.gc;\n    var gcLen = gc.length / 2;\n    var i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  var font = toFont(options.font, fallback);\n  var padding = toPadding(options.padding);\n  var lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale: scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick: tick,\n    index: index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  var ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  var top = scale.top,\n    left = scale.left,\n    bottom = scale.bottom,\n    right = scale.right,\n    chart = scale.chart;\n  var chartArea = chart.chartArea,\n    scales = chart.scales;\n  var rotation = 0;\n  var maxWidth, titleX, titleY;\n  var height = bottom - top;\n  var width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      var positionAxisID = Object.keys(position)[0];\n      var value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      var _positionAxisID = Object.keys(position)[0];\n      var _value = position[_positionAxisID];\n      titleX = scales[_positionAxisID].getPixelForValue(_value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX: titleX,\n    titleY: titleY,\n    maxWidth: maxWidth,\n    rotation: rotation\n  };\n}\nvar Scale = /*#__PURE__*/function (_Element) {\n  _inherits(Scale, _Element);\n  var _super11 = _createSuper(Scale);\n  function Scale(cfg) {\n    var _this9;\n    _classCallCheck(this, Scale);\n    _this9 = _super11.call(this);\n    _this9.id = cfg.id;\n    _this9.type = cfg.type;\n    _this9.options = undefined;\n    _this9.ctx = cfg.ctx;\n    _this9.chart = cfg.chart;\n    _this9.top = undefined;\n    _this9.bottom = undefined;\n    _this9.left = undefined;\n    _this9.right = undefined;\n    _this9.width = undefined;\n    _this9.height = undefined;\n    _this9._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    _this9.maxWidth = undefined;\n    _this9.maxHeight = undefined;\n    _this9.paddingTop = undefined;\n    _this9.paddingBottom = undefined;\n    _this9.paddingLeft = undefined;\n    _this9.paddingRight = undefined;\n    _this9.axis = undefined;\n    _this9.labelRotation = undefined;\n    _this9.min = undefined;\n    _this9.max = undefined;\n    _this9._range = undefined;\n    _this9.ticks = [];\n    _this9._gridLineItems = null;\n    _this9._labelItems = null;\n    _this9._labelSizes = null;\n    _this9._length = 0;\n    _this9._maxLength = 0;\n    _this9._longestTextCache = {};\n    _this9._startPixel = undefined;\n    _this9._endPixel = undefined;\n    _this9._reversePixels = false;\n    _this9._userMax = undefined;\n    _this9._userMin = undefined;\n    _this9._suggestedMax = undefined;\n    _this9._suggestedMin = undefined;\n    _this9._ticksLength = 0;\n    _this9._borderValue = 0;\n    _this9._cache = {};\n    _this9._dataLimitsCached = false;\n    _this9.$context = undefined;\n    return _this9;\n  }\n  _createClass(Scale, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = options.setContext(this.getContext());\n      this.axis = options.axis;\n      this._userMin = this.parse(options.min);\n      this._userMax = this.parse(options.max);\n      this._suggestedMin = this.parse(options.suggestedMin);\n      this._suggestedMax = this.parse(options.suggestedMax);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      return raw;\n    }\n  }, {\n    key: \"getUserBounds\",\n    value: function getUserBounds() {\n      var _userMin = this._userMin,\n        _userMax = this._userMax,\n        _suggestedMin = this._suggestedMin,\n        _suggestedMax = this._suggestedMax;\n      _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n      _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n      _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n      _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n      return {\n        min: finiteOrDefault(_userMin, _suggestedMin),\n        max: finiteOrDefault(_userMax, _suggestedMax),\n        minDefined: isNumberFinite(_userMin),\n        maxDefined: isNumberFinite(_userMax)\n      };\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(canStack) {\n      var _this$getUserBounds = this.getUserBounds(),\n        min = _this$getUserBounds.min,\n        max = _this$getUserBounds.max,\n        minDefined = _this$getUserBounds.minDefined,\n        maxDefined = _this$getUserBounds.maxDefined;\n      var range;\n      if (minDefined && maxDefined) {\n        return {\n          min: min,\n          max: max\n        };\n      }\n      var metas = this.getMatchingVisibleMetas();\n      for (var i = 0, ilen = metas.length; i < ilen; ++i) {\n        range = metas[i].controller.getMinMax(this, canStack);\n        if (!minDefined) {\n          min = Math.min(min, range.min);\n        }\n        if (!maxDefined) {\n          max = Math.max(max, range.max);\n        }\n      }\n      min = maxDefined && min > max ? max : min;\n      max = minDefined && min > max ? min : max;\n      return {\n        min: finiteOrDefault(min, finiteOrDefault(max, min)),\n        max: finiteOrDefault(max, finiteOrDefault(min, max))\n      };\n    }\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return {\n        left: this.paddingLeft || 0,\n        top: this.paddingTop || 0,\n        right: this.paddingRight || 0,\n        bottom: this.paddingBottom || 0\n      };\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      return this.ticks;\n    }\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n  }, {\n    key: \"getLabelItems\",\n    value: function getLabelItems() {\n      var chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n      var items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n      return items;\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      this._cache = {};\n      this._dataLimitsCached = false;\n    }\n  }, {\n    key: \"beforeUpdate\",\n    value: function beforeUpdate() {\n      callback(this.options.beforeUpdate, [this]);\n    }\n  }, {\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      var _this$options4 = this.options,\n        beginAtZero = _this$options4.beginAtZero,\n        grace = _this$options4.grace,\n        tickOpts = _this$options4.ticks;\n      var sampleSize = tickOpts.sampleSize;\n      this.beforeUpdate();\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins = Object.assign({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      this.ticks = null;\n      this._labelSizes = null;\n      this._gridLineItems = null;\n      this._labelItems = null;\n      this.beforeSetDimensions();\n      this.setDimensions();\n      this.afterSetDimensions();\n      this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n      if (!this._dataLimitsCached) {\n        this.beforeDataLimits();\n        this.determineDataLimits();\n        this.afterDataLimits();\n        this._range = _addGrace(this, grace, beginAtZero);\n        this._dataLimitsCached = true;\n      }\n      this.beforeBuildTicks();\n      this.ticks = this.buildTicks() || [];\n      this.afterBuildTicks();\n      var samplingEnabled = sampleSize < this.ticks.length;\n      this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n      this.configure();\n      this.beforeCalculateLabelRotation();\n      this.calculateLabelRotation();\n      this.afterCalculateLabelRotation();\n      if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n        this.ticks = autoSkip(this, this.ticks);\n        this._labelSizes = null;\n        this.afterAutoSkip();\n      }\n      if (samplingEnabled) {\n        this._convertTicksToLabels(this.ticks);\n      }\n      this.beforeFit();\n      this.fit();\n      this.afterFit();\n      this.afterUpdate();\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var reversePixels = this.options.reverse;\n      var startPixel, endPixel;\n      if (this.isHorizontal()) {\n        startPixel = this.left;\n        endPixel = this.right;\n      } else {\n        startPixel = this.top;\n        endPixel = this.bottom;\n        reversePixels = !reversePixels;\n      }\n      this._startPixel = startPixel;\n      this._endPixel = endPixel;\n      this._reversePixels = reversePixels;\n      this._length = endPixel - startPixel;\n      this._alignToPixels = this.options.alignToPixels;\n    }\n  }, {\n    key: \"afterUpdate\",\n    value: function afterUpdate() {\n      callback(this.options.afterUpdate, [this]);\n    }\n  }, {\n    key: \"beforeSetDimensions\",\n    value: function beforeSetDimensions() {\n      callback(this.options.beforeSetDimensions, [this]);\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = 0;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = 0;\n        this.bottom = this.height;\n      }\n      this.paddingLeft = 0;\n      this.paddingTop = 0;\n      this.paddingRight = 0;\n      this.paddingBottom = 0;\n    }\n  }, {\n    key: \"afterSetDimensions\",\n    value: function afterSetDimensions() {\n      callback(this.options.afterSetDimensions, [this]);\n    }\n  }, {\n    key: \"_callHooks\",\n    value: function _callHooks(name) {\n      this.chart.notifyPlugins(name, this.getContext());\n      callback(this.options[name], [this]);\n    }\n  }, {\n    key: \"beforeDataLimits\",\n    value: function beforeDataLimits() {\n      this._callHooks('beforeDataLimits');\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {}\n  }, {\n    key: \"afterDataLimits\",\n    value: function afterDataLimits() {\n      this._callHooks('afterDataLimits');\n    }\n  }, {\n    key: \"beforeBuildTicks\",\n    value: function beforeBuildTicks() {\n      this._callHooks('beforeBuildTicks');\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      return [];\n    }\n  }, {\n    key: \"afterBuildTicks\",\n    value: function afterBuildTicks() {\n      this._callHooks('afterBuildTicks');\n    }\n  }, {\n    key: \"beforeTickToLabelConversion\",\n    value: function beforeTickToLabelConversion() {\n      callback(this.options.beforeTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var tickOpts = this.options.ticks;\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        tick = ticks[i];\n        tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n      }\n    }\n  }, {\n    key: \"afterTickToLabelConversion\",\n    value: function afterTickToLabelConversion() {\n      callback(this.options.afterTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"beforeCalculateLabelRotation\",\n    value: function beforeCalculateLabelRotation() {\n      callback(this.options.beforeCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"calculateLabelRotation\",\n    value: function calculateLabelRotation() {\n      var options = this.options;\n      var tickOpts = options.ticks;\n      var numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n      var minRotation = tickOpts.minRotation || 0;\n      var maxRotation = tickOpts.maxRotation;\n      var labelRotation = minRotation;\n      var tickWidth, maxHeight, maxLabelDiagonal;\n      if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n        this.labelRotation = minRotation;\n        return;\n      }\n      var labelSizes = this._getLabelSizes();\n      var maxLabelWidth = labelSizes.widest.width;\n      var maxLabelHeight = labelSizes.highest.height;\n      var maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n      tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n      if (maxLabelWidth + 6 > tickWidth) {\n        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n        maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n        labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n      }\n      this.labelRotation = labelRotation;\n    }\n  }, {\n    key: \"afterCalculateLabelRotation\",\n    value: function afterCalculateLabelRotation() {\n      callback(this.options.afterCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {}\n  }, {\n    key: \"beforeFit\",\n    value: function beforeFit() {\n      callback(this.options.beforeFit, [this]);\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var minSize = {\n        width: 0,\n        height: 0\n      };\n      var chart = this.chart,\n        _this$options5 = this.options,\n        tickOpts = _this$options5.ticks,\n        titleOpts = _this$options5.title,\n        gridOpts = _this$options5.grid;\n      var display = this._isVisible();\n      var isHorizontal = this.isHorizontal();\n      if (display) {\n        var titleHeight = getTitleHeight(titleOpts, chart.options.font);\n        if (isHorizontal) {\n          minSize.width = this.maxWidth;\n          minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n        } else {\n          minSize.height = this.maxHeight;\n          minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n        }\n        if (tickOpts.display && this.ticks.length) {\n          var _this$_getLabelSizes = this._getLabelSizes(),\n            first = _this$_getLabelSizes.first,\n            last = _this$_getLabelSizes.last,\n            widest = _this$_getLabelSizes.widest,\n            highest = _this$_getLabelSizes.highest;\n          var tickPadding = tickOpts.padding * 2;\n          var angleRadians = toRadians(this.labelRotation);\n          var cos = Math.cos(angleRadians);\n          var sin = Math.sin(angleRadians);\n          if (isHorizontal) {\n            var labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n            minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n          } else {\n            var labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n            minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n          }\n          this._calculatePadding(first, last, sin, cos);\n        }\n      }\n      this._handleMargins();\n      if (isHorizontal) {\n        this.width = this._length = chart.width - this._margins.left - this._margins.right;\n        this.height = minSize.height;\n      } else {\n        this.width = minSize.width;\n        this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n      }\n    }\n  }, {\n    key: \"_calculatePadding\",\n    value: function _calculatePadding(first, last, sin, cos) {\n      var _this$options6 = this.options,\n        _this$options6$ticks = _this$options6.ticks,\n        align = _this$options6$ticks.align,\n        padding = _this$options6$ticks.padding,\n        position = _this$options6.position;\n      var isRotated = this.labelRotation !== 0;\n      var labelsBelowTicks = position !== 'top' && this.axis === 'x';\n      if (this.isHorizontal()) {\n        var offsetLeft = this.getPixelForTick(0) - this.left;\n        var offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n        var paddingLeft = 0;\n        var paddingRight = 0;\n        if (isRotated) {\n          if (labelsBelowTicks) {\n            paddingLeft = cos * first.width;\n            paddingRight = sin * last.height;\n          } else {\n            paddingLeft = sin * first.height;\n            paddingRight = cos * last.width;\n          }\n        } else if (align === 'start') {\n          paddingRight = last.width;\n        } else if (align === 'end') {\n          paddingLeft = first.width;\n        } else if (align !== 'inner') {\n          paddingLeft = first.width / 2;\n          paddingRight = last.width / 2;\n        }\n        this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n        this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n      } else {\n        var paddingTop = last.height / 2;\n        var paddingBottom = first.height / 2;\n        if (align === 'start') {\n          paddingTop = 0;\n          paddingBottom = first.height;\n        } else if (align === 'end') {\n          paddingTop = last.height;\n          paddingBottom = 0;\n        }\n        this.paddingTop = paddingTop + padding;\n        this.paddingBottom = paddingBottom + padding;\n      }\n    }\n  }, {\n    key: \"_handleMargins\",\n    value: function _handleMargins() {\n      if (this._margins) {\n        this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n        this._margins.top = Math.max(this.paddingTop, this._margins.top);\n        this._margins.right = Math.max(this.paddingRight, this._margins.right);\n        this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n      }\n    }\n  }, {\n    key: \"afterFit\",\n    value: function afterFit() {\n      callback(this.options.afterFit, [this]);\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var _this$options7 = this.options,\n        axis = _this$options7.axis,\n        position = _this$options7.position;\n      return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n  }, {\n    key: \"isFullSize\",\n    value: function isFullSize() {\n      return this.options.fullSize;\n    }\n  }, {\n    key: \"_convertTicksToLabels\",\n    value: function _convertTicksToLabels(ticks) {\n      this.beforeTickToLabelConversion();\n      this.generateTickLabels(ticks);\n      var i, ilen;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        if (isNullOrUndef(ticks[i].label)) {\n          ticks.splice(i, 1);\n          ilen--;\n          i--;\n        }\n      }\n      this.afterTickToLabelConversion();\n    }\n  }, {\n    key: \"_getLabelSizes\",\n    value: function _getLabelSizes() {\n      var labelSizes = this._labelSizes;\n      if (!labelSizes) {\n        var sampleSize = this.options.ticks.sampleSize;\n        var ticks = this.ticks;\n        if (sampleSize < ticks.length) {\n          ticks = sample(ticks, sampleSize);\n        }\n        this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n      }\n      return labelSizes;\n    }\n  }, {\n    key: \"_computeLabelSizes\",\n    value: function _computeLabelSizes(ticks, length, maxTicksLimit) {\n      var ctx = this.ctx,\n        caches = this._longestTextCache;\n      var widths = [];\n      var heights = [];\n      var increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n      var widestLabelSize = 0;\n      var highestLabelSize = 0;\n      var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n      for (i = 0; i < length; i += increment) {\n        label = ticks[i].label;\n        tickFont = this._resolveTickFontOptions(i);\n        ctx.font = fontString = tickFont.string;\n        cache = caches[fontString] = caches[fontString] || {\n          data: {},\n          gc: []\n        };\n        lineHeight = tickFont.lineHeight;\n        width = height = 0;\n        if (!isNullOrUndef(label) && !isArray(label)) {\n          width = _measureText(ctx, cache.data, cache.gc, width, label);\n          height = lineHeight;\n        } else if (isArray(label)) {\n          for (j = 0, jlen = label.length; j < jlen; ++j) {\n            nestedLabel = label[j];\n            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n              width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n              height += lineHeight;\n            }\n          }\n        }\n        widths.push(width);\n        heights.push(height);\n        widestLabelSize = Math.max(width, widestLabelSize);\n        highestLabelSize = Math.max(height, highestLabelSize);\n      }\n      garbageCollect(caches, length);\n      var widest = widths.indexOf(widestLabelSize);\n      var highest = heights.indexOf(highestLabelSize);\n      var valueAt = function valueAt(idx) {\n        return {\n          width: widths[idx] || 0,\n          height: heights[idx] || 0\n        };\n      };\n      return {\n        first: valueAt(0),\n        last: valueAt(length - 1),\n        widest: valueAt(widest),\n        highest: valueAt(highest),\n        widths: widths,\n        heights: heights\n      };\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value;\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value, index) {\n      return NaN;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {}\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getPixelForDecimal\",\n    value: function getPixelForDecimal(decimal) {\n      if (this._reversePixels) {\n        decimal = 1 - decimal;\n      }\n      var pixel = this._startPixel + decimal * this._length;\n      return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n  }, {\n    key: \"getDecimalForPixel\",\n    value: function getDecimalForPixel(pixel) {\n      var decimal = (pixel - this._startPixel) / this._length;\n      return this._reversePixels ? 1 - decimal : decimal;\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    }\n  }, {\n    key: \"getBaseValue\",\n    value: function getBaseValue() {\n      var min = this.min,\n        max = this.max;\n      return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index) {\n      var ticks = this.ticks || [];\n      if (index >= 0 && index < ticks.length) {\n        var tick = ticks[index];\n        return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n      }\n      return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n  }, {\n    key: \"_tickSize\",\n    value: function _tickSize() {\n      var optionTicks = this.options.ticks;\n      var rot = toRadians(this.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var labelSizes = this._getLabelSizes();\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = labelSizes ? labelSizes.widest.width + padding : 0;\n      var h = labelSizes ? labelSizes.highest.height + padding : 0;\n      return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var display = this.options.display;\n      if (display !== 'auto') {\n        return !!display;\n      }\n      return this.getMatchingVisibleMetas().length > 0;\n    }\n  }, {\n    key: \"_computeGridLineItems\",\n    value: function _computeGridLineItems(chartArea) {\n      var axis = this.axis;\n      var chart = this.chart;\n      var options = this.options;\n      var grid = options.grid,\n        position = options.position,\n        border = options.border;\n      var offset = grid.offset;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var ticksLength = ticks.length + (offset ? 1 : 0);\n      var tl = getTickMarkLength(grid);\n      var items = [];\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = borderOpts.display ? borderOpts.width : 0;\n      var axisHalfWidth = axisWidth / 2;\n      var alignBorderValue = function alignBorderValue(pixel) {\n        return _alignPixel(chart, pixel, axisWidth);\n      };\n      var borderValue, i, lineValue, alignedLineValue;\n      var tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n      if (position === 'top') {\n        borderValue = alignBorderValue(this.bottom);\n        ty1 = this.bottom - tl;\n        ty2 = borderValue - axisHalfWidth;\n        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n        y2 = chartArea.bottom;\n      } else if (position === 'bottom') {\n        borderValue = alignBorderValue(this.top);\n        y1 = chartArea.top;\n        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = this.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignBorderValue(this.right);\n        tx1 = this.right - tl;\n        tx2 = borderValue - axisHalfWidth;\n        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n        x2 = chartArea.right;\n      } else if (position === 'right') {\n        borderValue = alignBorderValue(this.left);\n        x1 = chartArea.left;\n        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n        tx1 = borderValue + axisHalfWidth;\n        tx2 = this.left + tl;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n        }\n        y1 = chartArea.top;\n        y2 = chartArea.bottom;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = ty1 + tl;\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n        } else if (isObject(position)) {\n          var _positionAxisID2 = Object.keys(position)[0];\n          var _value2 = position[_positionAxisID2];\n          borderValue = alignBorderValue(this.chart.scales[_positionAxisID2].getPixelForValue(_value2));\n        }\n        tx1 = borderValue - axisHalfWidth;\n        tx2 = tx1 - tl;\n        x1 = chartArea.left;\n        x2 = chartArea.right;\n      }\n      var limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n      var step = Math.max(1, Math.ceil(ticksLength / limit));\n      for (i = 0; i < ticksLength; i += step) {\n        var context = this.getContext(i);\n        var optsAtIndex = grid.setContext(context);\n        var optsAtIndexBorder = border.setContext(context);\n        var lineWidth = optsAtIndex.lineWidth;\n        var lineColor = optsAtIndex.color;\n        var borderDash = optsAtIndexBorder.dash || [];\n        var borderDashOffset = optsAtIndexBorder.dashOffset;\n        var tickWidth = optsAtIndex.tickWidth;\n        var tickColor = optsAtIndex.tickColor;\n        var tickBorderDash = optsAtIndex.tickBorderDash || [];\n        var tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n        lineValue = getPixelForGridLine(this, i, offset);\n        if (lineValue === undefined) {\n          continue;\n        }\n        alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n        if (isHorizontal) {\n          tx1 = tx2 = x1 = x2 = alignedLineValue;\n        } else {\n          ty1 = ty2 = y1 = y2 = alignedLineValue;\n        }\n        items.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          width: lineWidth,\n          color: lineColor,\n          borderDash: borderDash,\n          borderDashOffset: borderDashOffset,\n          tickWidth: tickWidth,\n          tickColor: tickColor,\n          tickBorderDash: tickBorderDash,\n          tickBorderDashOffset: tickBorderDashOffset\n        });\n      }\n      this._ticksLength = ticksLength;\n      this._borderValue = borderValue;\n      return items;\n    }\n  }, {\n    key: \"_computeLabelItems\",\n    value: function _computeLabelItems(chartArea) {\n      var axis = this.axis;\n      var options = this.options;\n      var position = options.position,\n        optionTicks = options.ticks;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var align = optionTicks.align,\n        crossAlign = optionTicks.crossAlign,\n        padding = optionTicks.padding,\n        mirror = optionTicks.mirror;\n      var tl = getTickMarkLength(options.grid);\n      var tickAndPadding = tl + padding;\n      var hTickAndPadding = mirror ? -padding : tickAndPadding;\n      var rotation = -toRadians(this.labelRotation);\n      var items = [];\n      var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n      var textBaseline = 'middle';\n      if (position === 'top') {\n        y = this.bottom - hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'bottom') {\n        y = this.top + hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'left') {\n        var ret = this._getYAxisLabelAlignment(tl);\n        textAlign = ret.textAlign;\n        x = ret.x;\n      } else if (position === 'right') {\n        var _ret = this._getYAxisLabelAlignment(tl);\n        textAlign = _ret.textAlign;\n        x = _ret.x;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n        }\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n        } else if (isObject(position)) {\n          var _positionAxisID3 = Object.keys(position)[0];\n          var _value3 = position[_positionAxisID3];\n          x = this.chart.scales[_positionAxisID3].getPixelForValue(_value3);\n        }\n        textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n      }\n      if (axis === 'y') {\n        if (align === 'start') {\n          textBaseline = 'top';\n        } else if (align === 'end') {\n          textBaseline = 'bottom';\n        }\n      }\n      var labelSizes = this._getLabelSizes();\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        label = tick.label;\n        var optsAtIndex = optionTicks.setContext(this.getContext(i));\n        pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n        font = this._resolveTickFontOptions(i);\n        lineHeight = font.lineHeight;\n        lineCount = isArray(label) ? label.length : 1;\n        var halfCount = lineCount / 2;\n        var color = optsAtIndex.color;\n        var strokeColor = optsAtIndex.textStrokeColor;\n        var strokeWidth = optsAtIndex.textStrokeWidth;\n        var tickTextAlign = textAlign;\n        if (isHorizontal) {\n          x = pixel;\n          if (textAlign === 'inner') {\n            if (i === ilen - 1) {\n              tickTextAlign = !this.options.reverse ? 'right' : 'left';\n            } else if (i === 0) {\n              tickTextAlign = !this.options.reverse ? 'left' : 'right';\n            } else {\n              tickTextAlign = 'center';\n            }\n          }\n          if (position === 'top') {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = -lineCount * lineHeight + lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n            } else {\n              textOffset = -labelSizes.highest.height + lineHeight / 2;\n            }\n          } else {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n            } else {\n              textOffset = labelSizes.highest.height - lineCount * lineHeight;\n            }\n          }\n          if (mirror) {\n            textOffset *= -1;\n          }\n          if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n            x += lineHeight / 2 * Math.sin(rotation);\n          }\n        } else {\n          y = pixel;\n          textOffset = (1 - lineCount) * lineHeight / 2;\n        }\n        var backdrop = void 0;\n        if (optsAtIndex.showLabelBackdrop) {\n          var labelPadding = toPadding(optsAtIndex.backdropPadding);\n          var height = labelSizes.heights[i];\n          var width = labelSizes.widths[i];\n          var top = textOffset - labelPadding.top;\n          var left = 0 - labelPadding.left;\n          switch (textBaseline) {\n            case 'middle':\n              top -= height / 2;\n              break;\n            case 'bottom':\n              top -= height;\n              break;\n          }\n          switch (textAlign) {\n            case 'center':\n              left -= width / 2;\n              break;\n            case 'right':\n              left -= width;\n              break;\n          }\n          backdrop = {\n            left: left,\n            top: top,\n            width: width + labelPadding.width,\n            height: height + labelPadding.height,\n            color: optsAtIndex.backdropColor\n          };\n        }\n        items.push({\n          label: label,\n          font: font,\n          textOffset: textOffset,\n          options: {\n            rotation: rotation,\n            color: color,\n            strokeColor: strokeColor,\n            strokeWidth: strokeWidth,\n            textAlign: tickTextAlign,\n            textBaseline: textBaseline,\n            translation: [x, y],\n            backdrop: backdrop\n          }\n        });\n      }\n      return items;\n    }\n  }, {\n    key: \"_getXAxisLabelAlignment\",\n    value: function _getXAxisLabelAlignment() {\n      var _this$options8 = this.options,\n        position = _this$options8.position,\n        ticks = _this$options8.ticks;\n      var rotation = -toRadians(this.labelRotation);\n      if (rotation) {\n        return position === 'top' ? 'left' : 'right';\n      }\n      var align = 'center';\n      if (ticks.align === 'start') {\n        align = 'left';\n      } else if (ticks.align === 'end') {\n        align = 'right';\n      } else if (ticks.align === 'inner') {\n        align = 'inner';\n      }\n      return align;\n    }\n  }, {\n    key: \"_getYAxisLabelAlignment\",\n    value: function _getYAxisLabelAlignment(tl) {\n      var _this$options9 = this.options,\n        position = _this$options9.position,\n        _this$options9$ticks = _this$options9.ticks,\n        crossAlign = _this$options9$ticks.crossAlign,\n        mirror = _this$options9$ticks.mirror,\n        padding = _this$options9$ticks.padding;\n      var labelSizes = this._getLabelSizes();\n      var tickAndPadding = tl + padding;\n      var widest = labelSizes.widest.width;\n      var textAlign;\n      var x;\n      if (position === 'left') {\n        if (mirror) {\n          x = this.right + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x += widest;\n          }\n        } else {\n          x = this.right - tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x = this.left;\n          }\n        }\n      } else if (position === 'right') {\n        if (mirror) {\n          x = this.left + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x -= widest;\n          }\n        } else {\n          x = this.left + tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x = this.right;\n          }\n        }\n      } else {\n        textAlign = 'right';\n      }\n      return {\n        textAlign: textAlign,\n        x: x\n      };\n    }\n  }, {\n    key: \"_computeLabelArea\",\n    value: function _computeLabelArea() {\n      if (this.options.ticks.mirror) {\n        return;\n      }\n      var chart = this.chart;\n      var position = this.options.position;\n      if (position === 'left' || position === 'right') {\n        return {\n          top: 0,\n          left: this.left,\n          bottom: chart.height,\n          right: this.right\n        };\n      }\n      if (position === 'top' || position === 'bottom') {\n        return {\n          top: this.top,\n          left: 0,\n          bottom: this.bottom,\n          right: chart.width\n        };\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var ctx = this.ctx,\n        backgroundColor = this.options.backgroundColor,\n        left = this.left,\n        top = this.top,\n        width = this.width,\n        height = this.height;\n      if (backgroundColor) {\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(left, top, width, height);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getLineWidthForValue\",\n    value: function getLineWidthForValue(value) {\n      var grid = this.options.grid;\n      if (!this._isVisible() || !grid.display) {\n        return 0;\n      }\n      var ticks = this.ticks;\n      var index = ticks.findIndex(function (t) {\n        return t.value === value;\n      });\n      if (index >= 0) {\n        var opts = grid.setContext(this.getContext(index));\n        return opts.lineWidth;\n      }\n      return 0;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid(chartArea) {\n      var grid = this.options.grid;\n      var ctx = this.ctx;\n      var items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n      var i, ilen;\n      var drawLine = function drawLine(p1, p2, style) {\n        if (!style.width || !style.color) {\n          return;\n        }\n        ctx.save();\n        ctx.lineWidth = style.width;\n        ctx.strokeStyle = style.color;\n        ctx.setLineDash(style.borderDash || []);\n        ctx.lineDashOffset = style.borderDashOffset;\n        ctx.beginPath();\n        ctx.moveTo(p1.x, p1.y);\n        ctx.lineTo(p2.x, p2.y);\n        ctx.stroke();\n        ctx.restore();\n      };\n      if (grid.display) {\n        for (i = 0, ilen = items.length; i < ilen; ++i) {\n          var item = items[i];\n          if (grid.drawOnChartArea) {\n            drawLine({\n              x: item.x1,\n              y: item.y1\n            }, {\n              x: item.x2,\n              y: item.y2\n            }, item);\n          }\n          if (grid.drawTicks) {\n            drawLine({\n              x: item.tx1,\n              y: item.ty1\n            }, {\n              x: item.tx2,\n              y: item.ty2\n            }, {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {\n      var chart = this.chart,\n        ctx = this.ctx,\n        _this$options10 = this.options,\n        border = _this$options10.border,\n        grid = _this$options10.grid;\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = border.display ? borderOpts.width : 0;\n      if (!axisWidth) {\n        return;\n      }\n      var lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n      var borderValue = this._borderValue;\n      var x1, x2, y1, y2;\n      if (this.isHorizontal()) {\n        x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n        x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n        y1 = y2 = borderValue;\n      } else {\n        y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n        y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n        x1 = x2 = borderValue;\n      }\n      ctx.save();\n      ctx.lineWidth = borderOpts.width;\n      ctx.strokeStyle = borderOpts.color;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels(chartArea) {\n      var optionTicks = this.options.ticks;\n      if (!optionTicks.display) {\n        return;\n      }\n      var ctx = this.ctx;\n      var area = this._computeLabelArea();\n      if (area) {\n        clipArea(ctx, area);\n      }\n      var items = this.getLabelItems(chartArea);\n      var _iterator10 = _createForOfIteratorHelper(items),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var item = _step10.value;\n          var renderTextOptions = item.options;\n          var tickFont = item.font;\n          var label = item.label;\n          var y = item.textOffset;\n          renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      if (area) {\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var ctx = this.ctx,\n        _this$options11 = this.options,\n        position = _this$options11.position,\n        title = _this$options11.title,\n        reverse = _this$options11.reverse;\n      if (!title.display) {\n        return;\n      }\n      var font = toFont(title.font);\n      var padding = toPadding(title.padding);\n      var align = title.align;\n      var offset = font.lineHeight / 2;\n      if (position === 'bottom' || position === 'center' || isObject(position)) {\n        offset += padding.bottom;\n        if (isArray(title.text)) {\n          offset += font.lineHeight * (title.text.length - 1);\n        }\n      } else {\n        offset += padding.top;\n      }\n      var _titleArgs = titleArgs(this, offset, position, align),\n        titleX = _titleArgs.titleX,\n        titleY = _titleArgs.titleY,\n        maxWidth = _titleArgs.maxWidth,\n        rotation = _titleArgs.rotation;\n      renderText(ctx, title.text, 0, 0, font, {\n        color: title.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: titleAlign(align, position, reverse),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(chartArea) {\n      if (!this._isVisible()) {\n        return;\n      }\n      this.drawBackground();\n      this.drawGrid(chartArea);\n      this.drawBorder();\n      this.drawTitle();\n      this.drawLabels(chartArea);\n    }\n  }, {\n    key: \"_layers\",\n    value: function _layers() {\n      var _this10 = this;\n      var opts = this.options;\n      var tz = opts.ticks && opts.ticks.z || 0;\n      var gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n      var bz = valueOrDefault(opts.border && opts.border.z, 0);\n      if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n        return [{\n          z: tz,\n          draw: function draw(chartArea) {\n            _this10.draw(chartArea);\n          }\n        }];\n      }\n      return [{\n        z: gz,\n        draw: function draw(chartArea) {\n          _this10.drawBackground();\n          _this10.drawGrid(chartArea);\n          _this10.drawTitle();\n        }\n      }, {\n        z: bz,\n        draw: function draw() {\n          _this10.drawBorder();\n        }\n      }, {\n        z: tz,\n        draw: function draw(chartArea) {\n          _this10.drawLabels(chartArea);\n        }\n      }];\n    }\n  }, {\n    key: \"getMatchingVisibleMetas\",\n    value: function getMatchingVisibleMetas(type) {\n      var metas = this.chart.getSortedVisibleDatasetMetas();\n      var axisID = this.axis + 'AxisID';\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        var meta = metas[i];\n        if (meta[axisID] === this.id && (!type || meta.type === type)) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"_resolveTickFontOptions\",\n    value: function _resolveTickFontOptions(index) {\n      var opts = this.options.ticks.setContext(this.getContext(index));\n      return toFont(opts.font);\n    }\n  }, {\n    key: \"_maxDigits\",\n    value: function _maxDigits() {\n      var fontSize = this._resolveTickFontOptions(0).lineHeight;\n      return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n  }]);\n  return Scale;\n}(Element);\nvar TypedRegistry = /*#__PURE__*/function () {\n  function TypedRegistry(type, scope, override) {\n    _classCallCheck(this, TypedRegistry);\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  _createClass(TypedRegistry, [{\n    key: \"isForType\",\n    value: function isForType(type) {\n      return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n  }, {\n    key: \"register\",\n    value: function register(item) {\n      var proto = Object.getPrototypeOf(item);\n      var parentScope;\n      if (isIChartComponent(proto)) {\n        parentScope = this.register(proto);\n      }\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope + '.' + id;\n      if (!id) {\n        throw new Error('class does not have id: ' + item);\n      }\n      if (id in items) {\n        return scope;\n      }\n      items[id] = item;\n      registerDefaults(item, scope, parentScope);\n      if (this.override) {\n        defaults.override(item.id, item.overrides);\n      }\n      return scope;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this.items[id];\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(item) {\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope;\n      if (id in items) {\n        delete items[id];\n      }\n      if (scope && id in defaults[scope]) {\n        delete defaults[scope][id];\n        if (this.override) {\n          delete overrides[id];\n        }\n      }\n    }\n  }]);\n  return TypedRegistry;\n}();\nfunction registerDefaults(item, scope, parentScope) {\n  var itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(function (property) {\n    var propertyParts = property.split('.');\n    var sourceName = propertyParts.pop();\n    var sourceScope = [scope].concat(propertyParts).join('.');\n    var parts = routes[property].split('.');\n    var targetName = parts.pop();\n    var targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nvar Registry = /*#__PURE__*/function () {\n  function Registry() {\n    _classCallCheck(this, Registry);\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  _createClass(Registry, [{\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      this._each('register', args);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this._each('unregister', args);\n    }\n  }, {\n    key: \"addControllers\",\n    value: function addControllers() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this._each('register', args, this.controllers);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      this._each('register', args, this.elements);\n    }\n  }, {\n    key: \"addPlugins\",\n    value: function addPlugins() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this._each('register', args, this.plugins);\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      this._each('register', args, this.scales);\n    }\n  }, {\n    key: \"getController\",\n    value: function getController(id) {\n      return this._get(id, this.controllers, 'controller');\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(id) {\n      return this._get(id, this.elements, 'element');\n    }\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(id) {\n      return this._get(id, this.plugins, 'plugin');\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale(id) {\n      return this._get(id, this.scales, 'scale');\n    }\n  }, {\n    key: \"removeControllers\",\n    value: function removeControllers() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      this._each('unregister', args, this.controllers);\n    }\n  }, {\n    key: \"removeElements\",\n    value: function removeElements() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      this._each('unregister', args, this.elements);\n    }\n  }, {\n    key: \"removePlugins\",\n    value: function removePlugins() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      this._each('unregister', args, this.plugins);\n    }\n  }, {\n    key: \"removeScales\",\n    value: function removeScales() {\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      this._each('unregister', args, this.scales);\n    }\n  }, {\n    key: \"_each\",\n    value: function _each(method, args, typedRegistry) {\n      var _this11 = this;\n      _toConsumableArray(args).forEach(function (arg) {\n        var reg = typedRegistry || _this11._getRegistryForType(arg);\n        if (typedRegistry || reg.isForType(arg) || reg === _this11.plugins && arg.id) {\n          _this11._exec(method, reg, arg);\n        } else {\n          each(arg, function (item) {\n            var itemReg = typedRegistry || _this11._getRegistryForType(item);\n            _this11._exec(method, itemReg, item);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_exec\",\n    value: function _exec(method, registry, component) {\n      var camelMethod = _capitalize(method);\n      callback(component['before' + camelMethod], [], component);\n      registry[method](component);\n      callback(component['after' + camelMethod], [], component);\n    }\n  }, {\n    key: \"_getRegistryForType\",\n    value: function _getRegistryForType(type) {\n      for (var i = 0; i < this._typedRegistries.length; i++) {\n        var reg = this._typedRegistries[i];\n        if (reg.isForType(type)) {\n          return reg;\n        }\n      }\n      return this.plugins;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(id, typedRegistry, type) {\n      var item = typedRegistry.get(id);\n      if (item === undefined) {\n        throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n      }\n      return item;\n    }\n  }]);\n  return Registry;\n}();\nvar registry = /* #__PURE__ */new Registry();\nvar PluginService = /*#__PURE__*/function () {\n  function PluginService() {\n    _classCallCheck(this, PluginService);\n    this._init = [];\n  }\n  _createClass(PluginService, [{\n    key: \"notify\",\n    value: function notify(chart, hook, args, filter) {\n      if (hook === 'beforeInit') {\n        this._init = this._createDescriptors(chart, true);\n        this._notify(this._init, chart, 'install');\n      }\n      var descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n      var result = this._notify(descriptors, chart, hook, args);\n      if (hook === 'afterDestroy') {\n        this._notify(descriptors, chart, 'stop');\n        this._notify(this._init, chart, 'uninstall');\n      }\n      return result;\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(descriptors, chart, hook, args) {\n      args = args || {};\n      var _iterator11 = _createForOfIteratorHelper(descriptors),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var descriptor = _step11.value;\n          var plugin = descriptor.plugin;\n          var method = plugin[hook];\n          var params = [chart, args, descriptor.options];\n          if (callback(method, params, plugin) === false && args.cancelable) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return true;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!isNullOrUndef(this._cache)) {\n        this._oldCache = this._cache;\n        this._cache = undefined;\n      }\n    }\n  }, {\n    key: \"_descriptors\",\n    value: function _descriptors(chart) {\n      if (this._cache) {\n        return this._cache;\n      }\n      var descriptors = this._cache = this._createDescriptors(chart);\n      this._notifyStateChanges(chart);\n      return descriptors;\n    }\n  }, {\n    key: \"_createDescriptors\",\n    value: function _createDescriptors(chart, all) {\n      var config = chart && chart.config;\n      var options = valueOrDefault(config.options && config.options.plugins, {});\n      var plugins = allPlugins(config);\n      return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n  }, {\n    key: \"_notifyStateChanges\",\n    value: function _notifyStateChanges(chart) {\n      var previousDescriptors = this._oldCache || [];\n      var descriptors = this._cache;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.plugin.id === y.plugin.id;\n          });\n        });\n      };\n      this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n      this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n  }]);\n  return PluginService;\n}();\nfunction allPlugins(config) {\n  var localIds = {};\n  var plugins = [];\n  var keys = Object.keys(registry.plugins.items);\n  for (var i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  var local = config.plugins || [];\n  for (var _i2 = 0; _i2 < local.length; _i2++) {\n    var plugin = local[_i2];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins: plugins,\n    localIds: localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  var plugins = _ref2.plugins,\n    localIds = _ref2.localIds;\n  var result = [];\n  var context = chart.getContext();\n  var _iterator12 = _createForOfIteratorHelper(plugins),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var plugin = _step12.value;\n      var id = plugin.id;\n      var opts = getOpts(options[id], all);\n      if (opts === null) {\n        continue;\n      }\n      result.push({\n        plugin: plugin,\n        options: pluginOpts(chart.config, {\n          plugin: plugin,\n          local: localIds[id]\n        }, opts, context)\n      });\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  var plugin = _ref3.plugin,\n    local = _ref3.local;\n  var keys = config.pluginScopeKeys(plugin);\n  var scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  var datasetDefaults = defaults.datasets[type] || {};\n  var datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  var axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n  for (var _i3 = 0, _scaleOptions = scaleOptions; _i3 < _scaleOptions.length; _i3++) {\n    var opts = _scaleOptions[_i3];\n    var axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(\"Cannot determine type of '\".concat(id, \"' axis. Please provide 'axis' or 'position' option.\"));\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis: axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    var boundDs = config.data.datasets.filter(function (d) {\n      return d.xAxisID === id || d.yAxisID === id;\n    });\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  var chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  var configScales = options.scales || {};\n  var chartIndexAxis = getIndexAxis(config.type, options);\n  var scales = Object.create(null);\n  Object.keys(configScales).forEach(function (id) {\n    var scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(\"Invalid scale configuration for scale: \".concat(id));\n    }\n    if (scaleConf._proxy) {\n      return console.warn(\"Ignoring resolver passed as options for scale: \".concat(id));\n    }\n    var axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    var defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    var defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis: axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(function (dataset) {\n    var type = dataset.type || config.type;\n    var indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    var datasetDefaults = overrides[type] || {};\n    var defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(function (defaultID) {\n      var axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      var id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis: axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(function (key) {\n    var scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  var options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nvar keyCache = new Map();\nvar keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  var keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nvar addIfFound = function addIfFound(set, obj, key) {\n  var opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nvar Config = /*#__PURE__*/function () {\n  function Config(config) {\n    _classCallCheck(this, Config);\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  _createClass(Config, [{\n    key: \"platform\",\n    get: function get() {\n      return this._config.platform;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._config.type;\n    },\n    set: function set(type) {\n      this._config.type = type;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._config.data;\n    },\n    set: function set(data) {\n      this._config.data = initData(data);\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._config.options;\n    },\n    set: function set(options) {\n      this._config.options = options;\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this._config.plugins;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var config = this._config;\n      this.clearCache();\n      initOptions(config);\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._scopeCache.clear();\n      this._resolverCache.clear();\n    }\n  }, {\n    key: \"datasetScopeKeys\",\n    value: function datasetScopeKeys(datasetType) {\n      return cachedKeys(datasetType, function () {\n        return [[\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetAnimationScopeKeys\",\n    value: function datasetAnimationScopeKeys(datasetType, transition) {\n      return cachedKeys(\"\".concat(datasetType, \".transition.\").concat(transition), function () {\n        return [[\"datasets.\".concat(datasetType, \".transitions.\").concat(transition), \"transitions.\".concat(transition)], [\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetElementScopeKeys\",\n    value: function datasetElementScopeKeys(datasetType, elementType) {\n      return cachedKeys(\"\".concat(datasetType, \"-\").concat(elementType), function () {\n        return [[\"datasets.\".concat(datasetType, \".elements.\").concat(elementType), \"datasets.\".concat(datasetType), \"elements.\".concat(elementType), '']];\n      });\n    }\n  }, {\n    key: \"pluginScopeKeys\",\n    value: function pluginScopeKeys(plugin) {\n      var id = plugin.id;\n      var type = this.type;\n      return cachedKeys(\"\".concat(type, \"-plugin-\").concat(id), function () {\n        return [[\"plugins.\".concat(id)].concat(_toConsumableArray(plugin.additionalOptionScopes || []))];\n      });\n    }\n  }, {\n    key: \"_cachedScopes\",\n    value: function _cachedScopes(mainScope, resetCache) {\n      var _scopeCache = this._scopeCache;\n      var cache = _scopeCache.get(mainScope);\n      if (!cache || resetCache) {\n        cache = new Map();\n        _scopeCache.set(mainScope, cache);\n      }\n      return cache;\n    }\n  }, {\n    key: \"getOptionScopes\",\n    value: function getOptionScopes(mainScope, keyLists, resetCache) {\n      var options = this.options,\n        type = this.type;\n      var cache = this._cachedScopes(mainScope, resetCache);\n      var cached = cache.get(keyLists);\n      if (cached) {\n        return cached;\n      }\n      var scopes = new Set();\n      keyLists.forEach(function (keys) {\n        if (mainScope) {\n          scopes.add(mainScope);\n          keys.forEach(function (key) {\n            return addIfFound(scopes, mainScope, key);\n          });\n        }\n        keys.forEach(function (key) {\n          return addIfFound(scopes, options, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, overrides[type] || {}, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, defaults, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, descriptors, key);\n        });\n      });\n      var array = Array.from(scopes);\n      if (array.length === 0) {\n        array.push(Object.create(null));\n      }\n      if (keysCached.has(keyLists)) {\n        cache.set(keyLists, array);\n      }\n      return array;\n    }\n  }, {\n    key: \"chartOptionScopes\",\n    value: function chartOptionScopes() {\n      var options = this.options,\n        type = this.type;\n      return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n        type: type\n      }, defaults, descriptors];\n    }\n  }, {\n    key: \"resolveNamedOptions\",\n    value: function resolveNamedOptions(scopes, names, context) {\n      var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n      var result = {\n        $shared: true\n      };\n      var _getResolver = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver.resolver,\n        subPrefixes = _getResolver.subPrefixes;\n      var options = resolver;\n      if (needContext(resolver, names)) {\n        result.$shared = false;\n        context = isFunction(context) ? context() : context;\n        var subResolver = this.createResolver(scopes, context, subPrefixes);\n        options = _attachContext(resolver, context, subResolver);\n      }\n      var _iterator13 = _createForOfIteratorHelper(names),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var prop = _step13.value;\n          result[prop] = options[prop];\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"createResolver\",\n    value: function createResolver(scopes, context) {\n      var prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n      var descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n      var _getResolver2 = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver2.resolver;\n      return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n  }]);\n  return Config;\n}();\nfunction getResolver(resolverCache, scopes, prefixes) {\n  var cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  var cacheKey = prefixes.join();\n  var cached = cache.get(cacheKey);\n  if (!cached) {\n    var resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver: resolver,\n      subPrefixes: prefixes.filter(function (p) {\n        return !p.toLowerCase().includes('hover');\n      })\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nvar hasFunction = function hasFunction(value) {\n  return isObject(value) && Object.getOwnPropertyNames(value).reduce(function (acc, key) {\n    return acc || isFunction(value[key]);\n  }, false);\n};\nfunction needContext(proxy, names) {\n  var _descriptors2 = _descriptors(proxy),\n    isScriptable = _descriptors2.isScriptable,\n    isIndexable = _descriptors2.isIndexable;\n  var _iterator14 = _createForOfIteratorHelper(names),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var prop = _step14.value;\n      var scriptable = isScriptable(prop);\n      var indexable = isIndexable(prop);\n      var value = (indexable || scriptable) && proxy[prop];\n      if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return false;\n}\nvar version = \"4.3.0\";\nvar KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nvar instances = {};\nvar getChart = function getChart(key) {\n  var canvas = getCanvas(key);\n  return Object.values(instances).filter(function (c) {\n    return c.canvas === canvas;\n  }).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  var keys = Object.keys(obj);\n  for (var _i4 = 0, _keys = keys; _i4 < _keys.length; _i4++) {\n    var key = _keys[_i4];\n    var intKey = +key;\n    if (intKey >= start) {\n      var value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getDatasetArea(meta) {\n  var xScale = meta.xScale,\n    yScale = meta.yScale;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\nvar Chart = /*#__PURE__*/function () {\n  function Chart(item, userConfig) {\n    var _this12 = this;\n    _classCallCheck(this, Chart);\n    var config = this.config = new Config(userConfig);\n    var initialCanvas = getCanvas(item);\n    var existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    var options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    var context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    var canvas = context && context.canvas;\n    var height = canvas && canvas.height;\n    var width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(function (mode) {\n      return _this12.update(mode);\n    }, options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  _createClass(Chart, [{\n    key: \"aspectRatio\",\n    get: function get() {\n      var _this$options12 = this.options,\n        aspectRatio = _this$options12.aspectRatio,\n        maintainAspectRatio = _this$options12.maintainAspectRatio,\n        width = this.width,\n        height = this.height,\n        _aspectRatio = this._aspectRatio;\n      if (!isNullOrUndef(aspectRatio)) {\n        return aspectRatio;\n      }\n      if (maintainAspectRatio && _aspectRatio) {\n        return _aspectRatio;\n      }\n      return height ? width / height : null;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.config.data;\n    },\n    set: function set(data) {\n      this.config.data = data;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    },\n    set: function set(options) {\n      this.config.options = options;\n    }\n  }, {\n    key: \"registry\",\n    get: function get() {\n      return registry;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      this.notifyPlugins('beforeInit');\n      if (this.options.responsive) {\n        this.resize();\n      } else {\n        retinaScale(this, this.options.devicePixelRatio);\n      }\n      this.bindEvents();\n      this.notifyPlugins('afterInit');\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      clearCanvas(this.canvas, this.ctx);\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      animator.stop(this);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (!animator.running(this)) {\n        this._resize(width, height);\n      } else {\n        this._resizeBeforeDraw = {\n          width: width,\n          height: height\n        };\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(width, height) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n      var newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n      var newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n      var mode = this.width ? 'resize' : 'attach';\n      this.width = newSize.width;\n      this.height = newSize.height;\n      this._aspectRatio = this.aspectRatio;\n      if (!retinaScale(this, newRatio, true)) {\n        return;\n      }\n      this.notifyPlugins('resize', {\n        size: newSize\n      });\n      callback(options.onResize, [this, newSize], this);\n      if (this.attached) {\n        if (this._doResize(mode)) {\n          this.render();\n        }\n      }\n    }\n  }, {\n    key: \"ensureScalesHaveIDs\",\n    value: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      each(scalesOptions, function (axisOptions, axisID) {\n        axisOptions.id = axisID;\n      });\n    }\n  }, {\n    key: \"buildOrUpdateScales\",\n    value: function buildOrUpdateScales() {\n      var _this13 = this;\n      var options = this.options;\n      var scaleOpts = options.scales;\n      var scales = this.scales;\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n      var items = [];\n      if (scaleOpts) {\n        items = items.concat(Object.keys(scaleOpts).map(function (id) {\n          var scaleOptions = scaleOpts[id];\n          var axis = determineAxis(id, scaleOptions);\n          var isRadial = axis === 'r';\n          var isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        }));\n      }\n      each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var axis = determineAxis(id, scaleOptions);\n        var scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n        if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n        updated[id] = true;\n        var scale = null;\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n        } else {\n          var scaleClass = registry.getScale(scaleType);\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            ctx: _this13.ctx,\n            chart: _this13\n          });\n          scales[scale.id] = scale;\n        }\n        scale.init(scaleOptions, options);\n      });\n      each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      each(scales, function (scale) {\n        layouts.configure(_this13, scale, scale.options);\n        layouts.addBox(_this13, scale);\n      });\n    }\n  }, {\n    key: \"_updateMetasets\",\n    value: function _updateMetasets() {\n      var metasets = this._metasets;\n      var numData = this.data.datasets.length;\n      var numMeta = metasets.length;\n      metasets.sort(function (a, b) {\n        return a.index - b.index;\n      });\n      if (numMeta > numData) {\n        for (var i = numData; i < numMeta; ++i) {\n          this._destroyDatasetMeta(i);\n        }\n        metasets.splice(numData, numMeta - numData);\n      }\n      this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n  }, {\n    key: \"_removeUnreferencedMetasets\",\n    value: function _removeUnreferencedMetasets() {\n      var _this14 = this;\n      var metasets = this._metasets,\n        datasets = this.data.datasets;\n      if (metasets.length > datasets.length) {\n        delete this._stacks;\n      }\n      metasets.forEach(function (meta, index) {\n        if (datasets.filter(function (x) {\n          return x === meta._dataset;\n        }).length === 0) {\n          _this14._destroyDatasetMeta(index);\n        }\n      });\n    }\n  }, {\n    key: \"buildOrUpdateControllers\",\n    value: function buildOrUpdateControllers() {\n      var newControllers = [];\n      var datasets = this.data.datasets;\n      var i, ilen;\n      this._removeUnreferencedMetasets();\n      for (i = 0, ilen = datasets.length; i < ilen; i++) {\n        var dataset = datasets[i];\n        var meta = this.getDatasetMeta(i);\n        var type = dataset.type || this.config.type;\n        if (meta.type && meta.type !== type) {\n          this._destroyDatasetMeta(i);\n          meta = this.getDatasetMeta(i);\n        }\n        meta.type = type;\n        meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n        meta.order = dataset.order || 0;\n        meta.index = i;\n        meta.label = '' + dataset.label;\n        meta.visible = this.isDatasetVisible(i);\n        if (meta.controller) {\n          meta.controller.updateIndex(i);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = registry.getController(type);\n          var _defaults$datasets$ty = defaults.datasets[type],\n            datasetElementType = _defaults$datasets$ty.datasetElementType,\n            dataElementType = _defaults$datasets$ty.dataElementType;\n          Object.assign(ControllerClass, {\n            dataElementType: registry.getElement(dataElementType),\n            datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n          });\n          meta.controller = new ControllerClass(this, i);\n          newControllers.push(meta.controller);\n        }\n      }\n      this._updateMetasets();\n      return newControllers;\n    }\n  }, {\n    key: \"_resetElements\",\n    value: function _resetElements() {\n      var _this15 = this;\n      each(this.data.datasets, function (dataset, datasetIndex) {\n        _this15.getDatasetMeta(datasetIndex).controller.reset();\n      }, this);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._resetElements();\n      this.notifyPlugins('reset');\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var config = this.config;\n      config.update();\n      var options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n      var animsDisabled = this._animationsDisabled = !options.animation;\n      this._updateScales();\n      this._checkEventBindings();\n      this._updateHiddenIndices();\n      this._plugins.invalidate();\n      if (this.notifyPlugins('beforeUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var newControllers = this.buildOrUpdateControllers();\n      this.notifyPlugins('beforeElementsUpdate');\n      var minPadding = 0;\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n        var _this$getDatasetMeta = this.getDatasetMeta(i),\n          controller = _this$getDatasetMeta.controller;\n        var reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n        controller.buildOrUpdateElements(reset);\n        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n      }\n      minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n      this._updateLayout(minPadding);\n      if (!animsDisabled) {\n        each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n      this._updateDatasets(mode);\n      this.notifyPlugins('afterUpdate', {\n        mode: mode\n      });\n      this._layers.sort(compare2Level('z', '_idx'));\n      var _active = this._active,\n        _lastEvent = this._lastEvent;\n      if (_lastEvent) {\n        this._eventHandler(_lastEvent, true);\n      } else if (_active.length) {\n        this._updateHoverStyles(_active, _active, true);\n      }\n      this.render();\n    }\n  }, {\n    key: \"_updateScales\",\n    value: function _updateScales() {\n      var _this16 = this;\n      each(this.scales, function (scale) {\n        layouts.removeBox(_this16, scale);\n      });\n      this.ensureScalesHaveIDs();\n      this.buildOrUpdateScales();\n    }\n  }, {\n    key: \"_checkEventBindings\",\n    value: function _checkEventBindings() {\n      var options = this.options;\n      var existingEvents = new Set(Object.keys(this._listeners));\n      var newEvents = new Set(options.events);\n      if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n        this.unbindEvents();\n        this.bindEvents();\n      }\n    }\n  }, {\n    key: \"_updateHiddenIndices\",\n    value: function _updateHiddenIndices() {\n      var _hiddenIndices = this._hiddenIndices;\n      var changes = this._getUniformDataChanges() || [];\n      var _iterator15 = _createForOfIteratorHelper(changes),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _step15$value = _step15.value,\n            method = _step15$value.method,\n            start = _step15$value.start,\n            count = _step15$value.count;\n          var move = method === '_removeElements' ? -count : count;\n          moveNumericKeys(_hiddenIndices, start, move);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n    }\n  }, {\n    key: \"_getUniformDataChanges\",\n    value: function _getUniformDataChanges() {\n      var _dataChanges = this._dataChanges;\n      if (!_dataChanges || !_dataChanges.length) {\n        return;\n      }\n      this._dataChanges = [];\n      var datasetCount = this.data.datasets.length;\n      var makeSet = function makeSet(idx) {\n        return new Set(_dataChanges.filter(function (c) {\n          return c[0] === idx;\n        }).map(function (c, i) {\n          return i + ',' + c.splice(1).join(',');\n        }));\n      };\n      var changeSet = makeSet(0);\n      for (var i = 1; i < datasetCount; i++) {\n        if (!setsEqual(changeSet, makeSet(i))) {\n          return;\n        }\n      }\n      return Array.from(changeSet).map(function (c) {\n        return c.split(',');\n      }).map(function (a) {\n        return {\n          method: a[1],\n          start: +a[2],\n          count: +a[3]\n        };\n      });\n    }\n  }, {\n    key: \"_updateLayout\",\n    value: function _updateLayout(minPadding) {\n      var _this17 = this;\n      if (this.notifyPlugins('beforeLayout', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      layouts.update(this, this.width, this.height, minPadding);\n      var area = this.chartArea;\n      var noArea = area.width <= 0 || area.height <= 0;\n      this._layers = [];\n      each(this.boxes, function (box) {\n        var _this17$_layers;\n        if (noArea && box.position === 'chartArea') {\n          return;\n        }\n        if (box.configure) {\n          box.configure();\n        }\n        (_this17$_layers = _this17._layers).push.apply(_this17$_layers, _toConsumableArray(box._layers()));\n      }, this);\n      this._layers.forEach(function (item, index) {\n        item._idx = index;\n      });\n      this.notifyPlugins('afterLayout');\n    }\n  }, {\n    key: \"_updateDatasets\",\n    value: function _updateDatasets(mode) {\n      if (this.notifyPlugins('beforeDatasetsUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this.getDatasetMeta(i).controller.configure();\n      }\n      for (var _i5 = 0, _ilen = this.data.datasets.length; _i5 < _ilen; ++_i5) {\n        this._updateDataset(_i5, isFunction(mode) ? mode({\n          datasetIndex: _i5\n        }) : mode);\n      }\n      this.notifyPlugins('afterDatasetsUpdate', {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"_updateDataset\",\n    value: function _updateDataset(index, mode) {\n      var meta = this.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        mode: mode,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n        return;\n      }\n      meta.controller._update(mode);\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetUpdate', args);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.notifyPlugins('beforeRender', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      if (animator.has(this)) {\n        if (this.attached && !animator.running(this)) {\n          animator.start(this);\n        }\n      } else {\n        this.draw();\n        onAnimationsComplete({\n          chart: this\n        });\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var i;\n      if (this._resizeBeforeDraw) {\n        var _this$_resizeBeforeDr = this._resizeBeforeDraw,\n          width = _this$_resizeBeforeDr.width,\n          height = _this$_resizeBeforeDr.height;\n        this._resize(width, height);\n        this._resizeBeforeDraw = null;\n      }\n      this.clear();\n      if (this.width <= 0 || this.height <= 0) {\n        return;\n      }\n      if (this.notifyPlugins('beforeDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var layers = this._layers;\n      for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this._drawDatasets();\n      for (; i < layers.length; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this.notifyPlugins('afterDraw');\n    }\n  }, {\n    key: \"_getSortedDatasetMetas\",\n    value: function _getSortedDatasetMetas(filterVisible) {\n      var metasets = this._sortedMetasets;\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n        var meta = metasets[i];\n        if (!filterVisible || meta.visible) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"getSortedVisibleDatasetMetas\",\n    value: function getSortedVisibleDatasetMetas() {\n      return this._getSortedDatasetMetas(true);\n    }\n  }, {\n    key: \"_drawDatasets\",\n    value: function _drawDatasets() {\n      if (this.notifyPlugins('beforeDatasetsDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var metasets = this.getSortedVisibleDatasetMetas();\n      for (var i = metasets.length - 1; i >= 0; --i) {\n        this._drawDataset(metasets[i]);\n      }\n      this.notifyPlugins('afterDatasetsDraw');\n    }\n  }, {\n    key: \"_drawDataset\",\n    value: function _drawDataset(meta) {\n      var ctx = this.ctx;\n      var clip = meta._clip;\n      var useClip = !clip.disabled;\n      var area = getDatasetArea(meta) || this.chartArea;\n      var args = {\n        meta: meta,\n        index: meta.index,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n        return;\n      }\n      if (useClip) {\n        clipArea(ctx, {\n          left: clip.left === false ? 0 : area.left - clip.left,\n          right: clip.right === false ? this.width : area.right + clip.right,\n          top: clip.top === false ? 0 : area.top - clip.top,\n          bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n        });\n      }\n      meta.controller.draw();\n      if (useClip) {\n        unclipArea(ctx);\n      }\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetDraw', args);\n    }\n  }, {\n    key: \"isPointInArea\",\n    value: function isPointInArea(point) {\n      return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n  }, {\n    key: \"getElementsAtEventForMode\",\n    value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n      var method = Interaction.modes[mode];\n      if (typeof method === 'function') {\n        return method(this, e, options, useFinalPosition);\n      }\n      return [];\n    }\n  }, {\n    key: \"getDatasetMeta\",\n    value: function getDatasetMeta(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      var metasets = this._metasets;\n      var meta = metasets.filter(function (x) {\n        return x && x._dataset === dataset;\n      }).pop();\n      if (!meta) {\n        meta = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: dataset && dataset.order || 0,\n          index: datasetIndex,\n          _dataset: dataset,\n          _parsed: [],\n          _sorted: false\n        };\n        metasets.push(meta);\n      }\n      return meta;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createContext(null, {\n        chart: this,\n        type: 'chart'\n      }));\n    }\n  }, {\n    key: \"getVisibleDatasetCount\",\n    value: function getVisibleDatasetCount() {\n      return this.getSortedVisibleDatasetMetas().length;\n    }\n  }, {\n    key: \"isDatasetVisible\",\n    value: function isDatasetVisible(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      if (!dataset) {\n        return false;\n      }\n      var meta = this.getDatasetMeta(datasetIndex);\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n  }, {\n    key: \"setDatasetVisibility\",\n    value: function setDatasetVisibility(datasetIndex, visible) {\n      var meta = this.getDatasetMeta(datasetIndex);\n      meta.hidden = !visible;\n    }\n  }, {\n    key: \"toggleDataVisibility\",\n    value: function toggleDataVisibility(index) {\n      this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"getDataVisibility\",\n    value: function getDataVisibility(index) {\n      return !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"_updateVisibility\",\n    value: function _updateVisibility(datasetIndex, dataIndex, visible) {\n      var mode = visible ? 'show' : 'hide';\n      var meta = this.getDatasetMeta(datasetIndex);\n      var anims = meta.controller._resolveAnimations(undefined, mode);\n      if (defined(dataIndex)) {\n        meta.data[dataIndex].hidden = !visible;\n        this.update();\n      } else {\n        this.setDatasetVisibility(datasetIndex, visible);\n        anims.update(meta, {\n          visible: visible\n        });\n        this.update(function (ctx) {\n          return ctx.datasetIndex === datasetIndex ? mode : undefined;\n        });\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n  }, {\n    key: \"show\",\n    value: function show(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n  }, {\n    key: \"_destroyDatasetMeta\",\n    value: function _destroyDatasetMeta(datasetIndex) {\n      var meta = this._metasets[datasetIndex];\n      if (meta && meta.controller) {\n        meta.controller._destroy();\n      }\n      delete this._metasets[datasetIndex];\n    }\n  }, {\n    key: \"_stop\",\n    value: function _stop() {\n      var i, ilen;\n      this.stop();\n      animator.remove(this);\n      for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.notifyPlugins('beforeDestroy');\n      var canvas = this.canvas,\n        ctx = this.ctx;\n      this._stop();\n      this.config.clearCache();\n      if (canvas) {\n        this.unbindEvents();\n        clearCanvas(canvas, ctx);\n        this.platform.releaseContext(ctx);\n        this.canvas = null;\n        this.ctx = null;\n      }\n      delete instances[this.id];\n      this.notifyPlugins('afterDestroy');\n    }\n  }, {\n    key: \"toBase64Image\",\n    value: function toBase64Image() {\n      var _this$canvas;\n      return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      this.bindUserEvents();\n      if (this.options.responsive) {\n        this.bindResponsiveEvents();\n      } else {\n        this.attached = true;\n      }\n    }\n  }, {\n    key: \"bindUserEvents\",\n    value: function bindUserEvents() {\n      var _this18 = this;\n      var listeners = this._listeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this18, type, listener);\n        listeners[type] = listener;\n      };\n      var listener = function listener(e, x, y) {\n        e.offsetX = x;\n        e.offsetY = y;\n        _this18._eventHandler(e);\n      };\n      each(this.options.events, function (type) {\n        return _add(type, listener);\n      });\n    }\n  }, {\n    key: \"bindResponsiveEvents\",\n    value: function bindResponsiveEvents() {\n      var _this19 = this;\n      if (!this._responsiveListeners) {\n        this._responsiveListeners = {};\n      }\n      var listeners = this._responsiveListeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this19, type, listener);\n        listeners[type] = listener;\n      };\n      var _remove = function _remove(type, listener) {\n        if (listeners[type]) {\n          platform.removeEventListener(_this19, type, listener);\n          delete listeners[type];\n        }\n      };\n      var listener = function listener(width, height) {\n        if (_this19.canvas) {\n          _this19.resize(width, height);\n        }\n      };\n      var detached;\n      var attached = function attached() {\n        _remove('attach', attached);\n        _this19.attached = true;\n        _this19.resize();\n        _add('resize', listener);\n        _add('detach', detached);\n      };\n      detached = function detached() {\n        _this19.attached = false;\n        _remove('resize', listener);\n        _this19._stop();\n        _this19._resize(0, 0);\n        _add('attach', attached);\n      };\n      if (platform.isAttached(this.canvas)) {\n        attached();\n      } else {\n        detached();\n      }\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this20 = this;\n      each(this._listeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._listeners = {};\n      each(this._responsiveListeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._responsiveListeners = undefined;\n    }\n  }, {\n    key: \"updateHoverStyle\",\n    value: function updateHoverStyle(items, mode, enabled) {\n      var prefix = enabled ? 'set' : 'remove';\n      var meta, item, i, ilen;\n      if (mode === 'dataset') {\n        meta = this.getDatasetMeta(items[0].datasetIndex);\n        meta.controller['_' + prefix + 'DatasetHoverStyle']();\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        item = items[i];\n        var controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n        if (controller) {\n          controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n        }\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements) {\n      var _this21 = this;\n      var lastActive = this._active || [];\n      var active = activeElements.map(function (_ref4) {\n        var datasetIndex = _ref4.datasetIndex,\n          index = _ref4.index;\n        var meta = _this21.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('No dataset found at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed) {\n        this._active = active;\n        this._lastEvent = null;\n        this._updateHoverStyles(active, lastActive);\n      }\n    }\n  }, {\n    key: \"notifyPlugins\",\n    value: function notifyPlugins(hook, args, filter) {\n      return this._plugins.notify(this, hook, args, filter);\n    }\n  }, {\n    key: \"isPluginEnabled\",\n    value: function isPluginEnabled(pluginId) {\n      return this._plugins._cache.filter(function (p) {\n        return p.plugin.id === pluginId;\n      }).length === 1;\n    }\n  }, {\n    key: \"_updateHoverStyles\",\n    value: function _updateHoverStyles(active, lastActive, replay) {\n      var hoverOptions = this.options.hover;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.datasetIndex === y.datasetIndex && x.index === y.index;\n          });\n        });\n      };\n      var deactivated = diff(lastActive, active);\n      var activated = replay ? active : diff(active, lastActive);\n      if (deactivated.length) {\n        this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n      }\n      if (activated.length && hoverOptions.mode) {\n        this.updateHoverStyle(activated, hoverOptions.mode, true);\n      }\n    }\n  }, {\n    key: \"_eventHandler\",\n    value: function _eventHandler(e, replay) {\n      var _this22 = this;\n      var args = {\n        event: e,\n        replay: replay,\n        cancelable: true,\n        inChartArea: this.isPointInArea(e)\n      };\n      var eventFilter = function eventFilter(plugin) {\n        return (plugin.options.events || _this22.options.events).includes(e.native.type);\n      };\n      if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n        return;\n      }\n      var changed = this._handleEvent(e, replay, args.inChartArea);\n      args.cancelable = false;\n      this.notifyPlugins('afterEvent', args, eventFilter);\n      if (changed || args.changed) {\n        this.render();\n      }\n      return this;\n    }\n  }, {\n    key: \"_handleEvent\",\n    value: function _handleEvent(e, replay, inChartArea) {\n      var _this$_active = this._active,\n        lastActive = _this$_active === void 0 ? [] : _this$_active,\n        options = this.options;\n      var useFinalPosition = replay;\n      var active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n      var isClick = _isClickEvent(e);\n      var lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n      if (inChartArea) {\n        this._lastEvent = null;\n        callback(options.onHover, [e, active, this], this);\n        if (isClick) {\n          callback(options.onClick, [e, active, this], this);\n        }\n      }\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed || replay) {\n        this._active = active;\n        this._updateHoverStyles(active, lastActive, replay);\n      }\n      this._lastEvent = lastEvent;\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive;\n      }\n      var hoverOptions = this.options.hover;\n      return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n  }], [{\n    key: \"register\",\n    value: function register() {\n      registry.add.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      registry.remove.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }]);\n  return Chart;\n}();\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, function (chart) {\n    return chart._plugins.invalidate();\n  });\n}\nfunction clipArc(ctx, element, endAngle) {\n  var startAngle = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    x = element.x,\n    y = element.y,\n    outerRadius = element.outerRadius,\n    innerRadius = element.innerRadius;\n  var angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\r\n * Parse border radius from the provided options\r\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  var o = toRadiusCorners(arc.options.borderRadius);\n  var halfThickness = (outerRadius - innerRadius) / 2;\n  var innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  var computeOuterLimit = function computeOuterLimit(val) {\n    var outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\r\n * Path the arc, respecting border radius by separating into left and right halves.\r\n *\r\n *   Start      End\r\n *\r\n *    1--->a--->2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6<---b<---5    Inner\r\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  var x = element.x,\n    y = element.y,\n    start = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    innerR = element.innerRadius;\n  var outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  var innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  var spacingOffset = 0;\n  var alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    var noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    var noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    var avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    var adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  var beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  var angleOffset = (alpha - beta) / 2;\n  var startAngle = start + angleOffset + spacingOffset;\n  var endAngle = end - angleOffset - spacingOffset;\n  var _parseBorderRadius$ = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle),\n    outerStart = _parseBorderRadius$.outerStart,\n    outerEnd = _parseBorderRadius$.outerEnd,\n    innerStart = _parseBorderRadius$.innerStart,\n    innerEnd = _parseBorderRadius$.innerEnd;\n  var outerStartAdjustedRadius = outerRadius - outerStart;\n  var outerEndAdjustedRadius = outerRadius - outerEnd;\n  var outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  var outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  var innerStartAdjustedRadius = innerRadius + innerStart;\n  var innerEndAdjustedRadius = innerRadius + innerEnd;\n  var innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  var innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    var outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      var pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    var p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      var _pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(_pCenter.x, _pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    var innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      var _pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(_pCenter2.x, _pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    var p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      var _pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(_pCenter3.x, _pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    var outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    var outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    var outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    var outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference;\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference,\n    options = element.options;\n  var borderWidth = options.borderWidth,\n    borderJoinStyle = options.borderJoinStyle,\n    borderDash = options.borderDash,\n    borderDashOffset = options.borderDashOffset;\n  var inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nvar ArcElement = /*#__PURE__*/function (_Element2) {\n  _inherits(ArcElement, _Element2);\n  var _super12 = _createSuper(ArcElement);\n  function ArcElement(cfg) {\n    var _this23;\n    _classCallCheck(this, ArcElement);\n    _this23 = _super12.call(this);\n    _defineProperty(_assertThisInitialized(_this23), \"circumference\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"endAngle\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"fullCircles\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"innerRadius\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"outerRadius\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"pixelMargin\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"startAngle\", void 0);\n    _this23.options = undefined;\n    _this23.circumference = undefined;\n    _this23.startAngle = undefined;\n    _this23.endAngle = undefined;\n    _this23.innerRadius = undefined;\n    _this23.outerRadius = undefined;\n    _this23.pixelMargin = 0;\n    _this23.fullCircles = 0;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this23), cfg);\n    }\n    return _this23;\n  }\n  _createClass(ArcElement, [{\n    key: \"inRange\",\n    value: function inRange(chartX, chartY, useFinalPosition) {\n      var point = this.getProps(['x', 'y'], useFinalPosition);\n      var _getAngleFromPoint2 = getAngleFromPoint(point, {\n          x: chartX,\n          y: chartY\n        }),\n        angle = _getAngleFromPoint2.angle,\n        distance = _getAngleFromPoint2.distance;\n      var _this$getProps2 = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),\n        startAngle = _this$getProps2.startAngle,\n        endAngle = _this$getProps2.endAngle,\n        innerRadius = _this$getProps2.innerRadius,\n        outerRadius = _this$getProps2.outerRadius,\n        circumference = _this$getProps2.circumference;\n      var rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n      var _circumference = valueOrDefault(circumference, endAngle - startAngle);\n      var betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n      var withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n      return betweenAngles && withinRadius;\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps3 = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition),\n        x = _this$getProps3.x,\n        y = _this$getProps3.y,\n        startAngle = _this$getProps3.startAngle,\n        endAngle = _this$getProps3.endAngle,\n        innerRadius = _this$getProps3.innerRadius,\n        outerRadius = _this$getProps3.outerRadius;\n      var _this$options13 = this.options,\n        offset = _this$options13.offset,\n        spacing = _this$options13.spacing;\n      var halfAngle = (startAngle + endAngle) / 2;\n      var halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n      return {\n        x: x + Math.cos(halfAngle) * halfRadius,\n        y: y + Math.sin(halfAngle) * halfRadius\n      };\n    }\n  }, {\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      return this.getCenterPoint(useFinalPosition);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options,\n        circumference = this.circumference;\n      var offset = (options.offset || 0) / 4;\n      var spacing = (options.spacing || 0) / 2;\n      var circular = options.circular;\n      this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n      this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n      if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n        return;\n      }\n      ctx.save();\n      var halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n      var fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n      var radiusOffset = offset * fix;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      drawArc(ctx, this, radiusOffset, spacing, circular);\n      drawBorder(ctx, this, radiusOffset, spacing, circular);\n      ctx.restore();\n    }\n  }]);\n  return ArcElement;\n}(Element);\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\n_defineProperty(ArcElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash';\n  }\n});\nfunction setStyle(ctx, options) {\n  var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var count = points.length;\n  var _params$start = params.start,\n    paramsStart = _params$start === void 0 ? 0 : _params$start,\n    _params$end = params.end,\n    paramsEnd = _params$end === void 0 ? count - 1 : _params$end;\n  var segmentStart = segment.start,\n    segmentEnd = segment.end;\n  var start = Math.max(paramsStart, segmentStart);\n  var end = Math.min(paramsEnd, segmentEnd);\n  var outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count: count,\n    start: start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  var points = line.points,\n    options = line.options;\n  var _pathVars = pathVars(points, segment, params),\n    count = _pathVars.count,\n    start = _pathVars.start,\n    loop = _pathVars.loop,\n    ilen = _pathVars.ilen;\n  var lineMethod = getLineMethod(options);\n  var _ref5 = params || {},\n    _ref5$move = _ref5.move,\n    move = _ref5$move === void 0 ? true : _ref5$move,\n    reverse = _ref5.reverse;\n  var i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  var points = line.points;\n  var _pathVars2 = pathVars(points, segment, params),\n    count = _pathVars2.count,\n    start = _pathVars2.start,\n    ilen = _pathVars2.ilen;\n  var _ref6 = params || {},\n    _ref6$move = _ref6.move,\n    move = _ref6$move === void 0 ? true : _ref6$move,\n    reverse = _ref6.reverse;\n  var avgX = 0;\n  var countX = 0;\n  var i, point, prevX, minY, maxY, lastY;\n  var pointIndex = function pointIndex(index) {\n    return (start + (reverse ? ilen - index : index)) % count;\n  };\n  var drawX = function drawX() {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    var x = point.x;\n    var y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  var opts = line.options;\n  var borderDash = opts.borderDash && opts.borderDash.length;\n  var useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  var path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  var segments = line.segments,\n    options = line.options;\n  var segmentMethod = _getSegmentMethod(line);\n  var _iterator16 = _createForOfIteratorHelper(segments),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var segment = _step16.value;\n      setStyle(ctx, options, segment.style);\n      ctx.beginPath();\n      if (segmentMethod(ctx, line, segment, {\n        start: start,\n        end: start + count - 1\n      })) {\n        ctx.closePath();\n      }\n      ctx.stroke();\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n}\nvar usePath2D = typeof Path2D === 'function';\nfunction _draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nvar LineElement = /*#__PURE__*/function (_Element3) {\n  _inherits(LineElement, _Element3);\n  var _super13 = _createSuper(LineElement);\n  function LineElement(cfg) {\n    var _this24;\n    _classCallCheck(this, LineElement);\n    _this24 = _super13.call(this);\n    _this24.animated = true;\n    _this24.options = undefined;\n    _this24._chart = undefined;\n    _this24._loop = undefined;\n    _this24._fullLoop = undefined;\n    _this24._path = undefined;\n    _this24._points = undefined;\n    _this24._segments = undefined;\n    _this24._decimated = false;\n    _this24._pointsUpdated = false;\n    _this24._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this24), cfg);\n    }\n    return _this24;\n  }\n  _createClass(LineElement, [{\n    key: \"updateControlPoints\",\n    value: function updateControlPoints(chartArea, indexAxis) {\n      var options = this.options;\n      if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n        var loop = options.spanGaps ? this._loop : this._fullLoop;\n        _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n        this._pointsUpdated = true;\n      }\n    }\n  }, {\n    key: \"points\",\n    get: function get() {\n      return this._points;\n    },\n    set: function set(points) {\n      this._points = points;\n      delete this._segments;\n      delete this._path;\n      this._pointsUpdated = false;\n    }\n  }, {\n    key: \"segments\",\n    get: function get() {\n      return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      var segments = this.segments;\n      var points = this.points;\n      return segments.length && points[segments[0].start];\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      var segments = this.segments;\n      var points = this.points;\n      var count = segments.length;\n      return count && points[segments[count - 1].end];\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point, property) {\n      var options = this.options;\n      var value = point[property];\n      var points = this.points;\n      var segments = _boundSegments(this, {\n        property: property,\n        start: value,\n        end: value\n      });\n      if (!segments.length) {\n        return;\n      }\n      var result = [];\n      var _interpolate = _getInterpolationMethod(options);\n      var i, ilen;\n      for (i = 0, ilen = segments.length; i < ilen; ++i) {\n        var _segments$i = segments[i],\n          start = _segments$i.start,\n          end = _segments$i.end;\n        var p1 = points[start];\n        var p2 = points[end];\n        if (p1 === p2) {\n          result.push(p1);\n          continue;\n        }\n        var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n        var interpolated = _interpolate(p1, p2, t, options.stepped);\n        interpolated[property] = point[property];\n        result.push(interpolated);\n      }\n      return result.length === 1 ? result[0] : result;\n    }\n  }, {\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, segment, params) {\n      var segmentMethod = _getSegmentMethod(this);\n      return segmentMethod(ctx, this, segment, params);\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx, start, count) {\n      var segments = this.segments;\n      var segmentMethod = _getSegmentMethod(this);\n      var loop = this._loop;\n      start = start || 0;\n      count = count || this.points.length - start;\n      var _iterator17 = _createForOfIteratorHelper(segments),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var segment = _step17.value;\n          loop &= segmentMethod(ctx, this, segment, {\n            start: start,\n            end: start + count - 1\n          });\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return !!loop;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, chartArea, start, count) {\n      var options = this.options || {};\n      var points = this.points || [];\n      if (points.length && options.borderWidth) {\n        ctx.save();\n        _draw(ctx, this, start, count);\n        ctx.restore();\n      }\n      if (this.animated) {\n        this._pointsUpdated = false;\n        this._path = undefined;\n      }\n    }\n  }]);\n  return LineElement;\n}(Element);\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash' && name !== 'fill';\n  }\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  var options = el.options;\n  var _el$getProps = el.getProps([axis], useFinalPosition),\n    value = _el$getProps[axis];\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nvar PointElement = /*#__PURE__*/function (_Element4) {\n  _inherits(PointElement, _Element4);\n  var _super14 = _createSuper(PointElement);\n  /**\r\n  * @type {any}\r\n  */\n\n  /**\r\n  * @type {any}\r\n  */\n\n  function PointElement(cfg) {\n    var _this25;\n    _classCallCheck(this, PointElement);\n    _this25 = _super14.call(this);\n    _defineProperty(_assertThisInitialized(_this25), \"parsed\", void 0);\n    _defineProperty(_assertThisInitialized(_this25), \"skip\", void 0);\n    _defineProperty(_assertThisInitialized(_this25), \"stop\", void 0);\n    _this25.options = undefined;\n    _this25.parsed = undefined;\n    _this25.skip = undefined;\n    _this25.stop = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this25), cfg);\n    }\n    return _this25;\n  }\n  _createClass(PointElement, [{\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      var options = this.options;\n      var _this$getProps4 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps4.x,\n        y = _this$getProps4.y;\n      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps5 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps5.x,\n        y = _this$getProps5.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"size\",\n    value: function size(options) {\n      options = options || this.options || {};\n      var radius = options.radius || 0;\n      radius = Math.max(radius, radius && options.hoverRadius || 0);\n      var borderWidth = radius && options.borderWidth || 0;\n      return (radius + borderWidth) * 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, area) {\n      var options = this.options;\n      if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n        return;\n      }\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.fillStyle = options.backgroundColor;\n      drawPoint(ctx, options, this.x, this.y);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var options = this.options || {};\n      // @ts-expect-error Fallbacks should never be hit in practice\n      return options.radius + options.hitRadius;\n    }\n  }]);\n  return PointElement;\n}(Element);\n_defineProperty(PointElement, \"id\", 'point');\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  var _bar$getProps = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition),\n    x = _bar$getProps.x,\n    y = _bar$getProps.y,\n    base = _bar$getProps.base,\n    width = _bar$getProps.width,\n    height = _bar$getProps.height;\n  var left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  var value = bar.options.borderWidth;\n  var skip = bar.borderSkipped;\n  var o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  var _bar$getProps2 = bar.getProps(['enableBorderRadius']),\n    enableBorderRadius = _bar$getProps2.enableBorderRadius;\n  var value = bar.options.borderRadius;\n  var o = toTRBLCorners(value);\n  var maxR = Math.min(maxW, maxH);\n  var skip = bar.borderSkipped;\n  var enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  var bounds = getBarBounds(bar);\n  var width = bounds.right - bounds.left;\n  var height = bounds.bottom - bounds.top;\n  var border = parseBorderWidth(bar, width / 2, height / 2);\n  var radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius: radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction _inRange(bar, x, y, useFinalPosition) {\n  var skipX = x === null;\n  var skipY = y === null;\n  var skipBoth = skipX && skipY;\n  var bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  var refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var x = rect.x !== refRect.x ? -amount : 0;\n  var y = rect.y !== refRect.y ? -amount : 0;\n  var w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  var h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nvar BarElement = /*#__PURE__*/function (_Element5) {\n  _inherits(BarElement, _Element5);\n  var _super15 = _createSuper(BarElement);\n  function BarElement(cfg) {\n    var _this26;\n    _classCallCheck(this, BarElement);\n    _this26 = _super15.call(this);\n    _this26.options = undefined;\n    _this26.horizontal = undefined;\n    _this26.base = undefined;\n    _this26.width = undefined;\n    _this26.height = undefined;\n    _this26.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this26), cfg);\n    }\n    return _this26;\n  }\n  _createClass(BarElement, [{\n    key: \"draw\",\n    value: function draw(ctx) {\n      var inflateAmount = this.inflateAmount,\n        _this$options14 = this.options,\n        borderColor = _this$options14.borderColor,\n        backgroundColor = _this$options14.backgroundColor;\n      var _boundingRects = boundingRects(this),\n        inner = _boundingRects.inner,\n        outer = _boundingRects.outer;\n      var addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n      ctx.save();\n      if (outer.w !== inner.w || outer.h !== inner.h) {\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n        ctx.clip();\n        addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n        ctx.fillStyle = borderColor;\n        ctx.fill('evenodd');\n      }\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(inner, inflateAmount));\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      return _inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return _inRange(this, mouseX, null, useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return _inRange(this, null, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps6 = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition),\n        x = _this$getProps6.x,\n        y = _this$getProps6.y,\n        base = _this$getProps6.base,\n        horizontal = _this$getProps6.horizontal;\n      return {\n        x: horizontal ? (x + base) / 2 : x,\n        y: horizontal ? y : (y + base) / 2\n      };\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(axis) {\n      return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n  }]);\n  return BarElement;\n}(Element);\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nvar BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nvar BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(function (color) {\n  return color.replace('rgb(', 'rgba(').replace(')', ', 0.5)');\n});\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBorderColor(i++);\n  });\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBackgroundColor(i++);\n  });\n  return i;\n}\nfunction getColorizer(chart) {\n  var i = 0;\n  return function (dataset, datasetIndex) {\n    var controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  var k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout: function beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    var _chart$config = chart.config,\n      datasets = _chart$config.data.datasets,\n      chartOptions = _chart$config.options;\n    var elements = chartOptions.elements;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    var colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  var samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  var decimated = [];\n  var bucketWidth = (count - 2) / (samples - 2);\n  var sampledIndex = 0;\n  var endIndex = start + count - 1;\n  var a = start;\n  var i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    var avgX = 0;\n    var avgY = 0;\n    var j = void 0;\n    var avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    var avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    var avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    var rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    var rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    var _data$a = data[a],\n      pointAx = _data$a.x,\n      pointAy = _data$a.y;\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  var avgX = 0;\n  var countX = 0;\n  var i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  var decimated = [];\n  var endIndex = start + count - 1;\n  var xMin = data[start].x;\n  var xMax = data[endIndex].x;\n  var dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      var lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        var intermediateIndex1 = Math.min(minIndex, maxIndex);\n        var intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex1]), {}, {\n            x: avgX\n          }));\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex2]), {}, {\n            x: avgX\n          }));\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    var data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(function (dataset) {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  var pointCount = points.length;\n  var start = 0;\n  var count;\n  var iScale = meta.iScale;\n  var _iScale$getUserBounds = iScale.getUserBounds(),\n    min = _iScale$getUserBounds.min,\n    max = _iScale$getUserBounds.max,\n    minDefined = _iScale$getUserBounds.minDefined,\n    maxDefined = _iScale$getUserBounds.maxDefined;\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start: start,\n    count: count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: function beforeElementsUpdate(chart, args, options) {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    var availableWidth = chart.width;\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      var _data = dataset._data,\n        indexAxis = dataset.indexAxis;\n      var meta = chart.getDatasetMeta(datasetIndex);\n      var data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      var xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      var _getStartAndCountOfVi3 = getStartAndCountOfVisiblePointsSimplified(meta, data),\n        start = _getStartAndCountOfVi3.start,\n        count = _getStartAndCountOfVi3.count;\n      var threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function get() {\n            return this._decimated;\n          },\n          set: function set(d) {\n            this._data = d;\n          }\n        });\n      }\n      var decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(\"Unsupported decimation algorithm '\".concat(options.algorithm, \"'\"));\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy: function destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  var segments = line.segments;\n  var points = line.points;\n  var tpoints = target.points;\n  var parts = [];\n  var _iterator18 = _createForOfIteratorHelper(segments),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var segment = _step18.value;\n      var start = segment.start,\n        end = segment.end;\n      end = _findSegmentEnd(start, end, points);\n      var bounds = _getBounds(property, points[start], points[end], segment.loop);\n      if (!target.segments) {\n        parts.push({\n          source: segment,\n          target: bounds,\n          start: points[start],\n          end: points[end]\n        });\n        continue;\n      }\n      var targetSegments = _boundSegments(target, bounds);\n      var _iterator19 = _createForOfIteratorHelper(targetSegments),\n        _step19;\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var tgt = _step19.value;\n          var subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n          var fillSources = _boundSegment(segment, points, subBounds);\n          var _iterator20 = _createForOfIteratorHelper(fillSources),\n            _step20;\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var fillSource = _step20.value;\n              parts.push({\n                source: fillSource,\n                target: tgt,\n                start: _defineProperty({}, property, _getEdge(bounds, subBounds, 'start', Math.max)),\n                end: _defineProperty({}, property, _getEdge(bounds, subBounds, 'end', Math.min))\n              });\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  var start = first[property];\n  var end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property: property,\n    start: start,\n    end: end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  var _ref7 = boundary || {},\n    _ref7$x = _ref7.x,\n    x = _ref7$x === void 0 ? null : _ref7$x,\n    _ref7$y = _ref7.y,\n    y = _ref7$y === void 0 ? null : _ref7$y;\n  var linePoints = line.points;\n  var points = [];\n  line.segments.forEach(function (_ref8) {\n    var start = _ref8.start,\n      end = _ref8.end;\n    end = _findSegmentEnd(start, end, linePoints);\n    var first = linePoints[start];\n    var last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y: y\n      });\n      points.push({\n        x: last.x,\n        y: y\n      });\n    } else if (x !== null) {\n      points.push({\n        x: x,\n        y: first.y\n      });\n      points.push({\n        x: x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    var point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  var points = [];\n  var _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points: points,\n    options: {\n      tension: 0\n    },\n    _loop: _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  var source = sources[index];\n  var fill = source.fill;\n  var visited = [index];\n  var target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  var fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  var target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  var pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  var value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  var options = line.options;\n  var fillOption = options.fill;\n  var fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  var scale = source.scale,\n    index = source.index,\n    line = source.line;\n  var points = [];\n  var segments = line.segments;\n  var sourcePoints = line.points;\n  var linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    for (var j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points: points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  var below = [];\n  var metas = scale.getMatchingVisibleMetas('line');\n  for (var i = 0; i < metas.length; i++) {\n    var meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  var postponed = [];\n  for (var j = 0; j < linesBelow.length; j++) {\n    var line = linesBelow[j];\n    var _findPoint = findPoint(line, sourcePoint, 'x'),\n      first = _findPoint.first,\n      last = _findPoint.last,\n      point = _findPoint.point;\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push.apply(points, postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  var point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  var pointValue = point[property];\n  var segments = line.segments;\n  var linePoints = line.points;\n  var first = false;\n  var last = false;\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    var firstValue = linePoints[segment.start][property];\n    var lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first: first,\n    last: last,\n    point: point\n  };\n}\nvar simpleArc = /*#__PURE__*/function () {\n  function simpleArc(opts) {\n    _classCallCheck(this, simpleArc);\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  _createClass(simpleArc, [{\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, bounds, opts) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      bounds = bounds || {\n        start: 0,\n        end: TAU\n      };\n      ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n      return !opts.bounds;\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      var angle = point.angle;\n      return {\n        x: x + Math.cos(angle) * radius,\n        y: y + Math.sin(angle) * radius,\n        angle: angle\n      };\n    }\n  }]);\n  return simpleArc;\n}();\nfunction _getTarget(source) {\n  var chart = source.chart,\n    fill = source.fill,\n    line = source.line;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  var boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  var meta = chart.getDatasetMeta(index);\n  var visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  var scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  var _source$scale = source.scale,\n    scale = _source$scale === void 0 ? {} : _source$scale,\n    fill = source.fill;\n  var pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    var horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  var scale = source.scale,\n    fill = source.fill;\n  var options = scale.options;\n  var length = scale.getLabels().length;\n  var start = options.reverse ? scale.max : scale.min;\n  var value = _getTargetValue(fill, scale, start);\n  var target = [];\n  if (options.grid.circular) {\n    var center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (var i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  var target = _getTarget(source);\n  var line = source.line,\n    scale = source.scale,\n    axis = source.axis;\n  var lineOpts = line.options;\n  var fillOption = lineOpts.fill;\n  var color = lineOpts.backgroundColor;\n  var _ref9 = fillOption || {},\n    _ref9$above = _ref9.above,\n    above = _ref9$above === void 0 ? color : _ref9$above,\n    _ref9$below = _ref9.below,\n    below = _ref9$below === void 0 ? color : _ref9$below;\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line: line,\n      target: target,\n      above: above,\n      below: below,\n      area: area,\n      scale: scale,\n      axis: axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    above = cfg.above,\n    below = cfg.below,\n    area = cfg.area,\n    scale = cfg.scale;\n  var property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line: line,\n      target: target,\n      color: above,\n      scale: scale,\n      property: property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line: line,\n    target: target,\n    color: below,\n    scale: scale,\n    property: property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  var segments = target.segments,\n    points = target.points;\n  var first = true;\n  var lineLoop = false;\n  ctx.beginPath();\n  var _iterator21 = _createForOfIteratorHelper(segments),\n    _step21;\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var segment = _step21.value;\n      var start = segment.start,\n        end = segment.end;\n      var firstPoint = points[start];\n      var lastPoint = points[_findSegmentEnd(start, end, points)];\n      if (first) {\n        ctx.moveTo(firstPoint.x, firstPoint.y);\n        first = false;\n      } else {\n        ctx.lineTo(firstPoint.x, clipY);\n        ctx.lineTo(firstPoint.x, firstPoint.y);\n      }\n      lineLoop = !!target.pathSegment(ctx, segment, {\n        move: lineLoop\n      });\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        ctx.lineTo(lastPoint.x, clipY);\n      }\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    property = cfg.property,\n    color = cfg.color,\n    scale = cfg.scale;\n  var segments = _segments(line, target, property);\n  var _iterator22 = _createForOfIteratorHelper(segments),\n    _step22;\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var _step22$value = _step22.value,\n        src = _step22$value.source,\n        tgt = _step22$value.target,\n        start = _step22$value.start,\n        end = _step22$value.end;\n      var _src$style = src.style,\n        _src$style2 = _src$style === void 0 ? {} : _src$style,\n        _src$style2$backgroun = _src$style2.backgroundColor,\n        backgroundColor = _src$style2$backgroun === void 0 ? color : _src$style2$backgroun;\n      var notShape = target !== true;\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n      ctx.beginPath();\n      var lineLoop = !!line.pathSegment(ctx, src);\n      var loop = void 0;\n      if (notShape) {\n        if (lineLoop) {\n          ctx.closePath();\n        } else {\n          interpolatedLineTo(ctx, target, end, property);\n        }\n        var targetLoop = !!target.pathSegment(ctx, tgt, {\n          move: lineLoop,\n          reverse: true\n        });\n        loop = lineLoop && targetLoop;\n        if (!loop) {\n          interpolatedLineTo(ctx, target, start, property);\n        }\n      }\n      ctx.closePath();\n      ctx.fill(loop ? 'evenodd' : 'nonzero');\n      ctx.restore();\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  var _scale$chart$chartAre = scale.chart.chartArea,\n    top = _scale$chart$chartAre.top,\n    bottom = _scale$chart$chartAre.bottom;\n  var _ref10 = bounds || {},\n    property = _ref10.property,\n    start = _ref10.start,\n    end = _ref10.end;\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  var interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate: function afterDatasetsUpdate(chart, _args, options) {\n    var count = (chart.data.datasets || []).length;\n    var sources = [];\n    var meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart: chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line: line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw: function beforeDraw(chart, _args, options) {\n    var draw = options.drawTime === 'beforeDraw';\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    var area = chart.chartArea;\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw: function beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw: function beforeDatasetDraw(chart, args, options) {\n    var source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nvar getBoxSize = function getBoxSize(labelOpts, fontSize) {\n  var _labelOpts$boxHeight = labelOpts.boxHeight,\n    boxHeight = _labelOpts$boxHeight === void 0 ? fontSize : _labelOpts$boxHeight,\n    _labelOpts$boxWidth = labelOpts.boxWidth,\n    boxWidth = _labelOpts$boxWidth === void 0 ? fontSize : _labelOpts$boxWidth;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth: boxWidth,\n    boxHeight: boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nvar itemsEqual = function itemsEqual(a, b) {\n  return a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n};\nvar Legend = /*#__PURE__*/function (_Element6) {\n  _inherits(Legend, _Element6);\n  var _super16 = _createSuper(Legend);\n  function Legend(config) {\n    var _this27;\n    _classCallCheck(this, Legend);\n    _this27 = _super16.call(this);\n    _this27._added = false;\n    _this27.legendHitBoxes = [];\n    _this27._hoveredItem = null;\n    _this27.doughnutMode = false;\n    _this27.chart = config.chart;\n    _this27.options = config.options;\n    _this27.ctx = config.ctx;\n    _this27.legendItems = undefined;\n    _this27.columnSizes = undefined;\n    _this27.lineWidths = undefined;\n    _this27.maxHeight = undefined;\n    _this27.maxWidth = undefined;\n    _this27.top = undefined;\n    _this27.bottom = undefined;\n    _this27.left = undefined;\n    _this27.right = undefined;\n    _this27.height = undefined;\n    _this27.width = undefined;\n    _this27._margins = undefined;\n    _this27.position = undefined;\n    _this27.weight = undefined;\n    _this27.fullSize = undefined;\n    return _this27;\n  }\n  _createClass(Legend, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins;\n      this.setDimensions();\n      this.buildLabels();\n      this.fit();\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = this._margins.left;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = this._margins.top;\n        this.bottom = this.height;\n      }\n    }\n  }, {\n    key: \"buildLabels\",\n    value: function buildLabels() {\n      var _this28 = this;\n      var labelOpts = this.options.labels || {};\n      var legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, _this28.chart.data);\n        });\n      }\n      if (labelOpts.sort) {\n        legendItems = legendItems.sort(function (a, b) {\n          return labelOpts.sort(a, b, _this28.chart.data);\n        });\n      }\n      if (this.options.reverse) {\n        legendItems.reverse();\n      }\n      this.legendItems = legendItems;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var options = this.options,\n        ctx = this.ctx;\n      if (!options.display) {\n        this.width = this.height = 0;\n        return;\n      }\n      var labelOpts = options.labels;\n      var labelFont = toFont(labelOpts.font);\n      var fontSize = labelFont.size;\n      var titleHeight = this._computeTitleHeight();\n      var _getBoxSize = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize.boxWidth,\n        itemHeight = _getBoxSize.itemHeight;\n      var width, height;\n      ctx.font = labelFont.string;\n      if (this.isHorizontal()) {\n        width = this.maxWidth;\n        height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      } else {\n        height = this.maxHeight;\n        width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n      }\n      this.width = Math.min(width, options.maxWidth || this.maxWidth);\n      this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n  }, {\n    key: \"_fitRows\",\n    value: function _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n      var ctx = this.ctx,\n        maxWidth = this.maxWidth,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var lineWidths = this.lineWidths = [0];\n      var lineHeight = itemHeight + padding;\n      var totalHeight = titleHeight;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      var row = -1;\n      var top = -lineHeight;\n      this.legendItems.forEach(function (legendItem, i) {\n        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n        if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n          totalHeight += lineHeight;\n          lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n          top += lineHeight;\n          row++;\n        }\n        hitboxes[i] = {\n          left: 0,\n          top: top,\n          row: row,\n          width: itemWidth,\n          height: itemHeight\n        };\n        lineWidths[lineWidths.length - 1] += itemWidth + padding;\n      });\n      return totalHeight;\n    }\n  }, {\n    key: \"_fitCols\",\n    value: function _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n      var ctx = this.ctx,\n        maxHeight = this.maxHeight,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var columnSizes = this.columnSizes = [];\n      var heightLimit = maxHeight - titleHeight;\n      var totalWidth = padding;\n      var currentColWidth = 0;\n      var currentColHeight = 0;\n      var left = 0;\n      var col = 0;\n      this.legendItems.forEach(function (legendItem, i) {\n        var _calculateItemSize = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight),\n          itemWidth = _calculateItemSize.itemWidth,\n          itemHeight = _calculateItemSize.itemHeight;\n        if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n          totalWidth += currentColWidth + padding;\n          columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n          });\n          left += currentColWidth + padding;\n          col++;\n          currentColWidth = currentColHeight = 0;\n        }\n        hitboxes[i] = {\n          left: left,\n          top: currentColHeight,\n          col: col,\n          width: itemWidth,\n          height: itemHeight\n        };\n        currentColWidth = Math.max(currentColWidth, itemWidth);\n        currentColHeight += itemHeight + padding;\n      });\n      totalWidth += currentColWidth;\n      columnSizes.push({\n        width: currentColWidth,\n        height: currentColHeight\n      });\n      return totalWidth;\n    }\n  }, {\n    key: \"adjustHitBoxes\",\n    value: function adjustHitBoxes() {\n      if (!this.options.display) {\n        return;\n      }\n      var titleHeight = this._computeTitleHeight();\n      var hitboxes = this.legendHitBoxes,\n        _this$options15 = this.options,\n        align = _this$options15.align,\n        padding = _this$options15.labels.padding,\n        rtl = _this$options15.rtl;\n      var rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n      if (this.isHorizontal()) {\n        var row = 0;\n        var left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        var _iterator23 = _createForOfIteratorHelper(hitboxes),\n          _step23;\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var hitbox = _step23.value;\n            if (row !== hitbox.row) {\n              row = hitbox.row;\n              left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            }\n            hitbox.top += this.top + titleHeight + padding;\n            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n            left += hitbox.width + padding;\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n      } else {\n        var col = 0;\n        var top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        var _iterator24 = _createForOfIteratorHelper(hitboxes),\n          _step24;\n        try {\n          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n            var _hitbox = _step24.value;\n            if (_hitbox.col !== col) {\n              col = _hitbox.col;\n              top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            }\n            _hitbox.top = top;\n            _hitbox.left += this.left + padding;\n            _hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(_hitbox.left), _hitbox.width);\n            top += _hitbox.height + padding;\n          }\n        } catch (err) {\n          _iterator24.e(err);\n        } finally {\n          _iterator24.f();\n        }\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      if (this.options.display) {\n        var ctx = this.ctx;\n        clipArea(ctx, this);\n        this._draw();\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw() {\n      var _this29 = this;\n      var opts = this.options,\n        columnSizes = this.columnSizes,\n        lineWidths = this.lineWidths,\n        ctx = this.ctx;\n      var align = opts.align,\n        labelOpts = opts.labels;\n      var defaultColor = defaults.color;\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var labelFont = toFont(labelOpts.font);\n      var padding = labelOpts.padding;\n      var fontSize = labelFont.size;\n      var halfFontSize = fontSize / 2;\n      var cursor;\n      this.drawTitle();\n      ctx.textAlign = rtlHelper.textAlign('left');\n      ctx.textBaseline = 'middle';\n      ctx.lineWidth = 0.5;\n      ctx.font = labelFont.string;\n      var _getBoxSize2 = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize2.boxWidth,\n        boxHeight = _getBoxSize2.boxHeight,\n        itemHeight = _getBoxSize2.itemHeight;\n      var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n          return;\n        }\n        ctx.save();\n        var lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n        ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n        ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n        if (labelOpts.usePointStyle) {\n          var drawOptions = {\n            radius: boxHeight * Math.SQRT2 / 2,\n            pointStyle: legendItem.pointStyle,\n            rotation: legendItem.rotation,\n            borderWidth: lineWidth\n          };\n          var centerX = rtlHelper.xPlus(x, boxWidth / 2);\n          var centerY = y + halfFontSize;\n          drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n        } else {\n          var yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n          var xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n          var borderRadius = toTRBLCorners(legendItem.borderRadius);\n          ctx.beginPath();\n          if (Object.values(borderRadius).some(function (v) {\n            return v !== 0;\n          })) {\n            addRoundedRectPath(ctx, {\n              x: xBoxLeft,\n              y: yBoxTop,\n              w: boxWidth,\n              h: boxHeight,\n              radius: borderRadius\n            });\n          } else {\n            ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n          }\n          ctx.fill();\n          if (lineWidth !== 0) {\n            ctx.stroke();\n          }\n        }\n        ctx.restore();\n      };\n      var fillText = function fillText(x, y, legendItem) {\n        renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n          strikethrough: legendItem.hidden,\n          textAlign: rtlHelper.textAlign(legendItem.textAlign)\n        });\n      };\n      var isHorizontal = this.isHorizontal();\n      var titleHeight = this._computeTitleHeight();\n      if (isHorizontal) {\n        cursor = {\n          x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n          y: this.top + padding + titleHeight,\n          line: 0\n        };\n      } else {\n        cursor = {\n          x: this.left + padding,\n          y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n          line: 0\n        };\n      }\n      overrideTextDirection(this.ctx, opts.textDirection);\n      var lineHeight = itemHeight + padding;\n      this.legendItems.forEach(function (legendItem, i) {\n        ctx.strokeStyle = legendItem.fontColor;\n        ctx.fillStyle = legendItem.fontColor;\n        var textWidth = ctx.measureText(legendItem.text).width;\n        var textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n        var width = boxWidth + halfFontSize + textWidth;\n        var x = cursor.x;\n        var y = cursor.y;\n        rtlHelper.setWidth(_this29.width);\n        if (isHorizontal) {\n          if (i > 0 && x + width + padding > _this29.right) {\n            y = cursor.y += lineHeight;\n            cursor.line++;\n            x = cursor.x = _alignStartEnd(align, _this29.left + padding, _this29.right - lineWidths[cursor.line]);\n          }\n        } else if (i > 0 && y + lineHeight > _this29.bottom) {\n          x = cursor.x = x + columnSizes[cursor.line].width + padding;\n          cursor.line++;\n          y = cursor.y = _alignStartEnd(align, _this29.top + titleHeight + padding, _this29.bottom - columnSizes[cursor.line].height);\n        }\n        var realX = rtlHelper.x(x);\n        drawLegendBox(realX, y, legendItem);\n        x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : _this29.right, opts.rtl);\n        fillText(rtlHelper.x(x), y, legendItem);\n        if (isHorizontal) {\n          cursor.x += width + padding;\n        } else if (typeof legendItem.text !== 'string') {\n          var fontLineHeight = labelFont.lineHeight;\n          cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n        } else {\n          cursor.y += lineHeight;\n        }\n      });\n      restoreTextDirection(this.ctx, opts.textDirection);\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var opts = this.options;\n      var titleOpts = opts.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      if (!titleOpts.display) {\n        return;\n      }\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var ctx = this.ctx;\n      var position = titleOpts.position;\n      var halfFontSize = titleFont.size / 2;\n      var topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n      var y;\n      var left = this.left;\n      var maxWidth = this.width;\n      if (this.isHorizontal()) {\n        maxWidth = Math.max.apply(Math, _toConsumableArray(this.lineWidths));\n        y = this.top + topPaddingPlusHalfFontSize;\n        left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n      } else {\n        var maxHeight = this.columnSizes.reduce(function (acc, size) {\n          return Math.max(acc, size.height);\n        }, 0);\n        y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n      }\n      var x = _alignStartEnd(position, left, left + maxWidth);\n      ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n      ctx.textBaseline = 'middle';\n      ctx.strokeStyle = titleOpts.color;\n      ctx.fillStyle = titleOpts.color;\n      ctx.font = titleFont.string;\n      renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n  }, {\n    key: \"_computeTitleHeight\",\n    value: function _computeTitleHeight() {\n      var titleOpts = this.options.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n  }, {\n    key: \"_getLegendItemAt\",\n    value: function _getLegendItemAt(x, y) {\n      var i, hitBox, lh;\n      if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n        lh = this.legendHitBoxes;\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n          if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n            return this.legendItems[i];\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      var opts = this.options;\n      if (!isListened(e.type, opts)) {\n        return;\n      }\n      var hoveredItem = this._getLegendItemAt(e.x, e.y);\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        var previous = this._hoveredItem;\n        var sameItem = itemsEqual(previous, hoveredItem);\n        if (previous && !sameItem) {\n          callback(opts.onLeave, [e, previous, this], this);\n        }\n        this._hoveredItem = hoveredItem;\n        if (hoveredItem && !sameItem) {\n          callback(opts.onHover, [e, hoveredItem, this], this);\n        }\n      } else if (hoveredItem) {\n        callback(opts.onClick, [e, hoveredItem, this], this);\n      }\n    }\n  }]);\n  return Legend;\n}(Element);\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  var itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  var itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth: itemWidth,\n    itemHeight: itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  var legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce(function (a, b) {\n      return a.length > b.length ? a : b;\n    });\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  var itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  var labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start: function start(chart, _args, options) {\n    var legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate: function afterUpdate(chart) {\n    var legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick: function onClick(e, legendItem, legend) {\n      var index = legendItem.datasetIndex;\n      var ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      boxWidth: 40,\n      padding: 10,\n      generateLabels: function generateLabels(chart) {\n        var datasets = chart.data.datasets;\n        var _chart$legend$options = chart.legend.options.labels,\n          usePointStyle = _chart$legend$options.usePointStyle,\n          pointStyle = _chart$legend$options.pointStyle,\n          textAlign = _chart$legend$options.textAlign,\n          color = _chart$legend$options.color,\n          useBorderRadius = _chart$legend$options.useBorderRadius,\n          borderRadius = _chart$legend$options.borderRadius;\n        return chart._getSortedDatasetMetas().map(function (meta) {\n          var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          var borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return !name.startsWith('on');\n    },\n    labels: {\n      _scriptable: function _scriptable(name) {\n        return !['generateLabels', 'filter', 'sort'].includes(name);\n      }\n    }\n  }\n};\nvar Title = /*#__PURE__*/function (_Element7) {\n  _inherits(Title, _Element7);\n  var _super17 = _createSuper(Title);\n  function Title(config) {\n    var _this30;\n    _classCallCheck(this, Title);\n    _this30 = _super17.call(this);\n    _this30.chart = config.chart;\n    _this30.options = config.options;\n    _this30.ctx = config.ctx;\n    _this30._padding = undefined;\n    _this30.top = undefined;\n    _this30.bottom = undefined;\n    _this30.left = undefined;\n    _this30.right = undefined;\n    _this30.width = undefined;\n    _this30.height = undefined;\n    _this30.position = undefined;\n    _this30.weight = undefined;\n    _this30.fullSize = undefined;\n    return _this30;\n  }\n  _createClass(Title, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight) {\n      var opts = this.options;\n      this.left = 0;\n      this.top = 0;\n      if (!opts.display) {\n        this.width = this.height = this.right = this.bottom = 0;\n        return;\n      }\n      this.width = this.right = maxWidth;\n      this.height = this.bottom = maxHeight;\n      var lineCount = isArray(opts.text) ? opts.text.length : 1;\n      this._padding = toPadding(opts.padding);\n      var textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n      if (this.isHorizontal()) {\n        this.height = textSize;\n      } else {\n        this.width = textSize;\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    }\n  }, {\n    key: \"_drawArgs\",\n    value: function _drawArgs(offset) {\n      var top = this.top,\n        left = this.left,\n        bottom = this.bottom,\n        right = this.right,\n        options = this.options;\n      var align = options.align;\n      var rotation = 0;\n      var maxWidth, titleX, titleY;\n      if (this.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        titleY = top + offset;\n        maxWidth = right - left;\n      } else {\n        if (options.position === 'left') {\n          titleX = left + offset;\n          titleY = _alignStartEnd(align, bottom, top);\n          rotation = PI * -0.5;\n        } else {\n          titleX = right - offset;\n          titleY = _alignStartEnd(align, top, bottom);\n          rotation = PI * 0.5;\n        }\n        maxWidth = bottom - top;\n      }\n      return {\n        titleX: titleX,\n        titleY: titleY,\n        maxWidth: maxWidth,\n        rotation: rotation\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this.ctx;\n      var opts = this.options;\n      if (!opts.display) {\n        return;\n      }\n      var fontOpts = toFont(opts.font);\n      var lineHeight = fontOpts.lineHeight;\n      var offset = lineHeight / 2 + this._padding.top;\n      var _this$_drawArgs = this._drawArgs(offset),\n        titleX = _this$_drawArgs.titleX,\n        titleY = _this$_drawArgs.titleY,\n        maxWidth = _this$_drawArgs.maxWidth,\n        rotation = _this$_drawArgs.rotation;\n      renderText(ctx, opts.text, 0, 0, fontOpts, {\n        color: opts.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: _toLeftRightCenter(opts.align),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }]);\n  return Title;\n}(Element);\nfunction createTitle(chart, titleOpts) {\n  var title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart: chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start: function start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop: function stop(chart) {\n    var titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start: function start(chart, _args, options) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar positioners = {\n  average: function average(items) {\n    if (!items.length) {\n      return false;\n    }\n    var i, len;\n    var x = 0;\n    var y = 0;\n    var count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest: function nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    var x = eventPosition.x;\n    var y = eventPosition.y;\n    var minDistance = Number.POSITIVE_INFINITY;\n    var i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var center = el.getCenterPoint();\n        var d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      var tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  var element = item.element,\n    datasetIndex = item.datasetIndex,\n    index = item.index;\n  var controller = chart.getDatasetMeta(datasetIndex).controller;\n  var _controller$getLabelA = controller.getLabelAndValue(index),\n    label = _controller$getLabelA.label,\n    value = _controller$getLabelA.value;\n  return {\n    chart: chart,\n    label: label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex: datasetIndex,\n    element: element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  var ctx = tooltip.chart.ctx;\n  var body = tooltip.body,\n    footer = tooltip.footer,\n    title = tooltip.title;\n  var boxWidth = options.boxWidth,\n    boxHeight = options.boxHeight;\n  var bodyFont = toFont(options.bodyFont);\n  var titleFont = toFont(options.titleFont);\n  var footerFont = toFont(options.footerFont);\n  var titleLineCount = title.length;\n  var footerLineCount = footer.length;\n  var bodyLineItemCount = body.length;\n  var padding = toPadding(options.padding);\n  var height = padding.height;\n  var width = 0;\n  var combinedBodyLength = body.reduce(function (count, bodyItem) {\n    return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n  }, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  var widthPadding = 0;\n  var maxLineWidth = function maxLineWidth(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, function (bodyItem) {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width: width,\n    height: height\n  };\n}\nfunction determineYAlign(chart, size) {\n  var y = size.y,\n    height = size.height;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  var x = size.x,\n    width = size.width;\n  var caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  var x = size.x,\n    width = size.width;\n  var chartWidth = chart.width,\n    _chart$chartArea = chart.chartArea,\n    left = _chart$chartArea.left,\n    right = _chart$chartArea.right;\n  var xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  var yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign: yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  var x = size.x,\n    width = size.width;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  var y = size.y,\n    height = size.height;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  var caretSize = options.caretSize,\n    caretPadding = options.caretPadding,\n    cornerRadius = options.cornerRadius;\n  var xAlign = alignment.xAlign,\n    yAlign = alignment.yAlign;\n  var paddingAndSize = caretSize + caretPadding;\n  var _toTRBLCorners = toTRBLCorners(cornerRadius),\n    topLeft = _toTRBLCorners.topLeft,\n    topRight = _toTRBLCorners.topRight,\n    bottomLeft = _toTRBLCorners.bottomLeft,\n    bottomRight = _toTRBLCorners.bottomRight;\n  var x = alignX(size, xAlign);\n  var y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  var padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip: tooltip,\n    tooltipItems: tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  var override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nvar defaultCallbacks = {\n  beforeTitle: noop,\n  title: function title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      var item = tooltipItems[0];\n      var labels = item.chart.data.labels;\n      var labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label: function label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    var label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    var value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor: function labelColor(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor: function labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle: function labelPointStyle(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  var result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nvar Tooltip = /*#__PURE__*/function (_Element8) {\n  _inherits(Tooltip, _Element8);\n  var _super18 = _createSuper(Tooltip);\n  function Tooltip(config) {\n    var _this31;\n    _classCallCheck(this, Tooltip);\n    _this31 = _super18.call(this);\n    _this31.opacity = 0;\n    _this31._active = [];\n    _this31._eventPosition = undefined;\n    _this31._size = undefined;\n    _this31._cachedAnimations = undefined;\n    _this31._tooltipItems = [];\n    _this31.$animations = undefined;\n    _this31.$context = undefined;\n    _this31.chart = config.chart;\n    _this31.options = config.options;\n    _this31.dataPoints = undefined;\n    _this31.title = undefined;\n    _this31.beforeBody = undefined;\n    _this31.body = undefined;\n    _this31.afterBody = undefined;\n    _this31.footer = undefined;\n    _this31.xAlign = undefined;\n    _this31.yAlign = undefined;\n    _this31.x = undefined;\n    _this31.y = undefined;\n    _this31.height = undefined;\n    _this31.width = undefined;\n    _this31.caretX = undefined;\n    _this31.caretY = undefined;\n    _this31.labelColors = undefined;\n    _this31.labelPointStyles = undefined;\n    _this31.labelTextColors = undefined;\n    return _this31;\n  }\n  _createClass(Tooltip, [{\n    key: \"initialize\",\n    value: function initialize(options) {\n      this.options = options;\n      this._cachedAnimations = undefined;\n      this.$context = undefined;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations() {\n      var cached = this._cachedAnimations;\n      if (cached) {\n        return cached;\n      }\n      var chart = this.chart;\n      var options = this.options.setContext(this.getContext());\n      var opts = options.enabled && chart.options.animation && options.animations;\n      var animations = new Animations(this.chart, opts);\n      if (opts._cacheable) {\n        this._cachedAnimations = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle(context, options) {\n      var callbacks = options.callbacks;\n      var beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n      var title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n      var afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    }\n  }, {\n    key: \"getBeforeBody\",\n    value: function getBeforeBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getBody\",\n    value: function getBody(tooltipItems, options) {\n      var _this32 = this;\n      var callbacks = options.callbacks;\n      var bodyItems = [];\n      each(tooltipItems, function (context) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        var scoped = overrideCallbacks(callbacks, context);\n        pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', _this32, context)));\n        pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', _this32, context));\n        pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', _this32, context)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    }\n  }, {\n    key: \"getAfterBody\",\n    value: function getAfterBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getFooter\",\n    value: function getFooter(tooltipItems, options) {\n      var callbacks = options.callbacks;\n      var beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n      var footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n      var afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    }\n  }, {\n    key: \"_createItems\",\n    value: function _createItems(options) {\n      var _this33 = this;\n      var active = this._active;\n      var data = this.chart.data;\n      var labelColors = [];\n      var labelPointStyles = [];\n      var labelTextColors = [];\n      var tooltipItems = [];\n      var i, len;\n      for (i = 0, len = active.length; i < len; ++i) {\n        tooltipItems.push(createTooltipItem(this.chart, active[i]));\n      }\n      if (options.filter) {\n        tooltipItems = tooltipItems.filter(function (element, index, array) {\n          return options.filter(element, index, array, data);\n        });\n      }\n      if (options.itemSort) {\n        tooltipItems = tooltipItems.sort(function (a, b) {\n          return options.itemSort(a, b, data);\n        });\n      }\n      each(tooltipItems, function (context) {\n        var scoped = overrideCallbacks(options.callbacks, context);\n        labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', _this33, context));\n        labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', _this33, context));\n        labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', _this33, context));\n      });\n      this.labelColors = labelColors;\n      this.labelPointStyles = labelPointStyles;\n      this.labelTextColors = labelTextColors;\n      this.dataPoints = tooltipItems;\n      return tooltipItems;\n    }\n  }, {\n    key: \"update\",\n    value: function update(changed, replay) {\n      var options = this.options.setContext(this.getContext());\n      var active = this._active;\n      var properties;\n      var tooltipItems = [];\n      if (!active.length) {\n        if (this.opacity !== 0) {\n          properties = {\n            opacity: 0\n          };\n        }\n      } else {\n        var position = positioners[options.position].call(this, active, this._eventPosition);\n        tooltipItems = this._createItems(options);\n        this.title = this.getTitle(tooltipItems, options);\n        this.beforeBody = this.getBeforeBody(tooltipItems, options);\n        this.body = this.getBody(tooltipItems, options);\n        this.afterBody = this.getAfterBody(tooltipItems, options);\n        this.footer = this.getFooter(tooltipItems, options);\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, size);\n        var alignment = determineAlignment(this.chart, options, positionAndSize);\n        var backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        properties = {\n          opacity: 1,\n          x: backgroundPoint.x,\n          y: backgroundPoint.y,\n          width: size.width,\n          height: size.height,\n          caretX: position.x,\n          caretY: position.y\n        };\n      }\n      this._tooltipItems = tooltipItems;\n      this.$context = undefined;\n      if (properties) {\n        this._resolveAnimations().update(this, properties);\n      }\n      if (changed && options.external) {\n        options.external.call(this, {\n          chart: this.chart,\n          tooltip: this,\n          replay: replay\n        });\n      }\n    }\n  }, {\n    key: \"drawCaret\",\n    value: function drawCaret(tooltipPoint, ctx, size, options) {\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n  }, {\n    key: \"getCaretPosition\",\n    value: function getCaretPosition(tooltipPoint, size, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var caretSize = options.caretSize,\n        cornerRadius = options.cornerRadius;\n      var _toTRBLCorners2 = toTRBLCorners(cornerRadius),\n        topLeft = _toTRBLCorners2.topLeft,\n        topRight = _toTRBLCorners2.topRight,\n        bottomLeft = _toTRBLCorners2.bottomLeft,\n        bottomRight = _toTRBLCorners2.bottomRight;\n      var ptX = tooltipPoint.x,\n        ptY = tooltipPoint.y;\n      var width = size.width,\n        height = size.height;\n      var x1, x2, x3, y1, y2, y3;\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n        x3 = x1;\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n        } else {\n          x2 = this.caretX;\n        }\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          x1 = x2 + caretSize;\n          x3 = x2 - caretSize;\n        }\n        y3 = y1;\n      }\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle(pt, ctx, options) {\n      var title = this.title;\n      var length = title.length;\n      var titleFont, titleSpacing, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.titleAlign, options);\n        ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n        ctx.textBaseline = 'middle';\n        titleFont = toFont(options.titleFont);\n        titleSpacing = options.titleSpacing;\n        ctx.fillStyle = options.titleColor;\n        ctx.font = titleFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n          pt.y += titleFont.lineHeight + titleSpacing;\n          if (i + 1 === length) {\n            pt.y += options.titleMarginBottom - titleSpacing;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_drawColorBox\",\n    value: function _drawColorBox(ctx, pt, i, rtlHelper, options) {\n      var labelColor = this.labelColors[i];\n      var labelPointStyle = this.labelPointStyles[i];\n      var boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth;\n      var bodyFont = toFont(options.bodyFont);\n      var colorX = getAlignedX(this, 'left', options);\n      var rtlColorX = rtlHelper.x(colorX);\n      var yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n      var colorY = pt.y + yOffSet;\n      if (options.usePointStyle) {\n        var drawOptions = {\n          radius: Math.min(boxWidth, boxHeight) / 2,\n          pointStyle: labelPointStyle.pointStyle,\n          rotation: labelPointStyle.rotation,\n          borderWidth: 1\n        };\n        var centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n        var centerY = colorY + boxHeight / 2;\n        ctx.strokeStyle = options.multiKeyBackground;\n        ctx.fillStyle = options.multiKeyBackground;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n        ctx.strokeStyle = labelColor.borderColor;\n        ctx.fillStyle = labelColor.backgroundColor;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max.apply(Math, _toConsumableArray(Object.values(labelColor.borderWidth))) : labelColor.borderWidth || 1;\n        ctx.strokeStyle = labelColor.borderColor;\n        ctx.setLineDash(labelColor.borderDash || []);\n        ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n        var outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n        var innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n        var borderRadius = toTRBLCorners(labelColor.borderRadius);\n        if (Object.values(borderRadius).some(function (v) {\n          return v !== 0;\n        })) {\n          ctx.beginPath();\n          ctx.fillStyle = options.multiKeyBackground;\n          addRoundedRectPath(ctx, {\n            x: outerX,\n            y: colorY,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n          ctx.fill();\n          ctx.stroke();\n          ctx.fillStyle = labelColor.backgroundColor;\n          ctx.beginPath();\n          addRoundedRectPath(ctx, {\n            x: innerX,\n            y: colorY + 1,\n            w: boxWidth - 2,\n            h: boxHeight - 2,\n            radius: borderRadius\n          });\n          ctx.fill();\n        } else {\n          ctx.fillStyle = options.multiKeyBackground;\n          ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.fillStyle = labelColor.backgroundColor;\n          ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n        }\n      }\n      ctx.fillStyle = this.labelTextColors[i];\n    }\n  }, {\n    key: \"drawBody\",\n    value: function drawBody(pt, ctx, options) {\n      var body = this.body;\n      var bodySpacing = options.bodySpacing,\n        bodyAlign = options.bodyAlign,\n        displayColors = options.displayColors,\n        boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth,\n        boxPadding = options.boxPadding;\n      var bodyFont = toFont(options.bodyFont);\n      var bodyLineHeight = bodyFont.lineHeight;\n      var xLinePadding = 0;\n      var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n        pt.y += bodyLineHeight + bodySpacing;\n      };\n      var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n      var bodyItem, textColor, lines, i, j, ilen, jlen;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'middle';\n      ctx.font = bodyFont.string;\n      pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n      ctx.fillStyle = options.bodyColor;\n      each(this.beforeBody, fillLineOfText);\n      xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n      for (i = 0, ilen = body.length; i < ilen; ++i) {\n        bodyItem = body[i];\n        textColor = this.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        each(bodyItem.before, fillLineOfText);\n        lines = bodyItem.lines;\n        if (displayColors && lines.length) {\n          this._drawColorBox(ctx, pt, i, rtlHelper, options);\n          bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n        }\n        for (j = 0, jlen = lines.length; j < jlen; ++j) {\n          fillLineOfText(lines[j]);\n          bodyLineHeight = bodyFont.lineHeight;\n        }\n        each(bodyItem.after, fillLineOfText);\n      }\n      xLinePadding = 0;\n      bodyLineHeight = bodyFont.lineHeight;\n      each(this.afterBody, fillLineOfText);\n      pt.y -= bodySpacing;\n    }\n  }, {\n    key: \"drawFooter\",\n    value: function drawFooter(pt, ctx, options) {\n      var footer = this.footer;\n      var length = footer.length;\n      var footerFont, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.footerAlign, options);\n        pt.y += options.footerMarginTop;\n        ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n        ctx.textBaseline = 'middle';\n        footerFont = toFont(options.footerFont);\n        ctx.fillStyle = options.footerColor;\n        ctx.font = footerFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n          pt.y += footerFont.lineHeight + options.footerSpacing;\n        }\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(pt, ctx, tooltipSize, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var x = pt.x,\n        y = pt.y;\n      var width = tooltipSize.width,\n        height = tooltipSize.height;\n      var _toTRBLCorners3 = toTRBLCorners(options.cornerRadius),\n        topLeft = _toTRBLCorners3.topLeft,\n        topRight = _toTRBLCorners3.topRight,\n        bottomLeft = _toTRBLCorners3.bottomLeft,\n        bottomRight = _toTRBLCorners3.bottomRight;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.beginPath();\n      ctx.moveTo(x + topLeft, y);\n      if (yAlign === 'top') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width - topRight, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width, y + height - bottomRight);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + bottomLeft, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x, y + topLeft);\n      ctx.quadraticCurveTo(x, y, x + topLeft, y);\n      ctx.closePath();\n      ctx.fill();\n      if (options.borderWidth > 0) {\n        ctx.stroke();\n      }\n    }\n  }, {\n    key: \"_updateAnimationTarget\",\n    value: function _updateAnimationTarget(options) {\n      var chart = this.chart;\n      var anims = this.$animations;\n      var animX = anims && anims.x;\n      var animY = anims && anims.y;\n      if (animX || animY) {\n        var position = positioners[options.position].call(this, this._active, this._eventPosition);\n        if (!position) {\n          return;\n        }\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, this._size);\n        var alignment = determineAlignment(chart, options, positionAndSize);\n        var point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n        if (animX._to !== point.x || animY._to !== point.y) {\n          this.xAlign = alignment.xAlign;\n          this.yAlign = alignment.yAlign;\n          this.width = size.width;\n          this.height = size.height;\n          this.caretX = position.x;\n          this.caretY = position.y;\n          this._resolveAnimations().update(this, point);\n        }\n      }\n    }\n  }, {\n    key: \"_willRender\",\n    value: function _willRender() {\n      return !!this.opacity;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options.setContext(this.getContext());\n      var opacity = this.opacity;\n      if (!opacity) {\n        return;\n      }\n      this._updateAnimationTarget(options);\n      var tooltipSize = {\n        width: this.width,\n        height: this.height\n      };\n      var pt = {\n        x: this.x,\n        y: this.y\n      };\n      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n      var padding = toPadding(options.padding);\n      var hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n      if (options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        this.drawBackground(pt, ctx, tooltipSize, options);\n        overrideTextDirection(ctx, options.textDirection);\n        pt.y += padding.top;\n        this.drawTitle(pt, ctx, options);\n        this.drawBody(pt, ctx, options);\n        this.drawFooter(pt, ctx, options);\n        restoreTextDirection(ctx, options.textDirection);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements, eventPosition) {\n      var _this34 = this;\n      var lastActive = this._active;\n      var active = activeElements.map(function (_ref11) {\n        var datasetIndex = _ref11.datasetIndex,\n          index = _ref11.index;\n        var meta = _this34.chart.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('Cannot find a dataset at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(lastActive, active);\n      var positionChanged = this._positionChanged(active, eventPosition);\n      if (changed || positionChanged) {\n        this._active = active;\n        this._eventPosition = eventPosition;\n        this._ignoreReplayEvents = true;\n        this.update(true);\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e, replay) {\n      var inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (replay && this._ignoreReplayEvents) {\n        return false;\n      }\n      this._ignoreReplayEvents = false;\n      var options = this.options;\n      var lastActive = this._active || [];\n      var active = this._getActiveElements(e, lastActive, replay, inChartArea);\n      var positionChanged = this._positionChanged(active, e);\n      var changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n      if (changed) {\n        this._active = active;\n        if (options.enabled || options.external) {\n          this._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          this.update(true, replay);\n        }\n      }\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, replay, inChartArea) {\n      var options = this.options;\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive;\n      }\n      var active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n      if (options.reverse) {\n        active.reverse();\n      }\n      return active;\n    }\n  }, {\n    key: \"_positionChanged\",\n    value: function _positionChanged(active, e) {\n      var caretX = this.caretX,\n        caretY = this.caretY,\n        options = this.options;\n      var position = positioners[options.position].call(this, active, e);\n      return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n  }]);\n  return Tooltip;\n}(Element);\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners: positioners,\n  afterInit: function afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart: chart,\n        options: options\n      });\n    }\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset: function reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw: function afterDraw(chart) {\n    var tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      var args = {\n        tooltip: tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', _objectSpread(_objectSpread({}, args), {}, {\n        cancelable: true\n      })) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (chart.tooltip) {\n      var useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: function boxHeight(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    boxWidth: function boxWidth(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return name !== 'filter' && name !== 'itemSort' && name !== 'external';\n    },\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nvar addIfString = function addIfString(labels, raw, index, addedLabels) {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index: index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  var first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  var last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nvar validIndex = function validIndex(index, max) {\n  return index === null ? null : _limitValue(Math.round(index), 0, max);\n};\nfunction _getLabelForValue(value) {\n  var labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nvar CategoryScale = /*#__PURE__*/function (_Scale) {\n  _inherits(CategoryScale, _Scale);\n  var _super19 = _createSuper(CategoryScale);\n  function CategoryScale(cfg) {\n    var _this35;\n    _classCallCheck(this, CategoryScale);\n    _this35 = _super19.call(this, cfg);\n    _this35._startValue = undefined;\n    _this35._valueRange = 0;\n    _this35._addedLabels = [];\n    return _this35;\n  }\n  _createClass(CategoryScale, [{\n    key: \"init\",\n    value: function init(scaleOptions) {\n      var added = this._addedLabels;\n      if (added.length) {\n        var labels = this.getLabels();\n        var _iterator25 = _createForOfIteratorHelper(added),\n          _step25;\n        try {\n          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n            var _step25$value = _step25.value,\n              _index3 = _step25$value.index,\n              label = _step25$value.label;\n            if (labels[_index3] === label) {\n              labels.splice(_index3, 1);\n            }\n          }\n        } catch (err) {\n          _iterator25.e(err);\n        } finally {\n          _iterator25.f();\n        }\n        this._addedLabels = [];\n      }\n      _get(_getPrototypeOf(CategoryScale.prototype), \"init\", this).call(this, scaleOptions);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      var labels = this.getLabels();\n      index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n      return validIndex(index, labels.length - 1);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getUserBounds2 = this.getUserBounds(),\n        minDefined = _this$getUserBounds2.minDefined,\n        maxDefined = _this$getUserBounds2.maxDefined;\n      var _this$getMinMax = this.getMinMax(true),\n        min = _this$getMinMax.min,\n        max = _this$getMinMax.max;\n      if (this.options.bounds === 'ticks') {\n        if (!minDefined) {\n          min = 0;\n        }\n        if (!maxDefined) {\n          max = this.getLabels().length - 1;\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var min = this.min;\n      var max = this.max;\n      var offset = this.options.offset;\n      var ticks = [];\n      var labels = this.getLabels();\n      labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n      this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n      this._startValue = this.min - (offset ? 0.5 : 0);\n      for (var value = min; value <= max; value++) {\n        ticks.push({\n          value: value\n        });\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return _getLabelForValue.call(this, value);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      _get(_getPrototypeOf(CategoryScale.prototype), \"configure\", this).call(this);\n      if (!this.isHorizontal()) {\n        this._reversePixels = !this._reversePixels;\n      }\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (typeof value !== 'number') {\n        value = this.parse(value);\n      }\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.bottom;\n    }\n  }]);\n  return CategoryScale;\n}(Scale);\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  var ticks = [];\n  var MIN_SPACING = 1e-14;\n  var bounds = generationOptions.bounds,\n    step = generationOptions.step,\n    min = generationOptions.min,\n    max = generationOptions.max,\n    precision = generationOptions.precision,\n    count = generationOptions.count,\n    maxTicks = generationOptions.maxTicks,\n    maxDigits = generationOptions.maxDigits,\n    includeBounds = generationOptions.includeBounds;\n  var unit = step || 1;\n  var maxSpaces = maxTicks - 1;\n  var rmin = dataRange.min,\n    rmax = dataRange.max;\n  var minDefined = !isNullOrUndef(min);\n  var maxDefined = !isNullOrUndef(max);\n  var countDefined = !isNullOrUndef(count);\n  var minSpacing = (rmax - rmin) / (maxDigits + 1);\n  var spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  var factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  var decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  var j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    var tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref12) {\n  var horizontal = _ref12.horizontal,\n    minRotation = _ref12.minRotation;\n  var rad = toRadians(minRotation);\n  var ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  var length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nvar LinearScaleBase = /*#__PURE__*/function (_Scale2) {\n  _inherits(LinearScaleBase, _Scale2);\n  var _super20 = _createSuper(LinearScaleBase);\n  function LinearScaleBase(cfg) {\n    var _this36;\n    _classCallCheck(this, LinearScaleBase);\n    _this36 = _super20.call(this, cfg);\n    _this36.start = undefined;\n    _this36.end = undefined;\n    _this36._startValue = undefined;\n    _this36._endValue = undefined;\n    _this36._valueRange = 0;\n    return _this36;\n  }\n  _createClass(LinearScaleBase, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n        return null;\n      }\n      return +raw;\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var beginAtZero = this.options.beginAtZero;\n      var _this$getUserBounds3 = this.getUserBounds(),\n        minDefined = _this$getUserBounds3.minDefined,\n        maxDefined = _this$getUserBounds3.maxDefined;\n      var min = this.min,\n        max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (beginAtZero) {\n        var minSign = sign(min);\n        var maxSign = sign(max);\n        if (minSign < 0 && maxSign < 0) {\n          setMax(0);\n        } else if (minSign > 0 && maxSign > 0) {\n          setMin(0);\n        }\n      }\n      if (min === max) {\n        var offset = max === 0 ? 1 : Math.abs(max * 0.05);\n        setMax(max + offset);\n        if (!beginAtZero) {\n          setMin(min - offset);\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"getTickLimit\",\n    value: function getTickLimit() {\n      var tickOpts = this.options.ticks;\n      var maxTicksLimit = tickOpts.maxTicksLimit,\n        stepSize = tickOpts.stepSize;\n      var maxTicks;\n      if (stepSize) {\n        maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n        if (maxTicks > 1000) {\n          console.warn(\"scales.\".concat(this.id, \".ticks.stepSize: \").concat(stepSize, \" would result generating up to \").concat(maxTicks, \" ticks. Limiting to 1000.\"));\n          maxTicks = 1000;\n        }\n      } else {\n        maxTicks = this.computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n      return maxTicks;\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      var maxTicks = this.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        bounds: opts.bounds,\n        min: opts.min,\n        max: opts.max,\n        precision: tickOpts.precision,\n        step: tickOpts.stepSize,\n        count: tickOpts.count,\n        maxDigits: this._maxDigits(),\n        horizontal: this.isHorizontal(),\n        minRotation: tickOpts.minRotation || 0,\n        includeBounds: tickOpts.includeBounds !== false\n      };\n      var dataRange = this._range || this;\n      var ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var ticks = this.ticks;\n      var start = this.min;\n      var end = this.max;\n      _get(_getPrototypeOf(LinearScaleBase.prototype), \"configure\", this).call(this);\n      if (this.options.offset && ticks.length) {\n        var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n        start -= offset;\n        end += offset;\n      }\n      this._startValue = start;\n      this._endValue = end;\n      this._valueRange = end - start;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }]);\n  return LinearScaleBase;\n}(Scale);\nvar LinearScale = /*#__PURE__*/function (_LinearScaleBase) {\n  _inherits(LinearScale, _LinearScaleBase);\n  var _super21 = _createSuper(LinearScale);\n  function LinearScale() {\n    _classCallCheck(this, LinearScale);\n    return _super21.apply(this, arguments);\n  }\n  _createClass(LinearScale, [{\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax2 = this.getMinMax(true),\n        min = _this$getMinMax2.min,\n        max = _this$getMinMax2.max;\n      this.min = isNumberFinite(min) ? min : 0;\n      this.max = isNumberFinite(max) ? max : 1;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      var horizontal = this.isHorizontal();\n      var length = horizontal ? this.width : this.height;\n      var minRotation = toRadians(this.options.ticks.minRotation);\n      var ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n      var tickFont = this._resolveTickFontOptions(0);\n      return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n  }]);\n  return LinearScale;\n}(LinearScaleBase);\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nvar log10Floor = function log10Floor(v) {\n  return Math.floor(log10(v));\n};\nvar changeExponent = function changeExponent(v, m) {\n  return Math.pow(10, log10Floor(v) + m);\n};\nfunction isMajor(tickVal) {\n  var remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  var rangeStep = Math.pow(10, rangeExp);\n  var start = Math.floor(min / rangeStep);\n  var end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  var range = max - min;\n  var rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref13) {\n  var min = _ref13.min,\n    max = _ref13.max;\n  min = finiteOrDefault(generationOptions.min, min);\n  var ticks = [];\n  var minExp = log10Floor(min);\n  var exp = startExp(min, max);\n  var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  var stepSize = Math.pow(10, exp);\n  var base = minExp > exp ? Math.pow(10, minExp) : 0;\n  var start = Math.round((min - base) * precision) / precision;\n  var offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  var significand = Math.floor((start - offset) / Math.pow(10, exp));\n  var value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value: value,\n      major: isMajor(value),\n      significand: significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  var lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand: significand\n  });\n  return ticks;\n}\nvar LogarithmicScale = /*#__PURE__*/function (_Scale3) {\n  _inherits(LogarithmicScale, _Scale3);\n  var _super22 = _createSuper(LogarithmicScale);\n  function LogarithmicScale(cfg) {\n    var _this37;\n    _classCallCheck(this, LogarithmicScale);\n    _this37 = _super22.call(this, cfg);\n    _this37.start = undefined;\n    _this37.end = undefined;\n    _this37._startValue = undefined;\n    _this37._valueRange = 0;\n    return _this37;\n  }\n  _createClass(LogarithmicScale, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      var value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n      if (value === 0) {\n        this._zero = true;\n        return undefined;\n      }\n      return isNumberFinite(value) && value > 0 ? value : null;\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax3 = this.getMinMax(true),\n        min = _this$getMinMax3.min,\n        max = _this$getMinMax3.max;\n      this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n      this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n      if (this.options.beginAtZero) {\n        this._zero = true;\n      }\n      if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n        this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n      }\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var _this$getUserBounds4 = this.getUserBounds(),\n        minDefined = _this$getUserBounds4.minDefined,\n        maxDefined = _this$getUserBounds4.maxDefined;\n      var min = this.min;\n      var max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (min === max) {\n        if (min <= 0) {\n          setMin(1);\n          setMax(10);\n        } else {\n          setMin(changeExponent(min, -1));\n          setMax(changeExponent(max, +1));\n        }\n      }\n      if (min <= 0) {\n        setMin(changeExponent(max, -1));\n      }\n      if (max <= 0) {\n        setMax(changeExponent(min, +1));\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var generationOptions = {\n        min: this._userMin,\n        max: this._userMax\n      };\n      var ticks = generateTicks(generationOptions, this);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var start = this.min;\n      _get(_getPrototypeOf(LogarithmicScale.prototype), \"configure\", this).call(this);\n      this._startValue = log10(start);\n      this._valueRange = log10(this.max) - log10(start);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (value === undefined || value === 0) {\n        value = this.min;\n      }\n      if (value === null || isNaN(value)) {\n        return NaN;\n      }\n      return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var decimal = this.getDecimalForPixel(pixel);\n      return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n  }]);\n  return LogarithmicScale;\n}(Scale);\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  var tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    var padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  var orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  var limits = Object.assign({}, orig);\n  var labelSizes = [];\n  var padding = [];\n  var valueCount = scale._pointLabels.length;\n  var pointLabelOpts = scale.options.pointLabels;\n  var additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (var i = 0; i < valueCount; i++) {\n    var opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    var pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    var plFont = toFont(opts.font);\n    var textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    var angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    var angle = Math.round(toDegrees(angleRadians));\n    var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  var sin = Math.abs(Math.sin(angle));\n  var cos = Math.abs(Math.cos(angle));\n  var x = 0;\n  var y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  var outerDistance = scale.drawingArea;\n  var extra = itemOpts.extra,\n    additionalAngle = itemOpts.additionalAngle,\n    padding = itemOpts.padding,\n    size = itemOpts.size;\n  var pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  var angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  var y = yForAngle(pointLabelPosition.y, size.h, angle);\n  var textAlign = getTextAlignForAngle(angle);\n  var left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y: y,\n    textAlign: textAlign,\n    left: left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  var left = item.left,\n    top = item.top,\n    right = item.right,\n    bottom = item.bottom;\n  var apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  var items = [];\n  var valueCount = scale._pointLabels.length;\n  var opts = scale.options;\n  var _opts$pointLabels = opts.pointLabels,\n    centerPointLabels = _opts$pointLabels.centerPointLabels,\n    display = _opts$pointLabels.display;\n  var itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  var area;\n  for (var i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    var item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  var left = item.left,\n    top = item.top,\n    right = item.right,\n    bottom = item.bottom;\n  var backdropColor = opts.backdropColor;\n  if (!isNullOrUndef(backdropColor)) {\n    var borderRadius = toTRBLCorners(opts.borderRadius);\n    var padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    var backdropLeft = left - padding.left;\n    var backdropTop = top - padding.top;\n    var backdropWidth = right - left + padding.width;\n    var backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(function (v) {\n      return v !== 0;\n    })) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  var ctx = scale.ctx,\n    pointLabels = scale.options.pointLabels;\n  for (var i = labelCount - 1; i >= 0; i--) {\n    var item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    var optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    var plFont = toFont(optsAtIndex.font);\n    var x = item.x,\n      y = item.y,\n      textAlign = item.textAlign;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  var ctx = scale.ctx;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    var pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (var i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  var ctx = scale.ctx;\n  var circular = gridLineOpts.circular;\n  var color = gridLineOpts.color,\n    lineWidth = gridLineOpts.lineWidth;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label: label,\n    index: index,\n    type: 'pointLabel'\n  });\n}\nvar RadialLinearScale = /*#__PURE__*/function (_LinearScaleBase2) {\n  _inherits(RadialLinearScale, _LinearScaleBase2);\n  var _super23 = _createSuper(RadialLinearScale);\n  function RadialLinearScale(cfg) {\n    var _this38;\n    _classCallCheck(this, RadialLinearScale);\n    _this38 = _super23.call(this, cfg);\n    _this38.xCenter = undefined;\n    _this38.yCenter = undefined;\n    _this38.drawingArea = undefined;\n    _this38._pointLabels = [];\n    _this38._pointLabelItems = [];\n    return _this38;\n  }\n  _createClass(RadialLinearScale, [{\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      var padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n      var w = this.width = this.maxWidth - padding.width;\n      var h = this.height = this.maxHeight - padding.height;\n      this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n      this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n      this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax4 = this.getMinMax(false),\n        min = _this$getMinMax4.min,\n        max = _this$getMinMax4.max;\n      this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n      this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var _this39 = this;\n      LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n      this._pointLabels = this.getLabels().map(function (value, index) {\n        var label = callback(_this39.options.pointLabels.callback, [value, index], _this39);\n        return label || label === 0 ? label : '';\n      }).filter(function (v, i) {\n        return _this39.chart.getDataVisibility(i);\n      });\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var opts = this.options;\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(this);\n      } else {\n        this.setCenterPoint(0, 0, 0, 0);\n      }\n    }\n  }, {\n    key: \"setCenterPoint\",\n    value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n      this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n      this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n  }, {\n    key: \"getIndexAngle\",\n    value: function getIndexAngle(index) {\n      var angleMultiplier = TAU / (this._pointLabels.length || 1);\n      var startAngle = this.options.startAngle || 0;\n      return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n  }, {\n    key: \"getDistanceFromCenterForValue\",\n    value: function getDistanceFromCenterForValue(value) {\n      if (isNullOrUndef(value)) {\n        return NaN;\n      }\n      var scalingFactor = this.drawingArea / (this.max - this.min);\n      if (this.options.reverse) {\n        return (this.max - value) * scalingFactor;\n      }\n      return (value - this.min) * scalingFactor;\n    }\n  }, {\n    key: \"getValueForDistanceFromCenter\",\n    value: function getValueForDistanceFromCenter(distance) {\n      if (isNullOrUndef(distance)) {\n        return NaN;\n      }\n      var scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n      return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n  }, {\n    key: \"getPointLabelContext\",\n    value: function getPointLabelContext(index) {\n      var pointLabels = this._pointLabels || [];\n      if (index >= 0 && index < pointLabels.length) {\n        var pointLabel = pointLabels[index];\n        return createPointLabelContext(this.getContext(), index, pointLabel);\n      }\n    }\n  }, {\n    key: \"getPointPosition\",\n    value: function getPointPosition(index, distanceFromCenter) {\n      var additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n      return {\n        x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n        y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n        angle: angle\n      };\n    }\n  }, {\n    key: \"getPointPositionForValue\",\n    value: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n  }, {\n    key: \"getBasePosition\",\n    value: function getBasePosition(index) {\n      return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n  }, {\n    key: \"getPointLabelPosition\",\n    value: function getPointLabelPosition(index) {\n      var _this$_pointLabelItem = this._pointLabelItems[index],\n        left = _this$_pointLabelItem.left,\n        top = _this$_pointLabelItem.top,\n        right = _this$_pointLabelItem.right,\n        bottom = _this$_pointLabelItem.bottom;\n      return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n      };\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var _this$options16 = this.options,\n        backgroundColor = _this$options16.backgroundColor,\n        circular = _this$options16.grid.circular;\n      if (backgroundColor) {\n        var ctx = this.ctx;\n        ctx.save();\n        ctx.beginPath();\n        pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n        ctx.closePath();\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid() {\n      var _this40 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var angleLines = opts.angleLines,\n        grid = opts.grid,\n        border = opts.border;\n      var labelCount = this._pointLabels.length;\n      var i, offset, position;\n      if (opts.pointLabels.display) {\n        drawPointLabels(this, labelCount);\n      }\n      if (grid.display) {\n        this.ticks.forEach(function (tick, index) {\n          if (index !== 0) {\n            offset = _this40.getDistanceFromCenterForValue(tick.value);\n            var context = _this40.getContext(index);\n            var optsAtIndex = grid.setContext(context);\n            var optsAtIndexBorder = border.setContext(context);\n            drawRadiusLine(_this40, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n          }\n        });\n      }\n      if (angleLines.display) {\n        ctx.save();\n        for (i = labelCount - 1; i >= 0; i--) {\n          var optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n          var color = optsAtIndex.color,\n            lineWidth = optsAtIndex.lineWidth;\n          if (!lineWidth || !color) {\n            continue;\n          }\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = color;\n          ctx.setLineDash(optsAtIndex.borderDash);\n          ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n          offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n          position = this.getPointPosition(i, offset);\n          ctx.beginPath();\n          ctx.moveTo(this.xCenter, this.yCenter);\n          ctx.lineTo(position.x, position.y);\n          ctx.stroke();\n        }\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {}\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels() {\n      var _this41 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      if (!tickOpts.display) {\n        return;\n      }\n      var startAngle = this.getIndexAngle(0);\n      var offset, width;\n      ctx.save();\n      ctx.translate(this.xCenter, this.yCenter);\n      ctx.rotate(startAngle);\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      this.ticks.forEach(function (tick, index) {\n        if (index === 0 && !opts.reverse) {\n          return;\n        }\n        var optsAtIndex = tickOpts.setContext(_this41.getContext(index));\n        var tickFont = toFont(optsAtIndex.font);\n        offset = _this41.getDistanceFromCenterForValue(_this41.ticks[index].value);\n        if (optsAtIndex.showLabelBackdrop) {\n          ctx.font = tickFont.string;\n          width = ctx.measureText(tick.label).width;\n          ctx.fillStyle = optsAtIndex.backdropColor;\n          var padding = toPadding(optsAtIndex.backdropPadding);\n          ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n        }\n        renderText(ctx, tick.label, 0, -offset, tickFont, {\n          color: optsAtIndex.color\n        });\n      });\n      ctx.restore();\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {}\n  }]);\n  return RadialLinearScale;\n}(LinearScaleBase);\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback: function callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nvar INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nvar UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction _parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  var adapter = scale._adapter;\n  var _scale$_parseOpts = scale._parseOpts,\n    parser = _scale$_parseOpts.parser,\n    round = _scale$_parseOpts.round,\n    isoWeekday = _scale$_parseOpts.isoWeekday;\n  var value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  var ilen = UNITS.length;\n  for (var i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    var interval = INTERVALS[UNITS[i]];\n    var factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (var i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    var unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    var _lookup2 = _lookup(timestamps, time),\n      lo = _lookup2.lo,\n      hi = _lookup2.hi;\n    var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  var adapter = scale._adapter;\n  var first = +adapter.startOf(ticks[0].value, majorUnit);\n  var last = ticks[ticks.length - 1].value;\n  var major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  var ticks = [];\n  var map = {};\n  var ilen = values.length;\n  var i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value: value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nvar TimeScale = /*#__PURE__*/function (_Scale4) {\n  _inherits(TimeScale, _Scale4);\n  var _super24 = _createSuper(TimeScale);\n  function TimeScale(props) {\n    var _this42;\n    _classCallCheck(this, TimeScale);\n    _this42 = _super24.call(this, props);\n    _this42._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    _this42._unit = 'day';\n    _this42._majorUnit = undefined;\n    _this42._offsets = {};\n    _this42._normalized = false;\n    _this42._parseOpts = undefined;\n    return _this42;\n  }\n  _createClass(TimeScale, [{\n    key: \"init\",\n    value: function init(scaleOpts) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var time = scaleOpts.time || (scaleOpts.time = {});\n      var adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n      adapter.init(opts);\n      mergeIf(time.displayFormats, adapter.formats());\n      this._parseOpts = {\n        parser: time.parser,\n        round: time.round,\n        isoWeekday: time.isoWeekday\n      };\n      _get(_getPrototypeOf(TimeScale.prototype), \"init\", this).call(this, scaleOpts);\n      this._normalized = opts.normalized;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (raw === undefined) {\n        return null;\n      }\n      return _parse(this, raw);\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      _get(_getPrototypeOf(TimeScale.prototype), \"beforeLayout\", this).call(this);\n      this._cache = {\n        data: [],\n        labels: [],\n        all: []\n      };\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var options = this.options;\n      var adapter = this._adapter;\n      var unit = options.time.unit || 'day';\n      var _this$getUserBounds5 = this.getUserBounds(),\n        min = _this$getUserBounds5.min,\n        max = _this$getUserBounds5.max,\n        minDefined = _this$getUserBounds5.minDefined,\n        maxDefined = _this$getUserBounds5.maxDefined;\n      function _applyBounds(bounds) {\n        if (!minDefined && !isNaN(bounds.min)) {\n          min = Math.min(min, bounds.min);\n        }\n        if (!maxDefined && !isNaN(bounds.max)) {\n          max = Math.max(max, bounds.max);\n        }\n      }\n      if (!minDefined || !maxDefined) {\n        _applyBounds(this._getLabelBounds());\n        if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n          _applyBounds(this.getMinMax(false));\n        }\n      }\n      min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n      max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n      this.min = Math.min(min, max - 1);\n      this.max = Math.max(min + 1, max);\n    }\n  }, {\n    key: \"_getLabelBounds\",\n    value: function _getLabelBounds() {\n      var arr = this.getLabelTimestamps();\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      if (arr.length) {\n        min = arr[0];\n        max = arr[arr.length - 1];\n      }\n      return {\n        min: min,\n        max: max\n      };\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var options = this.options;\n      var timeOpts = options.time;\n      var tickOpts = options.ticks;\n      var timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n      if (options.bounds === 'ticks' && timestamps.length) {\n        this.min = this._userMin || timestamps[0];\n        this.max = this._userMax || timestamps[timestamps.length - 1];\n      }\n      var min = this.min;\n      var max = this.max;\n      var ticks = _filterBetween(timestamps, min, max);\n      this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n      this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n      this.initOffsets(timestamps);\n      if (options.reverse) {\n        ticks.reverse();\n      }\n      return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {\n      if (this.options.offsetAfterAutoskip) {\n        this.initOffsets(this.ticks.map(function (tick) {\n          return +tick.value;\n        }));\n      }\n    }\n  }, {\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var start = 0;\n      var end = 0;\n      var first, last;\n      if (this.options.offset && timestamps.length) {\n        first = this.getDecimalForValue(timestamps[0]);\n        if (timestamps.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n        }\n        last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n        if (timestamps.length === 1) {\n          end = last;\n        } else {\n          end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n        }\n      }\n      var limit = timestamps.length < 3 ? 0.5 : 0.25;\n      start = _limitValue(start, 0, limit);\n      end = _limitValue(end, 0, limit);\n      this._offsets = {\n        start: start,\n        end: end,\n        factor: 1 / (start + 1 + end)\n      };\n    }\n  }, {\n    key: \"_generate\",\n    value: function _generate() {\n      var adapter = this._adapter;\n      var min = this.min;\n      var max = this.max;\n      var options = this.options;\n      var timeOpts = options.time;\n      var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n      var stepSize = valueOrDefault(options.ticks.stepSize, 1);\n      var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n      var hasWeekday = isNumber(weekday) || weekday === true;\n      var ticks = {};\n      var first = min;\n      var time, count;\n      if (hasWeekday) {\n        first = +adapter.startOf(first, 'isoWeek', weekday);\n      }\n      first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n      if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n        throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n      }\n      var timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n      for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n        addTick(ticks, time, timestamps);\n      }\n      if (time === max || options.bounds === 'ticks' || count === 1) {\n        addTick(ticks, time, timestamps);\n      }\n      return Object.keys(ticks).sort(function (a, b) {\n        return a - b;\n      }).map(function (x) {\n        return +x;\n      });\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      var adapter = this._adapter;\n      var timeOpts = this.options.time;\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(value, timeOpts.tooltipFormat);\n      }\n      return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n  }, {\n    key: \"format\",\n    value: function format(value, _format) {\n      var options = this.options;\n      var formats = options.time.displayFormats;\n      var unit = this._unit;\n      var fmt = _format || formats[unit];\n      return this._adapter.format(value, fmt);\n    }\n  }, {\n    key: \"_tickFormatFunction\",\n    value: function _tickFormatFunction(time, index, ticks, format) {\n      var options = this.options;\n      var formatter = options.ticks.callback;\n      if (formatter) {\n        return callback(formatter, [time, index, ticks], this);\n      }\n      var formats = options.time.displayFormats;\n      var unit = this._unit;\n      var majorUnit = this._majorUnit;\n      var minorFormat = unit && formats[unit];\n      var majorFormat = majorUnit && formats[majorUnit];\n      var tick = ticks[index];\n      var major = majorUnit && majorFormat && tick && tick.major;\n      return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        tick.label = this._tickFormatFunction(tick.value, i, ticks);\n      }\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForValue(value);\n      return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return this.min + pos * (this.max - this.min);\n    }\n  }, {\n    key: \"_getLabelSize\",\n    value: function _getLabelSize(label) {\n      var ticksOpts = this.options.ticks;\n      var tickLabelWidth = this.ctx.measureText(label).width;\n      var angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = this._resolveTickFontOptions(0).size;\n      return {\n        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n      };\n    }\n  }, {\n    key: \"_getLabelCapacity\",\n    value: function _getLabelCapacity(exampleTime) {\n      var timeOpts = this.options.time;\n      var displayFormats = timeOpts.displayFormats;\n      var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n      var exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n      var size = this._getLabelSize(exampleLabel);\n      var capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n      return capacity > 0 ? capacity : 1;\n    }\n  }, {\n    key: \"getDataTimestamps\",\n    value: function getDataTimestamps() {\n      var timestamps = this._cache.data || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var metas = this.getMatchingVisibleMetas();\n      if (this._normalized && metas.length) {\n        return this._cache.data = metas[0].controller.getAllParsedValues(this);\n      }\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n      }\n      return this._cache.data = this.normalize(timestamps);\n    }\n  }, {\n    key: \"getLabelTimestamps\",\n    value: function getLabelTimestamps() {\n      var timestamps = this._cache.labels || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var labels = this.getLabels();\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        timestamps.push(_parse(this, labels[i]));\n      }\n      return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(values) {\n      return _arrayUnique(values.sort(sorter));\n    }\n  }]);\n  return TimeScale;\n}(Scale);\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  var lo = 0;\n  var hi = table.length - 1;\n  var prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      var _lookupByKey2 = _lookupByKey(table, 'pos', val);\n      lo = _lookupByKey2.lo;\n      hi = _lookupByKey2.hi;\n    }\n    var _table$lo = table[lo];\n    prevSource = _table$lo.pos;\n    prevTarget = _table$lo.time;\n    var _table$hi = table[hi];\n    nextSource = _table$hi.pos;\n    nextTarget = _table$hi.time;\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      var _lookupByKey3 = _lookupByKey(table, 'time', val);\n      lo = _lookupByKey3.lo;\n      hi = _lookupByKey3.hi;\n    }\n    var _table$lo2 = table[lo];\n    prevSource = _table$lo2.time;\n    prevTarget = _table$lo2.pos;\n    var _table$hi2 = table[hi];\n    nextSource = _table$hi2.time;\n    nextTarget = _table$hi2.pos;\n  }\n  var span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nvar TimeSeriesScale = /*#__PURE__*/function (_TimeScale) {\n  _inherits(TimeSeriesScale, _TimeScale);\n  var _super25 = _createSuper(TimeSeriesScale);\n  function TimeSeriesScale(props) {\n    var _this43;\n    _classCallCheck(this, TimeSeriesScale);\n    _this43 = _super25.call(this, props);\n    _this43._table = [];\n    _this43._minPos = undefined;\n    _this43._tableRange = undefined;\n    return _this43;\n  }\n  _createClass(TimeSeriesScale, [{\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = this._getTimestampsForTable();\n      var table = this._table = this.buildLookupTable(timestamps);\n      this._minPos = interpolate(table, this.min);\n      this._tableRange = interpolate(table, this.max) - this._minPos;\n      _get(_getPrototypeOf(TimeSeriesScale.prototype), \"initOffsets\", this).call(this, timestamps);\n    }\n  }, {\n    key: \"buildLookupTable\",\n    value: function buildLookupTable(timestamps) {\n      var min = this.min,\n        max = this.max;\n      var items = [];\n      var table = [];\n      var i, ilen, prev, curr, next;\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        curr = timestamps[i];\n        if (curr >= min && curr <= max) {\n          items.push(curr);\n        }\n      }\n      if (items.length < 2) {\n        return [{\n          time: min,\n          pos: 0\n        }, {\n          time: max,\n          pos: 1\n        }];\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        next = items[i + 1];\n        prev = items[i - 1];\n        curr = items[i];\n        if (Math.round((next + prev) / 2) !== curr) {\n          table.push({\n            time: curr,\n            pos: i / (ilen - 1)\n          });\n        }\n      }\n      return table;\n    }\n  }, {\n    key: \"_getTimestampsForTable\",\n    value: function _getTimestampsForTable() {\n      var timestamps = this._cache.all || [];\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var data = this.getDataTimestamps();\n      var label = this.getLabelTimestamps();\n      if (data.length && label.length) {\n        timestamps = this.normalize(data.concat(label));\n      } else {\n        timestamps = data.length ? data : label;\n      }\n      timestamps = this._cache.all = timestamps;\n      return timestamps;\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n  }]);\n  return TimeSeriesScale;\n}(TimeScale);\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nvar registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":"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","names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","init","formats","format","diff","startOf","endOf","members","prototype","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","overrides","unregister","itemDefaults","merge","defaultRoutes","routeDefaults","descriptors","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","getResolver","resolver","subPrefixes","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","invalidatePlugins","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","capBezierPoints","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","_parseOpts","parser","isoWeekday","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_unit","_majorUnit","_offsets","_normalized","adapters","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\jaime\\TFGProto\\newfront\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}