{"ast":null,"code":"import axios from\"axios\";import authHeader from\"./auth-header\";var API_URL=\"/api/admin/\";var getCurrentUser=function getCurrentUser(){return JSON.parse(localStorage.getItem(\"user\"));};var deleteAccountByUsername=function deleteAccountByUsername(username){var user=getCurrentUser();if(user&&user.accessToken){return axios.delete(API_URL+\"delete-account-byUsername\",{headers:authHeader(),data:{username:username}}).then(function(response){return response.data;}).catch(function(error){console.error(\"Error borrando la cuenta:\",error);throw error;});}else{return Promise.reject(new Error(\"Usuario no encontrado o token expirado.\"));}};var getAllUsersExceptAdmins=function getAllUsersExceptAdmins(){return axios.get(API_URL+\"all-users\",{headers:authHeader()});};var AdminService={getAllUsersExceptAdmins:getAllUsersExceptAdmins,deleteAccountByUsername:deleteAccountByUsername};export default AdminService;","map":{"version":3,"names":["axios","authHeader","API_URL","getCurrentUser","JSON","parse","localStorage","getItem","deleteAccountByUsername","username","user","accessToken","delete","headers","data","then","response","catch","error","console","Promise","reject","Error","getAllUsersExceptAdmins","get","AdminService"],"sources":["C:/Users/jaime/TFGProto/newfront/src/services/admin.service.js"],"sourcesContent":["import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"/api/admin/\";\r\n\r\nconst getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\n\r\nconst deleteAccountByUsername = (username) => {\r\n  const user = getCurrentUser();\r\n  if (user && user.accessToken) {\r\n    return axios\r\n      .delete(API_URL + \"delete-account-byUsername\", {\r\n        headers: authHeader(),\r\n        data: { username },\r\n      })\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error borrando la cuenta:\", error);\r\n        throw error;\r\n      });\r\n  } else {\r\n    return Promise.reject(new Error(\"Usuario no encontrado o token expirado.\"));\r\n  }\r\n};\r\n\r\nconst getAllUsersExceptAdmins = () => {\r\n  return axios.get(API_URL + \"all-users\", { headers: authHeader() });\r\n};\r\n\r\nconst AdminService = {\r\n  getAllUsersExceptAdmins,\r\n  deleteAccountByUsername,\r\n};\r\n\r\nexport default AdminService;\r\n"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,MAAOC,WAAU,KAAM,eAAe,CAEtC,GAAMC,QAAO,CAAG,aAAa,CAE7B,GAAMC,eAAc,CAAG,QAAjBA,eAAc,EAAS,CAC3B,MAAOC,KAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CACjD,CAAC,CAGD,GAAMC,wBAAuB,CAAG,QAA1BA,wBAAuB,CAAIC,QAAQ,CAAK,CAC5C,GAAMC,KAAI,CAAGP,cAAc,EAAE,CAC7B,GAAIO,IAAI,EAAIA,IAAI,CAACC,WAAW,CAAE,CAC5B,MAAOX,MAAK,CACTY,MAAM,CAACV,OAAO,CAAG,2BAA2B,CAAE,CAC7CW,OAAO,CAAEZ,UAAU,EAAE,CACrBa,IAAI,CAAE,CAAEL,QAAQ,CAARA,QAAS,CACnB,CAAC,CAAC,CACDM,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClB,MAAOA,SAAQ,CAACF,IAAI,CACtB,CAAC,CAAC,CACDG,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,KAAMA,MAAK,CACb,CAAC,CAAC,CACN,CAAC,IAAM,CACL,MAAOE,QAAO,CAACC,MAAM,CAAC,GAAIC,MAAK,CAAC,yCAAyC,CAAC,CAAC,CAC7E,CACF,CAAC,CAED,GAAMC,wBAAuB,CAAG,QAA1BA,wBAAuB,EAAS,CACpC,MAAOvB,MAAK,CAACwB,GAAG,CAACtB,OAAO,CAAG,WAAW,CAAE,CAAEW,OAAO,CAAEZ,UAAU,EAAG,CAAC,CAAC,CACpE,CAAC,CAED,GAAMwB,aAAY,CAAG,CACnBF,uBAAuB,CAAvBA,uBAAuB,CACvBf,uBAAuB,CAAvBA,uBACF,CAAC,CAED,cAAeiB,aAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}