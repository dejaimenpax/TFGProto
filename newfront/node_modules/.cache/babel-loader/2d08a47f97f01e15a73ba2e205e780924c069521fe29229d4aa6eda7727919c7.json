{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"/api/auth/\";\nconst checkTokenExpiration = () => {\n  const loginTime = localStorage.getItem(\"loginTime\");\n  const currentTime = Date.now();\n  const elapsedMilliseconds = currentTime - parseInt(loginTime);\n  const elapsedHours = elapsedMilliseconds / (1000 * 60 * 60);\n  if (elapsedHours >= 24) {\n    // Ha pasado más de 24 horas, eliminar el usuario del local storage\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"loginTime\");\n  }\n};\nconst register = (email, password, teacher, role) => {\n  return axios.post(API_URL + \"signup\", {\n    email,\n    password,\n    teacher,\n    role\n  });\n};\nconst login = (email, password) => {\n  return axios.post(API_URL + \"signin\", {\n    email,\n    password\n  }).then(response => {\n    if (response.data.accessToken) {\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n      localStorage.setItem(\"loginTime\", Date.now());\n    }\n    return response.data;\n  });\n};\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\nconst getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\nconst getCurrentUserFromDB = () => {\n  const user = getCurrentUser();\n  if (user && user.accessToken) {\n    console.log(\"Entra al getCurrentuserFromDB\");\n    return axios.get(API_URL + \"user\", {\n      headers: {\n        \"x-access-token\": user.accessToken\n      }\n    });\n  } else {\n    return Promise.reject(new Error(\"User not found or token expired\"));\n  }\n};\nconst getTeachers = () => {\n  return axios.get(API_URL + \"teachers\");\n};\nconst getMyStudents = () => {\n  const user = getCurrentUser();\n  if (user && user.accessToken) {\n    return axios.get(API_URL + \"students\", {\n      headers: {\n        \"x-access-token\": user.accessToken\n      }\n    });\n  } else {\n    return Promise.reject(new Error(\"User not found or token expired\"));\n  }\n};\nconst eraseStats = () => {\n  const user = getCurrentUser();\n  if (user && user.accessToken) {\n    return axios.post(API_URL + \"erase-stats\", null, {\n      headers: {\n        \"x-access-token\": user.accessToken\n      }\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  } else {\n    return Promise.reject(new Error(\"User not found or token expired\"));\n  }\n};\nconst deleteAccountById = () => {\n  const user = getCurrentUser();\n  if (user && user.accessToken) {\n    return axios.delete(API_URL + \"delete-account-byid\", {\n      headers: {\n        \"x-access-token\": user.accessToken\n      }\n    }).then(() => {\n      logout(); // Cerrar sesión después de borrar la cuenta\n    }).catch(error => {\n      console.error(\"Error borrando la cuenta:\", error);\n      throw error;\n    });\n  } else {\n    return Promise.reject(new Error(\"User not found or token expired\"));\n  }\n};\nconst AuthService = {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  getCurrentUserFromDB,\n  getTeachers,\n  getMyStudents,\n  checkTokenExpiration,\n  eraseStats,\n  deleteAccountById\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","checkTokenExpiration","loginTime","localStorage","getItem","currentTime","Date","now","elapsedMilliseconds","parseInt","elapsedHours","removeItem","register","email","password","teacher","role","post","login","then","response","data","accessToken","setItem","JSON","stringify","logout","getCurrentUser","parse","getCurrentUserFromDB","user","console","log","get","headers","Promise","reject","Error","getTeachers","getMyStudents","eraseStats","deleteAccountById","delete","catch","error","AuthService"],"sources":["C:/Users/jaime/TFGProto/newfront/src/services/auth.service.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"/api/auth/\";\r\n\r\nconst checkTokenExpiration = () => {\r\n  const loginTime = localStorage.getItem(\"loginTime\");\r\n  const currentTime = Date.now();\r\n  const elapsedMilliseconds = currentTime - parseInt(loginTime);\r\n\r\n  const elapsedHours = elapsedMilliseconds / (1000 * 60 * 60);\r\n\r\n  if (elapsedHours >= 24) {\r\n    // Ha pasado más de 24 horas, eliminar el usuario del local storage\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"loginTime\");\r\n  }\r\n};\r\n\r\n\r\n\r\nconst register = (email, password, teacher, role) => {\r\n  return axios.post(API_URL + \"signup\", {\r\n    email,\r\n    password,\r\n    teacher,\r\n    role,\r\n  });\r\n};\r\n\r\nconst login = (email, password) => {\r\n  return axios\r\n    .post(API_URL + \"signin\", {\r\n      email,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        localStorage.setItem(\"loginTime\", Date.now())\r\n      }\r\n\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nconst getCurrentUserFromDB = () => {\r\n  const user = getCurrentUser();\r\n  if (user && user.accessToken) {\r\n    console.log(\"Entra al getCurrentuserFromDB\")\r\n    return axios.get(API_URL + \"user\", {\r\n      headers: { \"x-access-token\": user.accessToken },\r\n    });\r\n  } else {\r\n    return Promise.reject(new Error(\"User not found or token expired\"));\r\n  }\r\n};\r\n\r\nconst getTeachers = () => {\r\n  return axios.get(API_URL + \"teachers\");\r\n}\r\n\r\nconst getMyStudents = () => {\r\n  const user = getCurrentUser();\r\n  if (user && user.accessToken) {\r\n    return axios.get(API_URL + \"students\", {\r\n      headers: { \"x-access-token\": user.accessToken },\r\n    });\r\n  } else {\r\n    return Promise.reject(new Error(\"User not found or token expired\"));\r\n  }\r\n}\r\n\r\nconst eraseStats = () => {\r\n  const user = getCurrentUser();\r\n  if (user && user.accessToken) {\r\n    return axios.post(API_URL + \"erase-stats\", null, {\r\n      headers: { \"x-access-token\": user.accessToken },\r\n    })\r\n    .then((response) => {\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n\r\n      return response.data;\r\n    });\r\n  } else {\r\n    return Promise.reject(new Error(\"User not found or token expired\"));\r\n  }\r\n};\r\n\r\n\r\nconst deleteAccountById = () => {\r\n  const user = getCurrentUser();\r\n  if (user && user.accessToken) {\r\n    return axios.delete(API_URL + \"delete-account-byid\", {\r\n      headers: { \"x-access-token\": user.accessToken },\r\n    })\r\n    .then(() => {\r\n      logout(); // Cerrar sesión después de borrar la cuenta\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error borrando la cuenta:\", error);\r\n      throw error;\r\n    });\r\n  } else {\r\n    return Promise.reject(new Error(\"User not found or token expired\"));\r\n  }\r\n};\r\n\r\n\r\nconst AuthService = {\r\n  register,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  getCurrentUserFromDB,\r\n  getTeachers,\r\n  getMyStudents,\r\n  checkTokenExpiration,\r\n  eraseStats,\r\n  deleteAccountById,\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}