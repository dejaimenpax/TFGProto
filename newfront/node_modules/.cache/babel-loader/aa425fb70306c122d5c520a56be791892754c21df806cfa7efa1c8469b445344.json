{"ast":null,"code":"var encrypt=function encrypt(str,key){var result=\"\";try{for(var i=0;i<str.length;i++){var encryptedChar=String.fromCharCode(str.charCodeAt(i)^key.charCodeAt(i%key.length));result+=window.btoa(encryptedChar);// Codificar en Base64\n}}catch(error){return\"\";// Devuelve un string vacío si la desencriptación falla debido a un error\n}return result;};var decrypt=function decrypt(str,key){var result=\"\";try{for(var i=0;i<str.length;i+=4){var base64Chunk=str.slice(i,i+4);var encryptedChar=window.atob(base64Chunk);// Decodificar desde Base64\nresult+=String.fromCharCode(encryptedChar.charCodeAt(0)^key.charCodeAt(i/4%key.length));}}catch(error){return\"\";// Devuelve un string vacío si la desencriptación falla debido a un error\n}return result;};module.exports={encrypt:encrypt,decrypt:decrypt};","map":{"version":3,"names":["encrypt","str","key","result","i","length","encryptedChar","String","fromCharCode","charCodeAt","window","btoa","error","decrypt","base64Chunk","slice","atob","module","exports"],"sources":["C:/Users/jaime/TFGProto/newfront/src/common/Encryption.js"],"sourcesContent":["const encrypt = (str, key) => {\r\n    let result = \"\";\r\n    try{\r\n        for (let i = 0; i < str.length; i++) {\r\n            const encryptedChar = String.fromCharCode(str.charCodeAt(i) ^ key.charCodeAt(i % key.length));\r\n            result += window.btoa(encryptedChar); // Codificar en Base64\r\n        }\r\n    }\r\n    catch (error) {\r\n        return \"\"; // Devuelve un string vacío si la desencriptación falla debido a un error\r\n    }\r\n    return result;\r\n};\r\n\r\nconst decrypt = (str, key) => {\r\n    let result = \"\";\r\n    try{\r\n        for (let i = 0; i < str.length; i += 4) {\r\n            const base64Chunk = str.slice(i, i + 4);\r\n            const encryptedChar = window.atob(base64Chunk); // Decodificar desde Base64\r\n            result += String.fromCharCode(encryptedChar.charCodeAt(0) ^ key.charCodeAt((i / 4) % key.length));\r\n        }\r\n    }\r\n    catch (error) {\r\n        return \"\"; // Devuelve un string vacío si la desencriptación falla debido a un error\r\n    }\r\n    return result;\r\n};\r\n\r\nmodule.exports = {\r\n    encrypt,\r\n    decrypt,\r\n};"],"mappings":"AAAA,GAAMA,QAAO,CAAG,QAAVA,QAAO,CAAIC,GAAG,CAAEC,GAAG,CAAK,CAC1B,GAAIC,OAAM,CAAG,EAAE,CACf,GAAG,CACC,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,GAAG,CAACI,MAAM,CAAED,CAAC,EAAE,CAAE,CACjC,GAAME,cAAa,CAAGC,MAAM,CAACC,YAAY,CAACP,GAAG,CAACQ,UAAU,CAACL,CAAC,CAAC,CAAGF,GAAG,CAACO,UAAU,CAACL,CAAC,CAAGF,GAAG,CAACG,MAAM,CAAC,CAAC,CAC7FF,MAAM,EAAIO,MAAM,CAACC,IAAI,CAACL,aAAa,CAAC,CAAE;AAC1C,CACJ,CACA,MAAOM,KAAK,CAAE,CACV,MAAO,EAAE,CAAE;AACf,CACA,MAAOT,OAAM,CACjB,CAAC,CAED,GAAMU,QAAO,CAAG,QAAVA,QAAO,CAAIZ,GAAG,CAAEC,GAAG,CAAK,CAC1B,GAAIC,OAAM,CAAG,EAAE,CACf,GAAG,CACC,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,GAAG,CAACI,MAAM,CAAED,CAAC,EAAI,CAAC,CAAE,CACpC,GAAMU,YAAW,CAAGb,GAAG,CAACc,KAAK,CAACX,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACvC,GAAME,cAAa,CAAGI,MAAM,CAACM,IAAI,CAACF,WAAW,CAAC,CAAE;AAChDX,MAAM,EAAII,MAAM,CAACC,YAAY,CAACF,aAAa,CAACG,UAAU,CAAC,CAAC,CAAC,CAAGP,GAAG,CAACO,UAAU,CAAEL,CAAC,CAAG,CAAC,CAAIF,GAAG,CAACG,MAAM,CAAC,CAAC,CACrG,CACJ,CACA,MAAOO,KAAK,CAAE,CACV,MAAO,EAAE,CAAE;AACf,CACA,MAAOT,OAAM,CACjB,CAAC,CAEDc,MAAM,CAACC,OAAO,CAAG,CACblB,OAAO,CAAPA,OAAO,CACPa,OAAO,CAAPA,OACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}